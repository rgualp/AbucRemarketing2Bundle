<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * userCasaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class userCasaRepository extends EntityRepository {

    function get_users_casa() {
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT uc FROM mycpBundle:userCasa uc
        GROUP BY uc.user_casa_user");
        return $query->getResult();
    }

    function getUsers($exclude_own_id = null) {
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT user.user_id, user.user_name, own.own_mcp_code, own.own_name FROM mycpBundle:userCasa uc
        JOIN uc.user_casa_user user
        JOIN uc.user_casa_ownership own" .
                (($exclude_own_id != null) ? " WHERE own.own_id <> $exclude_own_id " : " ") .
                " ORDER BY user.user_name");
        return $query->getResult();
    }

    function createUser($data, $code, $dir, $request, $factory, $ownership) {
        $em = $this->getEntityManager();
        $user = new user();
        $address = $data['ownership_address_street'] . ' #' . $data['ownership_address_number'];
        $phone = '(+53' . $code . ') ' . $data['ownership_phone_number'];
        $city = $em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']);
        $country = $em->getRepository('mycpBundle:country')->findBy(array('co_name' => 'Cuba'));
        $email = '';
        $subrole = $em->getRepository('mycpBundle:role')->findOneBy(array('role_name' => 'ROLE_CLIENT_CASA'));
        if (!empty($data['ownership_email_1']))
            $email = $data['ownership_email_1'];
        else
            $email = $data['ownership_email_2'];

        $user->setUserAddress($address);
        $user->setUserCity($city->getMunName());
        $user->setUserCountry($country[0]);
        $user->setUserEmail($email);
        $user->setUserPhone($phone);
        $user->setUserName($data['user_name']);
        $user->setUserLastName($data['ownership_homeowner_1']);
        $file = $request->files->get('user_photo');
        if ($file) {
            $photo = new photo();
            $fileName = uniqid('user-') . '-photo.jpg';
            $file->move($dir, $fileName);
            $photo->setPhoName($fileName);
            $user->setUserPhoto($photo);
            $em->persist($photo);
        }

        $user->setUserRole('ROLE_CLIENT_CASA');
        $user->setUserEnabled(false);
        $user->setUserCreatedByMigration(false);
        $user->setUserSubrole($subrole);
        $user->setUserUserName($data['ownership_homeowner_1']);
        $encoder = $factory->getEncoder($user);
        $password = $encoder->encodePassword($data['user_password'], $user->getSalt());
        $user->setUserPassword($password);
        $user_casa = new userCasa();
        $user_casa->setUserCasaOwnership($ownership);
        $user_casa->setUserCasaUser($user);
        $em->persist($user);
        $em->persist($user_casa);
    }

    function get_owners_photos($ownership_id) {
        $em = $this->getEntityManager();
        $query_string = "SELECT pho.pho_name as photo
                  FROM mycpBundle:userCasa uc
                  JOIN uc.user_casa_user u
                  JOIN u.user_photo pho
                  WHERE uc.user_casa_ownership = $ownership_id";

        $query = $em->createQuery($query_string);
        $photo_name = $query->setMaxResults(1)->getResult();

        if ($photo_name == null)
            $photo_name = "no_photo.gif";
        else if (!file_exists(realpath("uploads/userImages/" . $photo_name)))
            $photo_name = "no_photo.gif";
        return $photo_name;
    }

}
