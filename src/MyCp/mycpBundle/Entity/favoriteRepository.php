<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * permissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class favoriteRepository extends EntityRepository {

    public function insert($data) {
        $em = $this->getEntityManager();
        $ownership = null;
        $user = null;
        $destination = null;
        if ($data['favorite_ownership_id'] != null)
            $ownership = $em->getRepository('mycpBundle:ownership')->find($data['favorite_ownership_id']);

        if ($data['favorite_user_id'] != null)
            $user = $em->getRepository('mycpBundle:user')->find($data['favorite_user_id']);

        if ($data['favorite_destination_id'] != null)
            $destination = $em->getRepository('mycpBundle:destination')->find($data['favorite_destination_id']);

        $is_ownership = $data['favorite_ownership_id'] != null;
        $element_id = ($is_ownership) ? $data['favorite_ownership_id'] : $data['favorite_destination_id'];
        if (!$this->is_in_favorite($element_id, $is_ownership, $data['favorite_user_id'], $data['favorite_session_id'])) {
            $favorite = new favorite();
            $favorite->setFavoriteCreationDate(new \DateTime());
            $favorite->setFavoriteOwnership($ownership);
            $favorite->setFavoriteDestination($destination);
            $favorite->setFavoriteSessionId($data['favorite_session_id']);
            $favorite->setFavoriteUser($user);

            $em->persist($favorite);
            $em->flush();
        }
    }

    public function delete($data) {
        $em = $this->getEntityManager();
        $query_string = "DELETE mycpBundle:favorite f ";
        $where = "";

        if ($data['favorite_ownership_id'] != null)
            $where .= (($where == "") ? " WHERE " : " AND ") . " f.favorite_ownership =" . $data['favorite_ownership_id'];
        else if ($data['favorite_destination_id'] != null)
            $where .= (($where == "") ? " WHERE " : " AND ") . " f.favorite_destination =" . $data['favorite_destination_id'];

        if ($data['favorite_session_id'] != null)
            $where .= (($where == "") ? " WHERE " : " AND ") . " f.favorite_session_id ='" . $data['favorite_session_id'] . "'";
        else if ($data['favorite_user_id'] != null)
            $where .= (($where == "") ? " WHERE " : " AND ") . " f.favorite_user =" . $data['favorite_user_id'];

        $query = $em->createQuery($query_string . $where);
        $query->execute();
    }

    public function get_total($user_id = null, $session_id = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT f FROM mycpBundle:favorite f";

            if ($user_id != null)
                $query_string.= " WHERE f.favorite_user = $user_id";
            else if ($session_id != null)
                $query_string .= " WHERE f.favorite_session_id = '$session_id'";

            return count($em->createQuery($query_string)->getResult());
        } catch (Exception $e) {
            return 0;
        }
    }

    public function is_in_favorite($element_id, $is_ownership = true, $user_id = null, $session_id = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT f FROM mycpBundle:favorite f";
            $where = "";

            if ($user_id != null)
                $where.= " WHERE f.favorite_user = $user_id";
            else if ($session_id != null)
                $where .= " WHERE f.favorite_session_id = '$session_id'";

            $where .= ($where != "") ? (($is_ownership) ? " AND f.favorite_ownership = $element_id" : " AND f.favorite_destination = $element_id") : "";

            if ($where != "")
                return count($em->createQuery($query_string . $where)->getResult()) > 0;
            else
                return false;
        } catch (Exception $e) {
            return false;
        }
    }

    public function is_in_favorite_array($array_elements, $is_ownership = true, $user_id = null, $session_id = null) {
        if (is_array($array_elements)) {
            $results = array();
            foreach ($array_elements as $element) {
                if ($element != null) {
                    $id = ($is_ownership) ? $element->getOwnId() : $element->getDesId();
                    $results[$id] = $this->is_in_favorite($id, $is_ownership, $user_id, $session_id);
                }
            }
            return $results;
        }
        return null;
    }

    public function get_list($is_ownership = true, $user_id = null, $session_id = null, $max_results = null, $exclude_id_element = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT f FROM mycpBundle:favorite f";
            $where = "";

            if ($user_id != null)
                $where.= " WHERE f.favorite_user = $user_id";
            else if ($session_id != null)
                $where .= " WHERE f.favorite_session_id = '$session_id'";

            $where .= ($where != "") ? (($is_ownership) ? " AND f.favorite_ownership IS NOT NULL " : " AND f.favorite_destination IS NOT NULL ") : "";

            if($exclude_id_element != null)
            {
                $where .= ($where != "") ? (($is_ownership) ? " AND f.favorite_ownership != $exclude_id_element " : " AND f.favorite_destination != $exclude_id_element ") : "";
            }
            
            if ($where != "")
                return ($max_results != null) ? $em->createQuery($query_string . $where)->setMaxResults($max_results)->getResult() : $em->createQuery($query_string . $where)->getResult();
            else
                return false;
        } catch (Exception $e) {
            return null;
        }
    }

    public function get_element_id_list($is_ownership = true, $user_id = null, $session_id = null, $max_results = null, $exclude_id_element = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT f FROM mycpBundle:favorite f";
            $where = "";

            if ($user_id != null)
                $where.= " WHERE f.favorite_user = $user_id";
            else if ($session_id != null)
                $where .= " WHERE f.favorite_session_id = '$session_id'";

            $where .= ($where != "") ? (($is_ownership) ? " AND f.favorite_ownership IS NOT NULL " : " AND f.favorite_destination IS NOT NULL ") : "";

            if($exclude_id_element != null)
            {
                $where .= ($where != "") ? (($is_ownership) ? " AND f.favorite_ownership != $exclude_id_element " : " AND f.favorite_destination != $exclude_id_element ") : "";
            }
            
            if ($where != "") {
                $favorites = ($max_results != null) ? $em->createQuery($query_string . $where)->setMaxResults($max_results)->getResult() : $em->createQuery($query_string . $where)->getResult();
                $results = "0";
                foreach ($favorites as $favorite) {
                    $results .= "," . (($is_ownership) ? $favorite->getFavoriteOwnership()->getOwnId() : $favorite->getFavoriteDestination()->getDesId());
                }
                return $results;
            }
            else
                return "0";
            
        } catch (Exception $e) {
            return "0";
        }
    }
    
    public function set_to_user($user_id, $session_id) {
        $em = $this->getEntityManager();
        $query = $em->createQuery("UPDATE mycpBundle:favorite f
                                   SET f.favorite_user= $user_id,
                                       f.favorite_session_id = NULL
                                   WHERE f.favorite_session_id='$session_id'");
        $query->execute();
    }

}
