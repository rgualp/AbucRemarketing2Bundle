<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * serviceFeeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class serviceFeeRepository extends EntityRepository {

    public function getCurrent()
    {
        $em = $this->getEntityManager();

        return $em->createQueryBuilder()->from("mycpBundle:serviceFee", "s")
                  ->select("s")
                  ->where("s.current = 1")
                  ->orderBy("s.date", "DESC")
                  ->getQuery()->getOneOrNullResult();
    }

    public function calculateTouristServiceFee($totalRooms, $totalNights, $avgRoomPrices, $taxId = null, $isCompleteReservation = false, $accommodation = null)
    {
        $em = $this->getEntityManager();

        $currentServiceFee = ($taxId == null) ? $this->getCurrent(): $em->getRepository("mycpBundle:serviceFee")->find($taxId);
        $touristTax = 0;
        $totalNights = ceil($totalNights);

        if($isCompleteReservation)
        {
            $totalRooms = count($accommodation->getOwnRooms());
            $price = ($accommodation->getCompleteReservationMode()) ? $accommodation->getBookingModality()->getPrice(): 0;
            $avgRoomPrices = $price / $totalRooms;

        }

        if($totalNights == 1)
        {
            if($totalRooms == 1)
            {
                if($avgRoomPrices < 20)
                    $touristTax = $currentServiceFee->getOneNrUntil20Percent();
                else if($avgRoomPrices >= 20 && $avgRoomPrices < 25)
                    $touristTax = $currentServiceFee->getOneNrFrom20To25Percent();
                else
                    $touristTax = $currentServiceFee->getOneNrFromMore25Percent();
            }
            else if($totalRooms > 1)
                $touristTax = $currentServiceFee->getOneNightSeveralRoomsPercent();
        }
        else if($totalNights == 2)
            $touristTax = $currentServiceFee->getOne2NightsPercent();
        else if($totalNights == 3)
            $touristTax = $currentServiceFee->getOne3NightsPercent();
        else if($totalNights == 4)
            $touristTax = $currentServiceFee->getOne4NightsPercent();
        else if($totalNights >= 5)
            $touristTax = $currentServiceFee->getOne5NightsPercent();

        return $touristTax;
    }

    public function calculateTouristServiceFeeByGeneralReservation($genResId, $serviceTime)
    {
        $em = $this->getEntityManager();

        $touristTax = 0;
        $genRes = $em->getRepository("mycpBundle:generalReservation")->find($genResId);


            $reservations = $genRes->getOwn_reservations();
            $totalsRooms = count($reservations);
            $taxId = $genRes->getServiceFee()->getId();

            $roomPrices = 0;
            $totalNights = 0;
            $totalPrice = 0;

            foreach ($reservations as $reservation) {
                $nights = $serviceTime->nights($reservation->getOwnResReservationFromDate()->format("Y-m-d"), $reservation->getOwnResReservationToDate()->format("Y-m-d"));
                $price = $reservation->getOwnResTotalInSite();

                $totalNights += $nights;
                $totalPrice += $price;
                $roomPrices += $price / $nights;
            }

            $avgRoomPrices = $roomPrices / $totalsRooms;
            $totalNights = $totalNights / $totalsRooms;
            /*var_dump($genResId);
            var_dump($totalsRooms);
            var_dump($totalNights);*/

        if($genRes->getCompleteReservationMode())
            $touristTax = $this->calculateTouristServiceFee($totalsRooms, $totalNights, $avgRoomPrices, $taxId);
        else
            $touristTax = $this->calculateForCompleteAccommodationReservation($genRes->getGenResOwnId(), $totalNights, $taxId);

        return $touristTax * $totalPrice;
    }

    public function calculateForCompleteAccommodationReservation($accommodation, $totalNights, $taxId){

        $completeReservationPrice = $accommodation->getBookingModality()->getPrice();
        $totalRooms = count($accommodation->getOwnRooms());

        $avgRoomPrices = $completeReservationPrice / $totalRooms;

        return $this->calculateTouristServiceFee($totalRooms, $totalNights, $avgRoomPrices, $taxId);
    }
}
