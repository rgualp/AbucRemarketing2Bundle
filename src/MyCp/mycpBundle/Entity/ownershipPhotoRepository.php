<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MyCp\mycpBundle\Helpers\FileIO;
use MyCp\mycpBundle\Helpers\Images;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * ownershipPhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ownershipPhotoRepository extends EntityRepository {

    function getPhotosByIdOwnership($id_ownership) {
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT op,opp FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo opp
        WHERE op.own_pho_own=$id_ownership
        ORDER BY opp.pho_order ASC");
        return $query->getResult();
    }

    function getOwnerPhoto($id_ownership) {
        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT o, p FROM mycpBundle:ownership o JOIN o.own_owner_photo p
        WHERE o.own_id=$id_ownership
        AND o.own_owner_photo is not null");
        return $query->getResult();
    }

    public function deleteOwnPhoto($id_photo, $container) {
        $dir = $container->getParameter('ownership.dir.photos');
        $dir_thumbnails = $container->getParameter('ownership.dir.thumbnails');
        $em = $this->getEntityManager();
        $photo = $em->getRepository('mycpBundle:photo')->find($id_photo);
        $photoName = $photo->getPhoName();

        $photoLangs = $em->getRepository('mycpBundle:photoLang')->findBy(array('pho_lang_id_photo' => $id_photo));
        foreach ($photoLangs as $photoLang)
            $em->remove($photoLang);

        $ownPhotos = $em->getRepository('mycpBundle:ownershipPhoto')->findBy(array('own_pho_photo' => $id_photo));
        foreach ($ownPhotos as $ownPhoto)
            $em->remove($ownPhoto);

        $em->remove($photo);
        $em->flush();
        FileIO::deleteFile($dir . $photoName);
        FileIO::deleteFile($dir_thumbnails . $photoName);
    }

    public function checkOwnershipToInactivate($ownershipId) {
        $em = $this->getEntityManager();
        $ownership = $em->getRepository('mycpBundle:ownership')->find($ownershipId);
        $ownPhotos = $em->getRepository('mycpBundle:ownershipPhoto')->findBy(array('own_pho_own' => $ownershipId));

        if (count($ownPhotos) == 0) {
            $status = $em->getRepository("mycpBundle:ownershipStatus")->find(ownershipStatus::STATUS_INACTIVE);

            $ownership->setOwnStatus($status);
            $ownership->setOwnLastUpdate(new \DateTime());
            $em->persist($ownership);
            $em->flush();
        }
    }

    public function createPhotoFromRequest(ownership $ownership, UploadedFile $file, $container, $post)
    {
        $em = $this->getEntityManager();

        $dir = $container->getParameter('ownership.dir.photos');
        $dir_thumbs = $container->getParameter('ownership.dir.thumbnails');
        $dir_watermark = $container->getParameter('dir.watermark');
        $photo_size = $container->getParameter('ownership.dir.photos.size');
        $thumbs_size = $container->getParameter('thumbnail.size');
        $dirUserPhoto = $container->getParameter('user.dir.photos');
        $userPhotoSize = $container->getParameter('user.photo.size');

        $langs = $em->getRepository('mycpBundle:lang')->findAll();
        $nameOrder = str_replace(".".$file->getClientOriginalExtension(),"",$file->getClientOriginalName());

        $ownershipPhoto = new ownershipPhoto();
        $photo = new photo();

        if($nameOrder == 0)
        {
            $fileName = uniqid('user-') . '-photo.jpg';
            $file->move($dirUserPhoto, $fileName);
            Images::resize($dirUserPhoto . $fileName, $userPhotoSize);
            $photo->setPhoName($fileName);

            $ownership->setOwnOwnerPhoto($photo);
            $em->persist($ownership);
        }
        else {
            $fileName = uniqid('ownership-') . '-photo.jpg';
            $file->move($dir, $fileName);
            $photo->setPhoName($fileName);

            //Creando thumbnail, redimensionando y colocando marca de agua
            Images::createThumbnail($dir . $fileName, $dir_thumbs . $fileName, $thumbs_size);
            Images::resizeAndWatermark($dir, $fileName, $dir_watermark, $photo_size, $container);

            $ownershipPhoto->setOwnPhoOwn($ownership);
            $ownershipPhoto->setOwnPhoPhoto($photo);
            $em->persist($ownershipPhoto);
        }

        if (preg_match('/^[0-9]*$/', $nameOrder) && $nameOrder != 0){
            $photo->setPhoOrder($nameOrder);
        }

        $em->persist($photo);

        foreach ($langs as $lang) {
            $photoLang = new photoLang();
            $photoLang->setPhoLangDescription($post['description_' . $lang->getLangId()]);
            $photoLang->setPhoLangIdLang($lang);
            $photoLang->setPhoLangIdPhoto($photo);
            $em->persist($photoLang);
        }

        $em->flush();
    }

}
