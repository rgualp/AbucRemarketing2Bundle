<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\QueryBuilder;
use MyCp\mycpBundle\Entity\ownership;
use MyCp\mycpBundle\Entity\ownershipDescriptionLang;
use MyCp\mycpBundle\Entity\ownershipGeneralLang;
use MyCp\mycpBundle\Entity\ownershipKeywordLang;
use MyCp\mycpBundle\Entity\room;
use MyCp\mycpBundle\Entity\userCasa;
use MyCp\mycpBundle\Helpers\OrderByHelper;
use MyCp\mycpBundle\Helpers\OwnershipStatuses;
use MyCp\mycpBundle\Helpers\SyncStatuses;
use MyCp\mycpBundle\Entity\ownershipStatus;
use MyCp\mycpBundle\Helpers\Dates;
use MyCp\mycpBundle\Helpers\SearchUtils;
use MyCp\mycpBundle\Helpers\FilterHelper;
use MyCp\mycpBundle\Service\TranslatorResponseStatusCode;

/**
 * ownershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ownershipRepository extends EntityRepository {

    function findAllNames(){
        $em = $this->getEntityManager();

        $queryString = "SELECT o.own_name
            FROM mycpBundle:ownership o
            ORDER BY o.own_name";

        $query = $em->createQuery($queryString);

        return $query->getArrayResult();
    }

    function insert($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller, $translator, $container, $userService) {
        $active_top_20 = (isset($data['top_20'])) ? 1 : 0;
        $active_not_recommendable = (isset($data['not_recommendable'])) ? 1 : 0;
        $active_selection = (isset($data['selection'])) ? 1 : 0;
        $active_inmediate_booking = (isset($data['inmediate_booking'])) ? 1 : 0;
        $active_inmediate_booking_2 = (isset($data['inmediate_booking_2'])) ? 1 : 0;
        $water_jacuzee = (isset($data['water_jacuzee'])) ? 1 : 0;
        $water_sauna = (isset($data['water_sauna'])) ? 1 : 0;
        $water_pool = (isset($data['water_piscina'])) ? 1 : 0;
        $cubacoupon = (isset($data['cubacoupon'])) ? 1 : 0;
        $confidence = (isset($data['confidence'])) ? 1 : 0;
        $smsNotification = (isset($data['sms_notification'])) ? 1 : 0;

        //languages
        $ownership_english_lang = (isset($data['ownership_english_lang'])) ? 1 : 0;
        $ownership_french_lang = (isset($data['ownership_french_lang'])) ? 1 : 0;
        $ownership_german_lang = (isset($data['ownership_german_lang'])) ? 1 : 0;
        $ownership_italian_lang = (isset($data['ownership_italian_lang'])) ? 1 : 0;

        $langs_string = $ownership_english_lang . $ownership_french_lang . $ownership_german_lang . $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = new ownership();
        $ownership->setOwnLangs($langs_string)
            ->setOwnName(trim($data['ownership_name']))
            ->setOwnLicenceNumber(trim($data['ownership_licence_number']))
            //->setOwnMcpCode($data['ownership_mcp_code']);
            ->setOwnAddressStreet(trim($data['ownership_address_street']))
            ->setOwnAddressNumber(trim($data['ownership_address_number']))
            ->setOwnAddressBetweenStreet1(trim($data['ownership_address_between_street_1']))
            ->setOwnAddressBetweenStreet2(trim($data['ownership_address_between_street_2']));

        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov)
            ->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));

        if($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $ownership->setOwnMobileNumber(trim($data['ownership_mobile_number']))
            ->setOwnHomeowner1(trim($data['ownership_homeowner_1']))
            ->setOwnHomeowner2(trim($data['ownership_homeowner_2']))
            ->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode())
            ->setOwnPhoneNumber(trim($data['ownership_phone_number']))
            ->setOwnEmail1(trim($data['ownership_email_1']))
            ->setOwnEmail2(trim($data['ownership_email_2']))
            ->setOwnCategory($data['ownership_category'])
            ->setOwnType($data['ownership_type'])
            ->setOwnFacilitiesBreakfast($data['facilities_breakfast'])
            ->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price'])
            ->setOwnFacilitiesDinner($data['facilities_dinner'])
            ->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from'])
            ->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to'])
            ->setOwnFacilitiesParking($data['facilities_parking'])
            ->setOwnFacilitiesParkingPrice($data['facilities_parking_price'])
            ->setOwnFacilitiesNotes(trim($data['facilities_notes']))
            ->setOwnDescriptionBicycleParking($data['description_bicycle_parking'])
            ->setOwnDescriptionPets($data['description_pets'])
            ->setOwnDescriptionLaundry($data['description_laundry'])
            ->setOwnDescriptionInternet($data['description_internet'])
            ->setOwnGeolocateX($data['geolocate_x'])
            ->setOwnGeolocateY($data['geolocate_y'])
            ->setOwnTop20($active_top_20)
            ->setOwnSelection($active_selection)
            ->setOwnNotRecommendable($active_not_recommendable)
            ->setOwnCubaCoupon($cubacoupon)
            ->setConfidence($confidence)
            ->setOwnSmsNotifications($smsNotification);


        $nomenclator = null;
        if($active_inmediate_booking_2)
        {
            $ownership->setOwnInmediateBooking(false)
                ->setOwnInmediateBooking2($active_inmediate_booking_2);
            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'riModality'));
        }
        elseif($active_inmediate_booking) {
            $ownership->setOwnInmediateBooking($active_inmediate_booking)
                ->setOwnInmediateBooking2(false);

            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'rrModality'));
        }
        else
            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'normalModality'));

        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);

        if(!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);

        $ownership->setOwnStatus($status)
            ->setOwnRoomsTotal($data['count_rooms'])
            ->setOwnComment(trim($data['comment']))
            ->setOwnCommissionPercent($data['ownership_percent_commission'])
            ->setOwnSaler($data['ownership_saler'])
            ->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']))
            ->setOwnLastUpdate(new \DateTime())
            ->setOwnCreationDate(new \DateTime());
        //var_dump($data);
        //exit();

        $ownership->setOwnCommentsTotal(0)
            ->setOwnMaximumNumberGuests(0)
            ->setOwnRating(0)
            ->setOwnMaximumPrice(0)
            ->setOwnMinimumPrice(0)
            ->setOwnRoomsTotal(0)
            ->setOwnWaterJacuzee($water_jacuzee)
            ->setOwnWaterSauna($water_sauna)
            ->setOwnWaterPiscina($water_pool);

        /*Si el estado es activo directamente, publicar la casa*/
        if($status->getStatusId() == ownershipStatus::STATUS_ACTIVE)
            $ownership->setOwnPublishDate(new \DateTime());

        $em->persist($ownership);

        $keys = array_keys($data);

        $targetLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "DE"));
        $sourceLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "EN"));
        foreach ($keys as $item) {
            if(strpos($item, 'ownership_language') !== false) {

                $id = substr($item, 19, strlen($item));
                $ogl = new ownershipGeneralLang();
                $ogl->setOglIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $ogl->setOglOwnership($ownership);
                $em->persist($ogl);
            }

            if(strpos($item, 'description_desc') !== false) {
                $id = substr($item, 17, strlen($item));
                $currentLanguage = $em->getRepository('mycpBundle:lang')->find($id);
                $briefDescription = $data['description_brief_desc_' . $id];
                $description = $data['description_desc_' . $id];
                $translated = false;

                if($currentLanguage->getLangId() == $targetLanguage->getLangId()) {
                    $translatedArray = $this->doTranslations("en", "de", $translator, array("briefDescription" => $briefDescription, "description" => $description),
                        array("briefDescription" => $data["description_brief_desc_" . $sourceLanguage->getLangId()],
                            "description" => $data["description_desc_" . $sourceLanguage->getLangId()]),
                        false);

                    $briefDescription = $translatedArray["briefDescription"];
                    $description = $translatedArray["description"];
                    $translated = $translatedArray["translated"];
                }

                //Son las descripciones de lenguajes que no son el target (DE) o que no necesitan traducciÃ³n
                $odl = new ownershipDescriptionLang();
                $odl->setOdlIdLang($currentLanguage)
                    ->setOdlDescription($description)
                    ->setOdlBriefDescription($briefDescription)
                    ->setOdlOwnership($ownership)
                    ->setOdlAutomaticTranslation($translated);

                $em->persist($odl);
            }

            if(strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }

        $ownership->setOwnRoomsTotal($data['count_rooms']);

        $maximum_guest_total = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {
            $doOperations = ($data['room_type_' . $e] != "" && $data['room_beds_number_' . $e] != ""
                && $data['room_price_up_to_' . $e] != "" && $data['room_price_down_to_' . $e] != ""
                && $data['room_climate_' . $e] != "" && $data['room_audiovisual_' . $e] != "" && $data['room_bathroom_' . $e] != ""
                && $data['room_windows_' . $e] != "" && $data['room_balcony_' . $e] != ""
            );

            if($doOperations) {
                $room = new room();
                $room->setRoomType($data['room_type_' . $e]);
                $room->setRoomBeds($data['room_beds_number_' . $e]);
                //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
                $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
                //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
                $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);

                if(isset($data['room_price_special_' . $e]))
                    $room->setRoomPriceSpecial($data['room_price_special_' . $e]);

                $room->setRoomClimate($data['room_climate_' . $e]);
                $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
                $room->setRoomSmoker($data['room_smoker_' . $e]);
                $room->setRoomSafe($data['room_safe_box_' . $e]);
                $room->setRoomBaby($data['room_baby_' . $e]);
                $room->setRoomBathroom($data['room_bathroom_' . $e]);
                $room->setRoomStereo($data['room_stereo_' . $e]);
                $room->setRoomWindows($data['room_windows_' . $e]);
                $room->setRoomBalcony($data['room_balcony_' . $e]);
                $room->setRoomTerrace($data['room_terrace_' . $e]);
                $room->setRoomYard($data['room_yard_' . $e]);
                $room->setRoomOwnership($ownership);
                $room->setRoomNum($e);
                $room->setRoomActive(true);
                $em->persist($room);

                if($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice())
                    $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

                if($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                    $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

                if($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice())
                    $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

                $maximum_guest_total += $room->getMaximumNumberGuests();
            }
        }

        $ownership->setOwnMaximumNumberGuests($maximum_guest_total);
        $em->persist($ownership);

        //Crear frecuencia de modalidad
        if($nomenclator != null)
        {
            $freq = new accommodationModalityFrequency();
            $freq->setAccommodation($ownership);
            $freq->setStartDate(new \DateTime());
            $freq->setModality($nomenclator);
            $em->persist($freq);
        }

        //save client casa
        if($new_user && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUserByBackend($ownership, $file, $factory, $send_creation_mail, $controller, $container, $userService);
        }

        //save owner photo
        $this->saveOwnerPhoto($em, $ownership, $dir, $request);

        //Insertar un ownershipStatistics
        $statistic = new ownershipStatistics();
        $statistic->setAccommodation($ownership)
            ->setCreated(true)
            ->setStatus($status)
            ->setUser($controller->getUser())
            ->setNotes("Inserted in Backend");

        $em->persist($statistic);

        $em->flush();

        $this->calculateAccommodationCategory($ownership);

        return $ownership;
    }

    function edit($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller, $translator, $container, $userService = null) {
        $id_ownership = $data['edit_ownership'];

        $active_top_20 = (isset($data['top_20'])) ? 1 : 0;
        $active_not_recommendable = (isset($data['not_recommendable'])) ? 1 : 0;
        $active_selection = (isset($data['selection'])) ? 1 : 0;
        $active_inmediate_booking = (isset($data['inmediate_booking'])) ? 1 : 0;
        $active_inmediate_booking_2 = (isset($data['inmediate_booking_2'])) ? 1 : 0;
        $water_jacuzee = (isset($data['water_jacuzee'])) ? 1 : 0;
        $water_sauna = (isset($data['water_sauna'])) ? 1 : 0;
        $water_pool = (isset($data['water_piscina'])) ? 1 : 0;
        $cubacoupon = (isset($data['cubacoupon'])) ? 1 : 0;
        $confidence = (isset($data['confidence'])) ? 1 : 0;
        $smsNotification = (isset($data['sms_notification'])) ? 1 : 0;

        //languages
        $ownership_english_lang = (isset($data['ownership_english_lang'])) ? 1 : 0;
        $ownership_french_lang = (isset($data['ownership_french_lang'])) ? 1 : 0;
        $ownership_german_lang = (isset($data['ownership_german_lang'])) ? 1 : 0;
        $ownership_italian_lang = (isset($data['ownership_italian_lang'])) ? 1 : 0;

        $langs_string = $ownership_english_lang .
            $ownership_french_lang . $ownership_german_lang .
            $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = $em->getRepository('mycpBundle:ownership')->find($id_ownership);
        $old_status = $ownership->getOwnStatus();

        $ownership->setOwnLangs($langs_string)
            ->setOwnName(trim($data['ownership_name']))
            ->setOwnLicenceNumber(trim($data['ownership_licence_number']))
            //  ->setOwnMcpCode($data['ownership_mcp_code'])
            ->setOwnAddressStreet(trim($data['ownership_address_street']))
            ->setOwnAddressNumber(trim($data['ownership_address_number']))
            ->setOwnAddressBetweenStreet1(trim($data['ownership_address_between_street_1']))
            ->setOwnAddressBetweenStreet2(trim($data['ownership_address_between_street_2']));

        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov)
            ->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']))
            ->setOwnMobileNumber(trim($data['ownership_mobile_number']))
            ->setOwnHomeowner1(trim($data['ownership_homeowner_1']))
            ->setOwnHomeowner2(trim($data['ownership_homeowner_2']))
            ->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode())
            ->setOwnPhoneNumber(trim($data['ownership_phone_number']))
            ->setOwnEmail1(trim($data['ownership_email_1']))
            ->setOwnEmail2(trim($data['ownership_email_2']))
            ->setOwnCategory($data['ownership_category'])
            ->setOwnType($data['ownership_type'])
            ->setOwnFacilitiesBreakfast($data['facilities_breakfast'])
            ->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price'])
            ->setOwnFacilitiesDinner($data['facilities_dinner'])
            ->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from'])
            ->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to'])
            ->setOwnFacilitiesParking($data['facilities_parking'])
            ->setOwnFacilitiesParkingPrice($data['facilities_parking_price'])
            ->setOwnFacilitiesNotes(trim($data['facilities_notes']))
            ->setOwnDescriptionBicycleParking($data['description_bicycle_parking'])
            ->setOwnDescriptionPets($data['description_pets'])
            ->setOwnDescriptionLaundry($data['description_laundry'])
            ->setOwnDescriptionInternet($data['description_internet'])
            ->setOwnGeolocateX($data['geolocate_x'])
            ->setOwnGeolocateY($data['geolocate_y'])
            ->setOwnTop20($active_top_20)
            ->setOwnSelection($active_selection)
            ->setOwnNotRecommendable($active_not_recommendable)
            ->setOwnCubaCoupon($cubacoupon)
            ->setConfidence($confidence)
            ->setOwnSmsNotifications($smsNotification);

        $nomenclator = null;
        if($active_inmediate_booking_2)
        {
            $ownership->setOwnInmediateBooking(false)
                ->setOwnInmediateBooking2($active_inmediate_booking_2);

            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'riModality'));


        }
        elseif($active_inmediate_booking){
            $ownership->setOwnInmediateBooking($active_inmediate_booking)
                ->setOwnInmediateBooking2(false);

            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'rrModality'));
        }
        else
        {
            $ownership->setOwnInmediateBooking(false)
                ->setOwnInmediateBooking2(false);
            $nomenclator = $em->getRepository("mycpBundle:nomenclator")->findOneBy(array("nom_name" => 'normalModality'));
        }

        if($nomenclator != null)
        {
            $oldFreq = $em->getRepository("mycpBundle:accommodationModalityFrequency")->findOneBy(array("accommodation" => $ownership->getOwnId()),
                array("startDate" => "DESC"));



            if($oldFreq != null && $oldFreq->getModality()->getNomId() != $nomenclator->getNomId())
            {
                $oldFreq->setEndDate(new \DateTime());
                $em->persist($oldFreq);
            }

            if($oldFreq == null || $oldFreq->getModality()->getNomId() != $nomenclator->getNomId()) {
                $freq = new accommodationModalityFrequency();
                $freq->setAccommodation($ownership);
                $freq->setStartDate(new \DateTime());
                $freq->setModality($nomenclator);
                $em->persist($freq);
            }
        }


        if($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);
        if(!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);
        $ownership->setOwnStatus($status)
            ->setOwnComment(trim($data['comment']));

        $old_rooms = $em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $data['edit_ownership']));
        $ownership->setOwnCommissionPercent($data['ownership_percent_commission'])
            ->setOwnLastUpdate(new \DateTime())
            ->setOwnSaler($data['ownership_saler']);

        if(isset($data['ownership_visit_date']))
            $ownership->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']));

        $ownership->setOwnWaterJacuzee($water_jacuzee)
            ->setOwnWaterSauna($water_sauna)
            ->setOwnWaterPiscina($water_pool)
            ->setOwnMaximumNumberGuests(0)
            ->setOwnMaximumPrice(0)
            ->setOwnMinimumPrice(0)
            ->setOwnRoomsTotal(0);
        $em->persist($ownership);

        $query = $em->createQuery("DELETE
            mycpBundle:ownershipGeneralLang ogl WHERE
            ogl.ogl_ownership=$id_ownership");
        $query->execute();

        $keys = array_keys($data);
        $targetLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "DE"));
        $sourceLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "EN"));

        foreach ($keys as $item) {
            if(strpos($item, 'description_desc') !== false) {
                $id = substr($item, 17, strlen($item));
                $currentLanguage = $em->getRepository('mycpBundle:lang')->find($id);
                $briefDescription = $data['description_brief_desc_' . $id];
                $description = $data['description_desc_' . $id];
                $translated = false;
                $odl = $em->getRepository('mycpBundle:ownershipDescriptionLang')->getDescriptionsByAccommodation($ownership, $currentLanguage->getLangCode());

                if($odl == null)
                    $odl = new ownershipDescriptionLang();

                if($currentLanguage->getLangId() == $targetLanguage->getLangId()) {
                    $storedSourceDescription = $em->getRepository('mycpBundle:ownershipDescriptionLang')->getDescriptionsByAccommodation($ownership, "EN");

                    if($storedSourceDescription == null)
                        $storedSourceDescription = new ownershipDescriptionLang();


                    $translatedArray = $this->doTranslationsInEditMode("en", "de", $translator, array("briefDescription" => $briefDescription, "description" => $description),
                        array("briefDescription" => $data["description_brief_desc_" . $sourceLanguage->getLangId()],
                            "description" => $data["description_desc_" . $sourceLanguage->getLangId()]), $storedSourceDescription, $odl);

                    $briefDescription = $translatedArray["briefDescription"];
                    $description = $translatedArray["description"];
                    $translated = ($translatedArray["translated"]) ? true : $translated;
                }

                if($odl == null)
                    $odl = new ownershipDescriptionLang();
                else if(!$translated) //Para evitar que se elimine la bandera cuando no hay traducciones
                {
                    $translated = ($description == $odl->getOdlDescription()) ? $odl->getOdlAutomaticTranslation() : false;
                }

                $odl->setOdlIdLang($currentLanguage)
                    ->setOdlDescription($description)
                    ->setOdlBriefDescription($briefDescription)
                    ->setOdlOwnership($ownership)
                    ->setOdlAutomaticTranslation($translated);

                $em->persist($odl);
            }

            if(strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                if(array_key_exists('kw_id_' . $id, $data))
                    $okl = $em->getRepository('mycpBundle:ownershipKeywordLang')->find($data['kw_id_' . $id]);
                else
                    $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }
        $maximum_guest_total = 0;
        $roomsActiveTotal = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {

            $doOperations = ($data['room_type_' . $e] != "" && $data['room_beds_number_' . $e] != ""
                && $data['room_price_up_to_' . $e] != "" && $data['room_price_down_to_' . $e] != ""
                && $data['room_climate_' . $e] != "" && $data['room_audiovisual_' . $e] != "" && $data['room_bathroom_' . $e] != ""
                && $data['room_windows_' . $e] != "" && $data['room_balcony_' . $e] != ""
            );

            //if ($doOperations) {
            if(array_key_exists('room_id_' . $e, $data))
                $room = $em->getRepository('mycpBundle:room')->find($data['room_id_' . $e]);
            else {
                $room = new room();
                $room->setRoomActive(true);
            }

            if(isset($old_rooms[$e - 1])) {
                $metadata = $em->getClassMetadata(get_class($room));
                $metadata->setIdGeneratorType(ClassMetadata::GENERATOR_TYPE_NONE);
                //$room->setRoomId($old_rooms[$e - 1]->getRoomId());
            }

            if($room->getRoomActive())
                $roomsActiveTotal++;

            $room->setRoomType($data['room_type_' . $e]);
            $room->setRoomBeds($data['room_beds_number_' . $e]);
            //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
            $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
            //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
            $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);

            if(isset($data['room_price_special_' . $e]))
                $room->setRoomPriceSpecial($data['room_price_special_' . $e]);

            $room->setRoomClimate($data['room_climate_' . $e]);
            $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
            $room->setRoomSmoker($data['room_smoker_' . $e]);
            $room->setRoomSafe($data['room_safe_box_' . $e]);
            $room->setRoomBaby($data['room_baby_' . $e]);
            $room->setRoomBathroom($data['room_bathroom_' . $e]);
            $room->setRoomStereo($data['room_stereo_' . $e]);
            $room->setRoomWindows($data['room_windows_' . $e]);
            $room->setRoomBalcony($data['room_balcony_' . $e]);
            $room->setRoomTerrace($data['room_terrace_' . $e]);
            $room->setRoomYard($data['room_yard_' . $e]);
            $room->setRoomOwnership($ownership);
            $room->setRoomNum($e);
            $em->persist($room);

            if($room->getRoomActive()) {
                if(($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice()))
                    $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

                if(($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice()))
                    $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

                if(($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice()))
                    $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

                $maximum_guest_total += $room->getMaximumNumberGuests();
            }

            $ownership->setOwnMaximumNumberGuests($maximum_guest_total);
            // }
        }

        $ownership->setOwnRoomsTotal($roomsActiveTotal);

        $em->persist($ownership);

        //save client casa
        if($new_user && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUserByBackend($ownership, $file, $factory, $send_creation_mail, $controller, $container, $userService);
        }

        //If the status of the accommodation change from active to inactive, then the userCasa account associated must be set to disabled
        if($old_status->getStatusId() == ownershipStatus::STATUS_ACTIVE && $status->getStatusId() == ownershipStatus::STATUS_INACTIVE)
            $em->getRepository('mycpBundle:userCasa')->changeStatus($ownership->getOwnId(), false);

        if($old_status->getStatusId() != ownershipStatus::STATUS_ACTIVE && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE)
            $em->getRepository('mycpBundle:userCasa')->changeStatus($ownership->getOwnId(), true);

        //save owner photo
        $this->saveOwnerPhoto($em, $ownership, $dir, $request);

        //Insertar un ownershipStatistics
        $statistic = new ownershipStatistics();
        $statistic->setAccommodation($ownership)
            ->setCreated(false)
            ->setStatus($status)
            ->setUser($controller->getUser())
            ->setNotes("Modify in Backend");

        $em->persist($statistic);

        $em->flush();

        $this->calculateAccommodationCategory($ownership);
        return $ownership;
    }

    private function doTranslations($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray) {
        $briefDescription = $targetLanguageDescriptionsArray["briefDescription"];
        $description = $targetLanguageDescriptionsArray["description"];
        $sourceBriefDescription = $sourceLanguageDescriptionArray["briefDescription"];
        $sourceDescription = $sourceLanguageDescriptionArray["description"];
        $translated = false;

        //Solo traducir descripcion breve si la descripcion breve en aleman estÃ¡ vacÃ­a, si la descripcion breve en ingles tiene texto y si la descripcion en ingles esta vacÃ­a
        if($briefDescription == "" && $description == "" && $sourceBriefDescription != "" && $sourceDescription != "") {
            $response = $translator->multipleTranslations(array($sourceDescription, $sourceBriefDescription), $sourceLanguageCode, $targetLanguageCode);

            if($response[0]->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                $description = $response[0]->getTranslation();
                $translated = true;
            }

            if($response[1]->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                $briefDescription = $response[1]->getTranslation();
                //$translated = true;
            }
        }
        else if($briefDescription == "" && $sourceBriefDescription != "") {
            $response = $translator->translate($sourceBriefDescription, $sourceLanguageCode, $targetLanguageCode);

            if($response->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                $briefDescription = $response->getTranslation();
                //$translated = true;
            }

        }
        else if($description == "" && $sourceDescription != "") {
            $response = $translator->translate($sourceDescription, $sourceLanguageCode, $targetLanguageCode);

            if($response->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                $description = $response->getTranslation();
                $translated = true;
            }
        }

        return array("briefDescription" => $briefDescription, "description" => $description, "translated" => $translated);
    }

    private function doTranslationsInEditMode($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray, $storedSourceDescription, $storedTargetDescription) {
        $responseTranslated = $this->doTranslations($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray);

        $briefDescription = $responseTranslated["briefDescription"];
        $description = $responseTranslated["description"];
        $translated = $responseTranslated["translated"];

        if(!$translated) {
            $sourceBriefDescription = $sourceLanguageDescriptionArray["briefDescription"];
            $sourceDescription = $sourceLanguageDescriptionArray["description"];

            if($storedTargetDescription->getOdlBriefDescription() == $briefDescription && $sourceBriefDescription != $storedTargetDescription->getOdlBriefDescription() &&
                $storedTargetDescription->getOdlDescription() == $description && $sourceDescription != $storedTargetDescription->getOdlDescription()
            ) {
                $response = $translator->multipleTranslations(array($sourceDescription, $sourceBriefDescription), $sourceLanguageCode, $targetLanguageCode);

                if(isset($response[0]) && $response[0]->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                    $description = $response[0]->getTranslation();
                    $translated = true;
                }

                if(isset($response[1]) && $response[1]->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                    $briefDescription = $response[1]->getTranslation();
                    //$translated = true;
                }
            }
            else if($storedTargetDescription->getOdlBriefDescription() == $briefDescription && $sourceBriefDescription != $storedTargetDescription->getOdlBriefDescription()) {
                $response = $translator->translate($sourceBriefDescription, $sourceLanguageCode, $targetLanguageCode);

                if($response->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                    $briefDescription = $response->getTranslation();
                    //$translated = true;
                }
            }
            else if($storedTargetDescription->getOdlDescription() == $description && $sourceDescription != $storedTargetDescription->getOdlDescription()) {
                $response = $translator->translate($sourceDescription, $sourceLanguageCode, $targetLanguageCode);

                if($response->getCode() == TranslatorResponseStatusCode::STATUS_200) {
                    $description = $response->getTranslation();
                    $translated = true;
                }
            }
        }

        return array("briefDescription" => $briefDescription, "description" => $description, "translated" => $translated);
    }

    public function saveOwnerPhoto($em, $ownership, $dir, $request) {
        //subir photos
        $file = $request->files->get('own_ownership_photo');
        // var_dump($request->files);
        if(isset($file)) {
            $photo = ($ownership->getOwnOwnerPhoto() == null) ? new photo() : $ownership->getOwnOwnerPhoto();
            $fileName = ($ownership->getOwnOwnerPhoto() == null) ? uniqid('owner-') . '-photo.jpg' : $ownership->getOwnOwnerPhoto()->getPhoName();
            $file->move($dir, $fileName);
            //Redimensionando la foto del propietario
            \MyCp\mycpBundle\Helpers\Images::resize($dir . $fileName, 150);

            $photo->setPhoName($fileName);
            $ownership->setOwnOwnerPhoto($photo);
            $ownership->setOwnLastUpdate(new \DateTime());
            $em->persist($photo);

            $em->persist($ownership);

            return $fileName;
        }
        return null;
    }

    function shortEditOwnership($data) {
        $id_ownership = $data['edit_ownership'];
        $em = $this->getEntityManager();
        $ownership =
            $em->getRepository('mycpBundle:ownership')->find($id_ownership);

        $prov = $em->getRepository('mycpBundle:province')->find($ownership->getOwnAddressProvince());
        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode());
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    function getAll($filter_code = '', $filter_active = '', $filter_category = '', $filter_province = '', $filter_municipality = '', $filter_destination = '', $filter_type = '', $filter_name = '', $filter_saler = '', $filter_visit_date = '', $filter_other = "", $filter_commission = "", $hot = false) {

        $condition = '';

        switch ($filter_other) {
            case FilterHelper::ACCOMMODATION_TOP20:
                $condition .= "AND ow.own_top_20 = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_SELECTION:
                $condition .= "AND ow.own_selection = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_NOT_RECOMMENDABLE:
                $condition .= "AND ow.own_not_recommendable = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_INMEDIATE_BOOKING:
                $condition .= "AND ow.own_inmediate_booking = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_INMEDIATE_BOOKING_2:
                $condition .= "AND ow.own_inmediate_booking_2 = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_CUBACOUPON:
                $condition .= "AND ow.own_cubacoupon = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_WITH_ERRORS_PHONE:
                $condition .= "AND (ow.own_phone_number LIKE '%-%' OR ow.own_phone_number LIKE '%(%' OR ow.own_phone_number LIKE '%)%' OR ow.own_phone_number LIKE '%+53%') ";
                break;
            case FilterHelper::ACCOMMODATION_WITH_ERRORS_ADDRESS:
                $condition .= "AND (ow.own_address_street LIKE '%avenida%' OR ow.own_address_street LIKE '%ave%' OR ow.own_address_street LIKE '%calle%' OR ow.own_address_street LIKE '%calzada%' OR ow.own_address_street LIKE '%carretera%' OR (ow.own_address_between_street_1 is not null AND ow.own_address_between_street_1 <> '' AND ow.own_address_between_street_2 IS NOT NULL AND ow.own_address_between_street_2 <> '' AND ow.own_address_between_street_1 = ow.own_address_between_street_2)) ";
                break;
            case FilterHelper::ACCOMMODATION_ERROR_GEOLOCALIZATION:
                $condition .= "AND ow.own_comment IS NOT NULL AND ow.own_comment != '' AND ow.own_comment LIKE '%Localizada automaticamente%' ";
                break;
            case FilterHelper::ACCOMMODATION_WITH_ERRORS_MOBILE:
                $condition .= "AND ow.own_mobile_number IS NOT NULL AND ow.own_mobile_number != '' AND ow.own_mobile_number NOT LIKE '5_______' ";
                break;
            case FilterHelper::ACCOMMODATION_CONFIDENCE:
                $condition .= "AND ow.confidence = 1 ";
                break;
        }

        if($filter_active != 'null' && $filter_active != '') {
            $condition .= "AND (ow.own_status = :filter_active ";

            if($filter_active == ownershipStatus::STATUS_INSERTED_BY_OWNER) {
                $condition .= " OR ow.insertedInCasaModule = 1 ";
            }

            $condition .= ") ";
        }
        if($filter_category != 'null' && $filter_category != '') {
            $condition .= " AND ow.own_category = :filter_category ";
        }
        if($filter_province != 'null' && $filter_province != '') {
            $condition .= " AND ow.own_address_province = :filter_province ";
        }
        if($filter_municipality != 'null' && $filter_municipality != '') {
            $condition .= " AND ow.own_address_municipality = :filter_municipality ";
        }
        if($filter_type != 'null' && $filter_type != '') {
            $condition .= " AND ow.own_type = :filter_type ";
        }

        if($filter_name != 'null' && $filter_name != '') {
            $condition .= " AND ow.own_name LIKE :filter_name ";
        }
        if($filter_saler != 'null' && $filter_saler != '') {
            $condition .= " AND ow.own_saler LIKE :filter_saler ";
        }
        if($filter_visit_date != 'null' && $filter_visit_date != '') {
            $condition .= " AND ow.own_visit_date >= :filter_visit_date AND ow.own_visit_date < :filter_visit_date_plus_day";
        }
        if($filter_destination != 'null' && $filter_destination != '') {

            if($filter_destination == "-1")
                $condition .= " AND ow.own_destination IS NULL ";
            else
                $condition .= " AND ow.own_destination = :filter_destination ";
        }
        if($filter_commission != 'null' && $filter_commission != '') {
            $condition .= " AND ow.own_commission_percent = :filter_commission ";
        }

        $order_by = 'ow.own_mcp_code ASC';
        if($hot){
            $order_by = 'ow.own_hot_date';
        }

        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT
        ow.own_not_recommendable,
        ow.own_mcp_code,
        ow.own_top_20,
        ow.own_selection,
        ow.own_inmediate_booking,
        ow.own_inmediate_booking_2,
        ow.own_name,
        ow.own_creation_date,
        ow.own_hot_date,
        mun.mun_name,
        prov.prov_name,
        ow.own_comment,
        ow.own_id,
        ow.own_cubacoupon,
        data.activeRooms as own_rooms_total,
        d.des_name,
        s.status_id,
        s.status_name,
        data.photosCount as photos_count
        FROM mycpBundle:ownership ow
        JOIN ow.own_address_municipality mun
        JOIN ow.own_address_province prov
        JOIN ow.data data
        LEFT JOIN ow.own_destination d
        LEFT JOIN ow.own_status s
        WHERE ow.own_mcp_code LIKE :filter_code $condition ORDER BY ".$order_by);

        if($filter_active != 'null' && $filter_active != '')
            $query->setParameter('filter_active', $filter_active);

        if($filter_category != 'null' && $filter_category != '')
            $query->setParameter('filter_category', $filter_category);

        if($filter_province != 'null' && $filter_province != '')
            $query->setParameter('filter_province', $filter_province);

        if($filter_municipality != 'null' && $filter_municipality != '')
            $query->setParameter('filter_municipality', $filter_municipality);

        if($filter_type != 'null' && $filter_type != '')
            $query->setParameter('filter_type', $filter_type);

        if($filter_name != 'null' && $filter_name != '')
            $query->setParameter('filter_name', "%" . $filter_name . "%");

        if($filter_saler != 'null' && $filter_saler != '')
            $query->setParameter('filter_saler', "%" . $filter_saler . "%");

        if($filter_visit_date != 'null' && $filter_visit_date != '') {
            $filter_date = \DateTime::createFromFormat('d-m-Y', $filter_visit_date);
            $query->setParameter('filter_visit_date', $filter_date->format("Y-m-d"));

            $filter_date->add(new \DateInterval("P1D"));
            $query->setParameter('filter_visit_date_plus_day', $filter_date->format("Y-m-d"));
        }

        if($filter_destination != 'null' && $filter_destination != '' && $filter_destination != '-1')
            $query->setParameter('filter_destination', $filter_destination);

        if(isset($filter_code))
            $query->setParameter('filter_code', "%" . $filter_code . "%");

        if($filter_commission != 'null' && $filter_commission != '')
            $query->setParameter('filter_commission', $filter_commission);

        return $query;
    }


    /**
     * Realiza busquedas segun los criterios seleccionados
     * @param integer $province_id
     * @param datetime $arrivalDate
     * @param datetime $leavingDate
     * @param integer $guest_total
     * @param string $order_by
     * @return array of MyCp\mycpBundle\Entity\ownership
     */
    function search($controller, $text = null, $arrivalDate = null, $leavingDate = null, $guest_total = 1, $rooms_total = 1, $order_by = 'BEST_VALUED', $room_filter = false, $filters = null, $inmediate=0, $start = null, $limit = null) {
        $em = $this->getEntityManager();
        $user_ids = $em->getRepository('mycpBundle:user')->getIds($controller);
        $user_id = $user_ids['user_id'];
        $session_id = $user_ids['session_id'];

        $reservations_where = SearchUtils::createDatesWhere($em, $arrivalDate, $leavingDate);

        $q = SearchUtils::getBasicQuery($room_filter, $user_id, $session_id, false);
        $query_string = $q['query'];
        $query_count_string = $q['query_count'];
        $parameters = array();

        $parameters[] = array('session_id', $session_id);

        $where = (!$room_filter) ? (" WHERE ( o.own_status = 1 ") : (" WHERE ( o.own_status = 1 AND r.room_active = 1 ");
        $textWhere = SearchUtils::getTextWhere($text);
        $where .= ($textWhere != "") ? " AND " . $textWhere : "";

        if($guest_total != null && $guest_total != 'null' && $guest_total != "")
            $where .= " AND " . "o.own_maximun_number_guests >= :guests_total";

        if(isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != "")
            $where .= " AND " . "o.own_rooms_total >= :rooms_total";

        if($reservations_where != "")
            $where .= " AND o.own_id NOT IN (" . $reservations_where . ")";

        $filterWhere = SearchUtils::getFilterWhere($filters);



        $where .= ($filterWhere != "") ? $filterWhere : "";
        $where .= ")";

        $or = "";

        if (is_array($filters)){
            if( $inmediate != null || ( array_key_exists('own_inmediate_booking', $filters) && $filters['own_inmediate_booking']) ){
                $or = " AND (";

                if($inmediate != null)
                    $or .= "o.own_inmediate_booking_2 = :inmediate";

                if (array_key_exists('own_inmediate_booking', $filters) && $filters['own_inmediate_booking']){
                    $ors = ($inmediate != null) ? " OR " : "";
                    $or .= $ors."o.own_inmediate_booking = 1";
                }


                $or .= ")";
            }
        }else{
            if($inmediate != null){
                $or = " AND (";
                $or .= "o.own_inmediate_booking_2 = :inmediate";
                $or .= ")";
            }
        }



        if($where != '' ){
            $query_string .= $where." ".$or;
            $query_count_string .= $where." ".$or;
        }
        if (count($filters)){
            if (array_key_exists('own_award', $filters) && $filters['own_award'] != null && is_array($filters['own_award']) && count($filters['own_award']) > 0)
            {
                $insideWhere = SearchUtils::getStringFromArray($filters['own_award']);

                if($insideWhere != "")
                    $query_string .= " HAVING award1 IN (" . $insideWhere . ")";
            }
        }
        if(is_array($filters)){
            if( ( array_key_exists('own_update_avaliable', $filters) && $filters['own_update_avaliable']) ){
                $order = SearchUtils::getOrder(OrderByHelper::SEARCHER_AVALIABLE_UPDATE);
            }else{
                $order = SearchUtils::getOrder($order_by);
            }
        }
        else
            $order = SearchUtils::getOrder($order_by);


        $query_string .= $order;
        $query = $em->createQuery($query_string);
        $query_count = $em->createQuery($query_count_string);
        //dump($query_string);die;
        if($user_id != null){
            $query->setParameter('user_id', $user_id);
        }

        if($session_id != null){
            $query->setParameter('session_id', $session_id);
        }

        if($inmediate != null)
            $query->setParameter('inmediate', $inmediate);

        if($text != null && $text != '' && $text != 'null'){
            $query->setParameter('text', "%" . $text . "%");
            $query_count->setParameter('text', "%" . $text . "%");
        }

        if($guest_total != null && $guest_total != 'null' && $guest_total != ""){
            $query->setParameter('guests_total', ($guest_total != "+10" ? $guest_total : 11));
            $query_count->setParameter('guests_total', ($guest_total != "+10" ? $guest_total : 11));
        }

        if(isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != ""){
            $query->setParameter('rooms_total', ($rooms_total != "+5" ? $rooms_total : 6));
            $query_count->setParameter('rooms_total', ($rooms_total != "+5" ? $rooms_total : 6));
        }

        //$return_list = array();
        if($start !== null && $limit !== null) {
            $query->setFirstResult($start);
            $query->setMaxResults($limit);
        }

        $results = $query->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";

            if(file_exists(realpath("uploads/ownershipImages/originals/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "originals/" . $results[$i]['photo'];
            else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "no_photo.png";
        }

        if($start !== null && $limit !== null){
            $count = $query_count->getSingleScalarResult();
            return array('results'=>$results, 'count'=>$count);
        }
        return $results;
    }

    /**
     * Realiza busquedas segun los criterios seleccionados
     * @param integer $province_id
     * @param datetime $arrivalDate
     * @param datetime $leavingDate
     * @param integer $guest_total
     * @param string $order_by
     * @return array of MyCp\mycpBundle\Entity\ownership
     */
    function searchOwnership($controller, $filters = array(), $start = 0, $limit = 4) {
        if($filters['priceFilter'] != '') {
            $prices = explode(',', $filters['priceFilter']);
            $filters['own_price_from'] = array($prices[0]);
            $filters['own_price_to'] = array($prices[1]);
        }
        if(array_key_exists('own_award', $filters)) {
            if($filters['own_award'] != '')
                $filters['own_award'] = array(1);
        }

        $order_by = 'BEST_VALUED';
        $em = $this->getEntityManager();
        $user_ids = $em->getRepository('mycpBundle:user')->getIds($controller);
        $user_id = $user_ids['user_id'];
        $session_id = $user_ids['session_id'];
        $dateArrival = array();
        $dateExit = array();
        if($filters['arrival'] != '')
            $dateArrival = explode('/', $filters['arrival']);
        if($filters['exit'] != '')
            $dateExit = explode('/', $filters['exit']);

        $reservations_where = SearchUtils::createDatesWhere($em, (count($dateArrival)) ? $dateArrival[0] . '-' . $dateArrival[1] . '-' . $dateArrival[2] : null, (count($dateExit)) ? $dateExit[0] . '-' . $dateExit[1] . '-' . $dateExit[2] : null);

        $room_filter = false;
        if(array_key_exists('room_climatization', $filters)) {
            $filters['room_climatization'] = 'Aire acondicionado';
            $room_filter = true;
        }
        if(array_key_exists('room_audiovisuals', $filters) || array_key_exists('room_kids', $filters) || array_key_exists('room_smoker', $filters) || array_key_exists('room_balcony', $filters) || array_key_exists('room_terraza', $filters) || array_key_exists('room_safe', $filters)) {
            $room_filter = true;
        }
        if(array_key_exists('pool', $filters)) {
            $filters['own_others_included'] = 'POOL';
        }
        if(array_key_exists('jacuzzy', $filters)) {
            $filters['own_others_included'] = 'POOL';
        }
        if(array_key_exists('dinner', $filters)) {
            $filters['others_not_included'] = 'DINNER';
        }
        if(array_key_exists('parking', $filters)) {
            $filters['others_not_included'] = 'PARKING';
        }

        if(array_key_exists('laundry', $filters)) {
            $filters['others_not_included'] = 'LAUNDRY';
        }
        if(array_key_exists('breakfast', $filters)) {
            $filters['others_not_included'] = 'BREAKFAST';
        }
        if(array_key_exists('room_type', $filters)) {
            if($filters['room_type'] != '') {
                $filters['room_type'] = array($filters['room_type']);
                $room_filter = true;
            }
        }
        $query_string = SearchUtils::getBasicQuery($room_filter, $user_id, $session_id)['query'];
        $parameters = array();

        $parameters[] = array('session_id', $session_id);
        $where = '';
        $destinationWhere = SearchUtils::getDestinationWhere($filters['destination']);
        $where .= ($destinationWhere != "") ? " AND " . $destinationWhere : "";

        if($filters['huesp'] != "")
            $where .= " AND " . "o.own_maximun_number_guests >= :guests_total";

        if($filters['room'] != "")
            $where .= " AND " . "o.own_rooms_total >= :rooms_total";


        if($reservations_where != "")
            $where .= " AND o.own_id NOT IN (" . $reservations_where . ")";

        $filterWhere = SearchUtils::getFilterWherePartner($filters);

        $where .= ($filterWhere != "") ? $filterWhere : "";

        if($where != '')
            $query_string .= $where;
        $order = SearchUtils::getOrder($order_by);

        $query_string .= $order;

        //die(dump($query_string));
        $query = $em->createQuery($query_string)->setFirstResult($start)->setMaxResults($limit);
        //die(dump($query));
        if($user_id != null)
            $query->setParameter('user_id', $user_id);

        if($session_id != null)
            $query->setParameter('session_id', $session_id);

        if($filters['destination'] != '')
            $query->setParameter('destination', $filters['destination']);

        if($filters['huesp'] != "")
            $query->setParameter('guests_total', $filters['huesp']);

        if($filters['room'] != "")
            $query->setParameter('rooms_total', $filters['room']);
        $results = $query->getResult();


        for ($i = 0; $i < count($results); $i++) {
            if($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";

            if(file_exists(realpath("uploads/ownershipImages/originals/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "originals/" . $results[$i]['photo'];
            else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "no_photo.png";
        }
        return $results;
    }

    /**
     * Muestra todas las casas que son top20, para mostrar en la portada
     * @param $locale
     * @param $category
     * @param $user_id
     * @param session_id
     * @return mixed
     */
    function top20($locale = "ES", $category = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                         prov.prov_name as prov_name,
                         o.own_comments_total as comments_total,
                         o.own_inmediate_booking as OwnInmediateBooking,
                         o.own_inmediate_booking_2 as OwnInmediateBooking2,
                         pho.pho_name as photo,
                         (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as description,
                         data.reservedRooms as count_reservations,
                         (SELECT min(a.second_icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award,
                         o.own_minimum_price as minPrice,
                         (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.data data
                         LEFT JOIN data.principalPhoto op
                         LEFT JOIN op.own_pho_photo pho
                         WHERE o.own_top_20=1
                         AND o.own_status = " . ownershipStatus::STATUS_ACTIVE;

        if($category != null) {
            $query_string .= " AND LOWER(o.own_category) = '$category'";

        }

        $query_string .= " ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";

        return $em->createQuery($query_string);

        /*for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;*/
    }

    function getNotSendedToReservationTeam() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         o.own_name as name,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         prov.prov_phone_code as provCode,
                         o.own_phone_number as phone,
                         o.own_mobile_number as mobile,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         s.status_name as status,
                         min(r.room_price_down_to) as lowDown,
                         max(r.room_price_down_to) as highDown,
                         min(r.room_price_up_to) as lowUp,
                         max(r.room_price_up_to) as highUp
                         FROM mycpBundle:room r
                         JOIN r.room_ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status s
                         WHERE o.own_sended_to_team=0
                         GROUP BY r.room_ownership
                         ORDER BY o.own_mcp_code ASC";

        $results = $em->createQuery($query_string)->getResult();

        return $results;
    }

    function getByProvince($idProvince, $status = null) {
        $em = $this->getEntityManager();
        $whereByStatus = ($status != null) ? " AND o.own_status = :status" : "";
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code_generated as generatedCode,
                         o.own_name as name,
                         o.own_mcp_code as mycpCode,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_email_1 as email1,
                         o.own_email_2 as email2,
                         prov.prov_phone_code as provCode,
                         o.own_phone_number as phone,
                         o.own_mobile_number as mobile,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         s.status_name as status,
                         min(r.room_price_down_to) as lowDown,
                         max(r.room_price_down_to) as highDown,
                         min(r.room_price_up_to) as lowUp,
                         max(r.room_price_up_to) as highUp,
                         o.own_inmediate_booking as rr,
                         o.own_inmediate_booking_2 as ri
                         FROM mycpBundle:room r
                         JOIN r.room_ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status s
                         WHERE o.own_address_province=$idProvince $whereByStatus
                         GROUP BY r.room_ownership
                         ORDER BY o.own_mcp_code ASC";

        $queryObj = $em->createQuery($query_string);

        if($status != null)
            $queryObj->setParameter("status", $status);

        return $queryObj->getResult();
    }

    function getByCodesArray($ownsCodesArray) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         o.own_name as name,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         min(r.room_price_down_to) as priceDown,
                         max(r.room_price_up_to) as priceUp,
                         o.own_facilities_breakfast as breakfast,
                         o.own_facilities_breakfast_price as breakfastPrice,
                         o.own_facilities_parking as parking,
                         o.own_facilities_parking_price as parkingPrice,
                         o.own_water_jacuzee as hotTub,
                         o.own_water_piscina as pool,
                         o.own_description_pets as pets,
                         o.own_description_laundry as washer,
                         o.own_description_internet as internet,
                         sum(r.room_beds) as bedsTotal
                         FROM mycpBundle:room r
                         JOIN r.room_ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_mcp_code IN ($ownsCodesArray)
                         AND o.own_status = :status
                         GROUP BY r.room_ownership
                         ORDER BY o.own_mcp_code ASC";

        $results = $em->createQuery($query_string)
            ->setParameter("status", ownershipStatus::STATUS_ACTIVE)
            ->getResult();

        return $results;
    }

    function getByIdsArray($ownsIdsArray) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         r.room_num as roomNumber,
                         o.own_name as name,
                         1 as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         r.room_price_up_to as priceUp,
                         o.own_facilities_breakfast as breakfast,
                         o.own_facilities_breakfast_price as breakfastPrice,
                         o.own_facilities_parking as parking,
                         o.own_facilities_parking_price as parkingPrice,
                         o.own_water_jacuzee as hotTub,
                         o.own_water_piscina as pool,
                         o.own_description_pets as pets,
                         o.own_description_laundry as washer,
                         o.own_description_internet as internet,
                         r.room_beds as bedsTotal,
                         r.room_smoker as smoker,
                         r.room_climate as climate,
                         r.room_bathroom as bathroom,
                         r.room_audiovisual as audiovisual,
                         r.room_type as type,
                         o.own_geolocate_x as geoX,
                         o.own_geolocate_y as geoY
                         FROM mycpBundle:room r
                         JOIN r.room_ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_id IN ($ownsIdsArray)
                         AND o.own_status = :status
                         ORDER BY o.own_mcp_code ASC, r.room_num ASC";

        $results = $em->createQuery($query_string)
            ->setParameter("status", ownershipStatus::STATUS_ACTIVE)
            ->getResult();

        return $results;
    }

    public function top20Statistics() {
        $em = $this->getEntityManager();
        $query = "select SUM(IF(own.own_category = 'Premium', 1, 0)) as premium_total,
                  SUM(IF(LOWER(own.own_category) = 'rango medio', 1, 0)) as midrange_total,
                  SUM(IF(own.own_category = 'EconÃ³mica', 1, 0)) as economic_total
                  FROM mycpBundle:ownership own WHERE own.own_top_20 = 1 AND own.own_status = " . ownershipStatus::STATUS_ACTIVE;

        return $em->createQuery($query)->getOneOrNullResult();
    }

    public function getSalersNames() {
        $em = $this->getEntityManager();
        $query = "SELECT DISTINCT own.own_saler as name FROM mycpBundle:ownership own ORDER BY own.own_saler";
        return $em->createQuery($query)->getResult();
    }

    /**
     * Devuelve un arreglo que contiene todas las categorias de casas posibles
     * @return type arreglo
     */
    function getOwnsCategories($own_ids = null) {
        $em = $this->getEntityManager();

        $categories = array();

        $query_string = "SELECT SUM(IF(o.own_category='EconÃ³mica', 1, 0)) as economic,
                     SUM(IF(o.own_category='Rango medio', 1, 0)) as middle_range,
                     SUM(IF(o.own_category='Premium', 1, 0)) as premium
                     FROM mycpBundle:ownership o
                     WHERE o.own_status = :own_status" . ((isset($own_ids)) ? " AND o.own_id IN ($own_ids) " : "");

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $categories[] = array(trim("EconÃ³mica"), $counts['economic']);
        $categories[] = array(trim("Rango medio"), $counts['middle_range']);
        $categories[] = array(trim("Premium"), $counts['premium']);

        return $categories;
    }

    function getOwnsPrices($own_ids = null) {
        $em = $this->getEntityManager();

        $prices_result = array();
        $query_string = "SELECT SUM(IF(o.own_minimum_price< 25 AND o.own_minimum_price >=0, 1, 0)) as primero,
                     SUM(IF(o.own_minimum_price< 50 AND o.own_minimum_price >=25, 1, 0)) as segundo,
                     SUM(IF(o.own_minimum_price< 75 AND o.own_minimum_price >=50, 1, 0)) as tercero,
                     SUM(IF(o.own_minimum_price< 100 AND o.own_minimum_price >=75, 1, 0)) as cuarto,
                     SUM(IF(o.own_minimum_price< 125 AND o.own_minimum_price >=100, 1, 0)) as quinto,
                     SUM(IF(o.own_minimum_price< 150 AND o.own_minimum_price >=125, 1, 0)) as sexto,
                     SUM(IF(o.own_minimum_price< 175 AND o.own_minimum_price >=150, 1, 0)) as septimo,
                     SUM(IF(o.own_minimum_price< 200 AND o.own_minimum_price >=175, 1, 0)) as octavo,
                     SUM(IF(o.own_minimum_price< 300 AND o.own_minimum_price >=200, 1, 0)) as noveno
                     FROM mycpBundle:ownership o
                     WHERE o.own_status = :own_status" . ((isset($own_ids)) ? " AND o.own_id IN ($own_ids) " : "");

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $prices_result[] = array(0, 25, $counts['primero']);
        $prices_result[] = array(25, 50, $counts['segundo']);
        $prices_result[] = array(50, 75, $counts['tercero']);
        $prices_result[] = array(75, 100, $counts['cuarto']);
        $prices_result[] = array(100, 125, $counts['quinto']);
        $prices_result[] = array(125, 150, $counts['sexto']);
        $prices_result[] = array(150, 175, $counts['septimo']);
        $prices_result[] = array(175, 200, $counts['octavo']);
        $prices_result[] = array(200, 300, $counts['noveno']);

        return $prices_result;
    }

    /**
     * Devuelve un arreglo con todos los tipos de casa posibles
     * @return type arreglo
     */
    function getOwnsTypes($own_ids = null) {
        $em = $this->getEntityManager();

        $types = array();
        $query_string = "SELECT SUM(IF(o.own_type='Penthouse', 1, 0)) as penthouse,
                         SUM(IF(o.own_type='Villa con piscina', 1, 0)) as villa,
                         SUM(IF(o.own_type='Apartamento', 1, 0)) as apartamento,
                         SUM(IF(o.own_type='Propiedad completa', 1, 0)) as propiedad,
                         SUM(IF(o.own_type='Casa particular', 1, 0)) as casa
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status" . ((isset($own_ids)) ? " AND o.own_id IN ($own_ids) " : "");

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $types[] = array("Penthouse", $counts['penthouse']);
        $types[] = array("Villa con piscina", $counts['villa']);
        $types[] = array("Apartamento", $counts['apartamento']);
        $types[] = array("Propiedad completa", $counts['propiedad']);
        $types[] = array("Casa particular", $counts['casa']);

        return $types;
    }

    function getSearchStatistics() {
        $em = $this->getEntityManager();

        $query_string = "SELECT SUM(IF(o.own_rooms_total = 1, 1, 0)) as rooms_total_1,
                        SUM(IF(o.own_rooms_total = 2, 1, 0)) as rooms_total_2,
                        SUM(IF(o.own_rooms_total = 3, 1, 0)) as rooms_total_3,
                        SUM(IF(o.own_rooms_total = 4, 1, 0)) as rooms_total_4,
                        SUM(IF(o.own_rooms_total = 5, 1, 0)) as rooms_total_5,
                        SUM(IF(o.own_rooms_total > 5, 1, 0)) as rooms_total_more_5,
                        SUM(IF(o.own_facilities_breakfast = 1, 1, 0)) as own_services_breakfast,
                        SUM(IF(o.own_facilities_dinner = 1, 1, 0)) as own_services_dinner,
                        SUM(IF(o.own_facilities_parking = 1, 1, 0)) as own_services_parking,
                        SUM(IF(o.own_water_piscina = 1, 1, 0)) as own_water_pool,
                        SUM(IF(o.own_description_laundry = 1, 1, 0)) as own_services_laundry,
                        SUM(IF(o.own_description_internet = 1, 1, 0)) as own_service_internet_email,
                        SUM(IF(o.own_water_sauna = 1, 1, 0)) as own_water_sauna,
                        SUM(IF(o.own_description_pets = 1, 1, 0)) as own_services_pets,
                        SUM(IF(o.own_water_jacuzee = 1, 1, 0)) as own_water_jacuzzi,
                        SUM(IF(o.own_langs LIKE '1___', 1, 0)) as own_lang_english,
                        SUM(IF(o.own_langs LIKE '_1__', 1, 0)) as own_lang_french,
                        SUM(IF(o.own_langs LIKE '__1_', 1, 0)) as own_lang_german,
                        SUM(IF(o.own_langs LIKE '___1', 1, 0)) as own_lang_italian
                        FROM mycpBundle:ownership o
                        WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE;
        $query = $em->createQuery($query_string);
        $statistics = $query->getSingleResult();

        $query_string = "SELECT
                        SUM(IF(r.room_type = 'HabitaciÃ³n doble', 1, 0)) as room_double,
                        SUM(IF(r.room_type = 'HabitaciÃ³n doble (Dos camas)', 1, 0)) as room_double_two_beds,
                        SUM(IF(r.room_type = 'HabitaciÃ³n individual', 1, 0)) as room_simple,
                        SUM(IF(r.room_type = 'HabitaciÃ³n Triple', 1, 0)) as room_triple,
                        SUM(IF(r.room_climate LIKE '%Aire acondicionado%', 1, 0)) as room_climatization,
                        SUM(IF(r.room_audiovisual != '', 1, 0)) as room_audio_visuals,
                        SUM(IF(r.room_baby = 1, 1, 0)) as room_kids,
                        SUM(IF(r.room_smoker = 1, 1, 0)) as room_smoker,
                        SUM(IF(r.room_safe = 1, 1, 0)) as room_safe,
                        SUM(IF(r.room_windows = 1, 1, 0)) as room_total_windows_1,
                        SUM(IF(r.room_windows = 2, 1, 0)) as room_total_windows_2,
                        SUM(IF(r.room_windows = 3, 1, 0)) as room_total_windows_3,
                        SUM(IF(r.room_windows = 4, 1, 0)) as room_total_windows_4,
                        SUM(IF(r.room_windows = 5, 1, 0)) as room_total_windows_5,
                        SUM(IF(r.room_windows > 5, 1, 0)) as room_total_windows_more_5,
                        SUM(IF(r.room_beds = 1, 1, 0)) as room_total_beds_1,
                        SUM(IF(r.room_beds = 2, 1, 0)) as room_total_beds_2,
                        SUM(IF(r.room_beds = 3, 1, 0)) as room_total_beds_3,
                        SUM(IF(r.room_beds = 4, 1, 0)) as room_total_beds_4,
                        SUM(IF(r.room_beds = 5, 1, 0)) as room_total_beds_5,
                        SUM(IF(r.room_beds > 5, 1, 0)) as room_total_beds_more_5,
                        SUM(IF(r.room_balcony = 1, 1, 0)) as room_balcony,
                        SUM(IF(r.room_terrace = 1, 1, 0)) as room_terrace,
                        SUM(IF(r.room_yard = 1, 1, 0)) as room_yard,
                        SUM(IF(r.room_bathroom = 'Interior privado', 1, 0)) as own_bathroom_inner,
                        SUM(IF(r.room_bathroom = 'Exterior privado', 1, 0)) as own_bathroom_outer,
                        SUM(IF(r.room_bathroom = 'Compartido', 1, 0)) as own_bathroom_shared
                          FROM mycpBundle:room r
                          join r.room_ownership o
                          WHERE r.room_active = 1 AND o.own_status = " . ownershipStatus::STATUS_ACTIVE;
        $roomsStatistics = $em->createQuery($query_string)->getSingleResult();

        return array_merge($statistics, $roomsStatistics);
    }

    function getSearchNumbers($own_ids = null) {
        $em = $this->getEntityManager();
        $types = array();
        $results = array();
        $prices_result = array();
        $categories = array();

        $query_string = "SELECT SUM(IF(o.own_type='Penthouse', 1, 0)) as penthouse,
                         SUM(IF(o.own_type='Villa con piscina', 1, 0)) as villa,
                         SUM(IF(o.own_type='Apartamento', 1, 0)) as apartamento,
                         SUM(IF(o.own_type='Propiedad completa', 1, 0)) as propiedad,
                         SUM(IF(o.own_type='Casa particular', 1, 0)) as casa,
                         SUM(IF(o.own_minimum_price< 25 AND o.own_minimum_price >=0, 1, 0)) as primero,
                         SUM(IF(o.own_minimum_price< 50 AND o.own_minimum_price >=25, 1, 0)) as segundo,
                         SUM(IF(o.own_minimum_price< 75 AND o.own_minimum_price >=50, 1, 0)) as tercero,
                         SUM(IF(o.own_minimum_price< 100 AND o.own_minimum_price >=75, 1, 0)) as cuarto,
                         SUM(IF(o.own_minimum_price< 125 AND o.own_minimum_price >=100, 1, 0)) as quinto,
                         SUM(IF(o.own_minimum_price< 150 AND o.own_minimum_price >=125, 1, 0)) as sexto,
                         SUM(IF(o.own_minimum_price< 175 AND o.own_minimum_price >=150, 1, 0)) as septimo,
                         SUM(IF(o.own_minimum_price< 200 AND o.own_minimum_price >=175, 1, 0)) as octavo,
                         SUM(IF(o.own_minimum_price< 300 AND o.own_minimum_price >=200, 1, 0)) as noveno,
                         SUM(IF(o.own_category='EconÃ³mica', 1, 0)) as economic,
                         SUM(IF(o.own_category='Rango medio', 1, 0)) as middle_range,
                         SUM(IF(o.own_category='Premium', 1, 0)) as premium
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status" . ((isset($own_ids)) ? " AND o.own_id IN ($own_ids) " : "");

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $types[] = array("Penthouse", $counts['penthouse']);
        $types[] = array("Villa con piscina", $counts['villa']);
        $types[] = array("Apartamento", $counts['apartamento']);
        $types[] = array("Propiedad completa", $counts['propiedad']);
        $types[] = array("Casa particular", $counts['casa']);
        $results["types"] = $types;

        $prices_result[] = array(0, 25, $counts['primero']);
        $prices_result[] = array(25, 50, $counts['segundo']);
        $prices_result[] = array(50, 75, $counts['tercero']);
        $prices_result[] = array(75, 100, $counts['cuarto']);
        $prices_result[] = array(100, 125, $counts['quinto']);
        $prices_result[] = array(125, 150, $counts['sexto']);
        $prices_result[] = array(150, 175, $counts['septimo']);
        $prices_result[] = array(175, 200, $counts['octavo']);
        $prices_result[] = array(200, 300, $counts['noveno']);
        $results["prices"] = $prices_result;

        $categories[] = array(trim("EconÃ³mica"), $counts['economic']);
        $categories[] = array(trim("Rango medio"), $counts['middle_range']);
        $categories[] = array(trim("Premium"), $counts['premium']);
        $results["categories"] = $categories;

        return $results;
    }

    function getCompleteListByIds($own_ids, $user_id, $session_id) {
        $em = $this->getEntityManager();
        $results = array();

        if(isset($own_ids)) {
            $query_string = $this->getBasicQuery($user_id, $session_id);
            $query_string .= " WHERE o.own_id IN ($own_ids)";

            $results = $em->createQuery($query_string)->getResult();

            for ($i = 0; $i < count($results); $i++) {
                if($results[$i]['photo'] == null)
                    $results[$i]['photo'] = "no_photo.png";
                else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                    $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getListByIds($own_ids) {
        $em = $this->getEntityManager();
        $results = array();

        if(isset($own_ids)) {
            $query_string = "SELECT o FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
            $results = $em->createQuery($query_string)->getResult();
        }
        return $results;
    }

    /**
     * Devuelve un list con las ultimas casas agregadas
     * @return type list
     */
    function lastAdded($results_total = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getBasicQuery($user_id, $session_id);
        $query_string .= " WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_publish_date DESC, o.own_id DESC";

        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getDetails($own_name, $locale = "ES", $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getDetailBasicQuery($user_id, $session_id, $locale);
        $query_string .= " WHERE o.own_name = :own_name AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_id DESC";

        $accommodation =  $em->createQuery($query_string)->setParameter('own_name', $own_name)->getOneOrNullResult();

        if($accommodation != null)
        {
            $data = $em->getRepository("mycpBundle:ownershipData")->findOneBy(array("accommodation" => $accommodation["own_id"]));


            if($data != null) {
                $data->setVisits($data->getVisits() + 1)
                    ->setVisitsLastWeek($data->getVisitsLastWeek() + 1);

                $em->persist($data);
            }
            /*else{
                $ownership = $em->getRepository("mycpBundle:ownership")->findOneBy(array("accommodation" => $accommodation["own_id"]));
                $data = new ownershipData();
                $data->setAccommodation($ownership);
                $data->setVisits(1);
                $data->setVisitsLastWeek(1);
                $data->set
            }*/
            $em->flush();
        }

        return $accommodation;
    }

    function getDetailsByCode($own_mycp_code, $locale = "ES", $isSimple = false) {
        $em = $this->getEntityManager();
        $query_string = $this->getDetailBasicQuery(null, null, $locale);

        if(!$isSimple)
            $query_string .= " WHERE o.own_mcp_code = :own_mycp_code  AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_id DESC";
        else
            $query_string .= " WHERE o.own_mcp_code = :own_mycp_code ORDER BY o.own_id DESC";

        return $em->createQuery($query_string)->setParameter('own_mycp_code', $own_mycp_code)->getOneOrNullResult();
    }

    function getByCategory($category, $results_total = null, $exclude_id = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getBasicQuery($user_id, $session_id);

        if($exclude_id == null)
            $query_string .= " WHERE o.own_category= :category AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                              ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";
        else
            $query_string .= " WHERE o.own_category= :category
                           AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                           AND o.own_id <> $exclude_id
                         ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";
        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setParameter('category', $category)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->setParameter('category', $category)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getPhotos($ownid) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if(file_exists(realpath("uploads/ownershipImages/" . $photo->getOwnPhoPhoto()->getPhoName())))
                $photos[] = $photo->getOwnPhoPhoto();
        }

        return $photos;
    }

    function getPhotosAndDescription($ownid, $lang_code) {

        $em = $this->getEntityManager();
        $query_string = "SELECT p.pho_name as photo_name,
                         (SELECT min(pl.pho_lang_description) FROM mycpBundle:photoLang pl
                         JOIN pl.pho_lang_id_lang l WHERE l.lang_code='$lang_code' AND pl.pho_lang_id_photo=p.pho_id) as photo_description
                         FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if(file_exists(realpath("uploads/ownershipImages/" . $photo["photo_name"])))
                $photos[] = array(
                    'photo_name' => $photo["photo_name"],
                    'photo_description' => $photo["photo_description"]
                );
        }

        return $photos;
    }

    function getOwnershipForAutocompleteByName($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_name LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getOwnershipForAutocompleteByCode($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_mcp_code LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_mcp_code ASC");
        return $query->getResult();
    }

    function getPublicOwnerships() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getBest() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o
            FROM mycpBundle:ownership o
            WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
              AND o.own_rating >= 4
            ORDER BY o.own_ranking DESC, o.own_comments_total DESC");
        return $query->getResult();
    }

    function getVotedBest() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
                          AND o.own_comments_total > 0
                        ORDER BY o.own_ranking DESC, o.own_comments_total DESC";

        return $em->createQuery($query_string)->getResult();
    }

    function getPhotosArray($own_list) {
        $photos = array();

        if(is_array($own_list)) {
            foreach ($own_list as $own) {
                $photos[$own->getOwnId()] = $this->getOwnershipPhoto($own->getOwnId());
            }
        }
        return $photos;
    }

    function getPhotosArrayFromArray($own_list, $keyName) {
        $photos = array();

        if(is_array($own_list)) {
            foreach ($own_list as $own) {
                $photos[$own[$keyName]] = $this->getOwnershipPhoto($own[$keyName]);
            }
        }
        return $photos;
    }

    function getOwnershipPhoto($own_id) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                        JOIN op.own_pho_photo p
                        WHERE op.own_pho_own = " . $own_id .
            " ORDER BY p.pho_order ASC";
        $results = $em->createQuery($query_string)->setMaxResults(1)->getResult();
        $ownership_photo = ($results != null && count($results) > 0) ? $results[0] : null;
        $photo = null;
        if($ownership_photo != null) {
            $photo_name = $ownership_photo->getOwnPhoPhoto()->getPhoName();

            if(file_exists(realpath("uploads/ownershipImages/" . $photo_name))) {
                $photo = $photo_name;
            }
            else {
                $photo = 'no_photo.png';
            }
        }
        else {
            $photo = 'no_photo.png';
        }
        return $photo;
    }

    function getRoomsArray($own_list) {
        $em = $this->getEntityManager();
        $rooms = array();

        if(is_array($own_list)) {
            foreach ($own_list as $own) {
                $rooms[$own->getOwnId()] = count($em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $own->getOwnId(), "room_active" => true)));
            }
        }
        return $rooms;
    }

    function getCountsForSearch($own_list) {
        $em = $this->getEntityManager();
        $counts = array();

        if(is_array($own_list)) {
            foreach ($own_list as $own) {
                $own_id = $own->getOwnId();
                /*$query = $em->createQuery("SELECT count(res) as reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = $own_id)  as comments
                        FROM mycpBundle:generalReservation res
                        WHERE res.gen_res_own_id = $own_id
                        AND res.gen_res_status=" . generalReservation::STATUS_RESERVED);*/

                $query = $em->createQuery("SELECT data.reservedRooms as reservations,
                        data.publishedComments  as comments
                        FROM mycpBundle:ownershipData data
                        WHERE data.accommodation = $own_id");

                $counts[$own_id] = $query->getArrayResult();
            }
        }

        return $counts;
    }

    public function autocompleteTextList() {
        $em = $this->getEntityManager();
        $provinces = $em->createQueryBuilder()
            ->select("p.prov_name as name")
            ->from("mycpBundle:province", "p")
            ->orderBy("p.prov_name", "ASC")->getQuery()->getResult();

        $municipalities = $em->createQueryBuilder()
            ->select("m.mun_name as name")
            ->from("mycpBundle:municipality", "m")
            ->orderBy("m.mun_name", "ASC")->getQuery()->getResult();

        $ownerships = $em->createQueryBuilder()
            ->select("o.own_name as name", "o.own_mcp_code as code")
            ->from("mycpBundle:ownership", "o")
            ->where("o.own_status= :status")
            ->orderBy("o.own_name", "ASC")
            ->setParameter("status", OwnershipStatuses::ACTIVE)->getQuery()->getResult();

        $result = array();
        foreach ($provinces as $prov) {
            $result[] = $prov["name"];
        }

        foreach ($municipalities as $mun) {
            if(!array_search($mun["name"], $result))
                $result[] = $mun["name"];
        }

        foreach ($ownerships as $own) {
            if(!array_search($own["name"], $result))
                $result[] = $own["name"];

            if(!array_search($own["code"], $result))
                $result[] = $own["code"];
        }

        return json_encode($result);
    }

    public function getNotSynchronized() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_sync_st<>" . "'" . SyncStatuses::SYNC . "'";

        return $em->createQuery($query_string)->getResult();
    }

    public function setAllSync() {
        $em = $this->getEntityManager();
        foreach ($this->getHousesToOfflineApp() as $_house) {
            $_house->setOwnSync(true);
            $em->persist($_house);
        }
        $em->flush();
    }

    private function getBasicQuery($user_id = null, $session_id = null) {
        $query_string = "SELECT o.own_id as own_id,
                             o.own_name as own_name,
                            pho.pho_name as photo,
                            prov.prov_name as prov_name,
                            mun.mun_name as mun_name,
                            o.own_comments_total as comments_total,
                            o.own_rating as rating,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            o.own_inmediate_booking as OwnInmediateBooking,
                            o.own_inmediate_booking_2 as OwnInmediateBooking2,
                            (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                            data.activeRooms as rooms_count,
                            data.reservedRooms as count_reservations,
                            data.publishedComments  as comments,
                            (SELECT min(a.second_icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.data data
                         LEFT JOIN data.principalPhoto op
                         LEFT JOIN op.own_pho_photo pho";
        return $query_string;
    }

    private function getDetailBasicQuery($user_id = null, $session_id = null, $locale = "ES") {
        $query_string = "SELECT o.own_id as own_id,
                        dest.des_id,
                        dest.des_name as destination,
                        o.own_name as ownname,
                        prov.prov_name as ownAddressProvince,
                        prov.prov_id as ownAddressProvince_id,
                        o.own_address_street as ownAddressStreet,
                        o.own_address_number as ownAddressNumber,
                        o.own_type as owntype,
                        mun.mun_name as ownaddressmunicipality,
                        mun.mun_id as ownaddressmunicipality_id,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_mcp_code as mycpcode,
                        o.own_category as category,
                        o.own_minimum_price as ownminimumprice,
                        o.own_geolocate_x as OwnGeolocateX,
                        o.own_geolocate_y as OwnGeolocateY,
                        o.own_facilities_breakfast as ownFacilitiesBreakfast,
                        o.own_facilities_breakfast_price as ownFacilitiesBreakfastPrice,
                        o.own_facilities_dinner as ownFacilitiesDinner,
                        o.own_facilities_dinner_price_from as ownFacilitiesDinnerPriceFrom,
                        o.own_facilities_dinner_price_to as ownFacilitiesDinnerPriceTo,
                        o.own_facilities_parking as ownFacilitiesParking,
                        o.own_facilities_parking_price as ownFacilitiesParkingPrice,
                        o.own_description_bicycle_parking as ownDescriptionBicycleParking,
                        o.own_maximun_number_guests as ownmaximumnumberguests,
                        o.own_description_pets as ownDescriptionPets,
                        o.own_description_laundry as ownDescriptionLaundry,
                        o.own_description_internet as ownDescriptionInternet,
                        o.own_water_jacuzee as ownWaterJacuzee,
                        o.own_water_sauna as ownWaterSauna,
                        o.own_water_piscina as ownWaterPiscina,
                        o.own_homeowner_1 as owner1,
                        o.own_homeowner_2 as owner2,
                        o.own_commission_percent as OwnCommissionPercent,
                        o.own_inmediate_booking as OwnInmediateBooking,
                        o.own_inmediate_booking_2 as OwnInmediateBooking2,
                        pho.pho_name as ownerPhotoName,
                        status.status_id,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        data.activeRooms as rooms_count,
                        data.reservedRooms as count_reservations,
                        data.publishedComments  as comments,
                        (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as brief_description,
                        (SELECT min(dd.odl_description) FROM mycpBundle:ownershipDescriptionLang dd JOIN dd.odl_id_lang dl WHERE dd.odl_ownership = o.own_id AND dl.lang_code = '$locale') as description,
                        (SELECT min(auto.odl_automatic_translation) FROM mycpBundle:ownershipDescriptionLang auto JOIN auto.odl_id_lang lauto WHERE auto.odl_ownership = o.own_id AND lauto.lang_code = '$locale') as autotomaticTranslation,
                        (SELECT min(kl.okl_keywords) FROM mycpBundle:ownershipKeywordLang kl JOIN kl.okl_id_lang lang WHERE kl.okl_ownership = o.own_id AND lang.lang_code = '$locale') as keywords,
                        SUM(IF(o.own_langs LIKE '1___', 1, 0)) as english,
                        SUM(IF(o.own_langs LIKE '_1__', 1, 0)) as french,
                        SUM(IF(o.own_langs LIKE '__1_', 1, 0)) as german,
                        SUM(IF(o.own_langs LIKE '___1', 1, 0)) as italian,
                        (SELECT min(a.icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         LEFT JOIN o.own_destination dest
                         JOIN o.data data
                         LEFT JOIN o.own_owner_photo pho
                         LEFT JOIN o.own_status status";
        return $query_string;
    }

    public function getRankingFormula($ownership) {
        $em = $this->getEntityManager();
        $commentsTotal = 0;
        $comments = $em->getRepository("mycpBundle:comment")->findBy(array('com_ownership' => $ownership->getOwnId(), 'com_public' => true));

        foreach ($comments as $comment)
            $commentsTotal += $comment->getComRate();

        $reservationsTotal = count($em->getRepository("mycpBundle:generalReservation")->findBy(array("gen_res_own_id" => $ownership->getOwnId(), "gen_res_status" => generalReservation::STATUS_RESERVED)));

        return sqrt(($commentsTotal + 1) * ($reservationsTotal + 1) * ($reservationsTotal + 1));
    }

    public function updateRanking($ownership) {
        $em = $this->getEntityManager();
        $ranking = $this->getRankingFormula($ownership);
        $ownership->setOwnRanking($ranking);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }


    public function updateRating($ownership) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder()
            ->select("SUM(if(com.com_rate >= 3, 1, 0)) as comments")
            ->addSelect("ROUND(AVG(com.com_rate)) as rating")
            ->from("mycpBundle:comment", "com")
            ->where("com.com_public = 1")
            ->andWhere("com.com_ownership = :own_id")
            ->setParameter("own_id", $ownership->getOwnId());

        $results = $qb->getQuery()->getOneOrNullResult();
        $ownership->setOwnRating($results["rating"]);
        $ownership->setOwnCommentsTotal($results["comments"]);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    public function publish($ownership) {
        $em = $this->getEntityManager();
        $status = $em->getRepository("mycpBundle:ownershipStatus")->find(ownershipStatus::STATUS_ACTIVE);

        if($ownership->getOwnStatus()->getStatusId() == ownershipStatus::STATUS_IN_PROCESS)
            $ownership->setOwnPublishDate(new \DateTime());

        $ownership->setOwnStatus($status);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    public function getSimilars($ownership, $rooms) {
        $em = $this->getEntityManager();

        $queryString = "SELECT DISTINCT ow.own_id, ow.own_name, ow.own_commission_percent, ow.own_mcp_code FROM mycpBundle:ownership ow
                        WHERE ow.own_address_province = :province
                          AND ow.own_rooms_total >= :roomsTotal
                          AND ow.own_commission_percent = :commission
                          AND ow.own_id <> :ownId
                          AND ow.own_status = :status
                        ORDER BY ow.own_mcp_code ASC";

        //$em->createQuery($query_string)->getResult();
        return $em->createQuery($queryString)
            ->setParameters(array("province" => $ownership->getOwnAddressProvince()->getProvId(),
                "commission" => $ownership->getOwnCommissionPercent(),
                "ownId" => $ownership->getOwnId(),
                "roomsTotal" => count($rooms),
                "status" => ownershipStatus::STATUS_ACTIVE))
            ->getResult();
    }


    public function getByRoomsTotalAndMunicipality($municipality, $roomsTotal = null) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('ol')
            ->from("mycpBundle:ownership", "ol")
            ->where('ol.own_address_municipality = :municipality')
            ->andWhere('ol.own_rooms_total > 0')
            ->setParameter("municipality", $municipality);

        if($roomsTotal != null) {
            $qb->andWhere('ol.own_rooms_total = :roomsTotal')
                ->setParameter("roomsTotal", $roomsTotal);
        }

        return $qb->getQuery()->getResult();
    }

    public function getWithReservations($date = null) {
        $em = $this->getEntityManager();

        $dateString = ($date != null) ? " AND gen.gen_res_date >= :date" : "";

        $queryString = "SELECT ow FROM mycpBundle:ownership ow
                        WHERE (SELECT count(gen) FROM mycpBundle:generalreservation gen WHERE ow.own_id = gen.gen_res_own_id $dateString) > 0";

        $query = $em->createQuery($queryString);

        if($date != null)
            $query->setParameter("date", $date);

        return $query->getResult();
    }

    public function getSalesReport() {
        $rsm = new ResultSetMapping();
        $query = 'SELECT own_id FROM ownership;';
//        $query="SELECT
//  own.own_mcp_code as codigo,
//  own.own_name as nombre,
//  own.own_homeowner_1 as propietario1,
//  own.own_homeowner_2 as propietario2,
//  own.own_email_1 as correo1,
//  own.own_email_2 as correo2,
//  own.own_phone_number AS telefono,
//  own.own_phone_code as codigo_telefono,
//  own.own_mobile_number as celular,
//  own.own_address_street as calle,
//  own.own_address_number as numero,
//  own.own_address_between_street_1 as entre,
//  own.own_address_between_street_2 as y,
//  municipality.mun_name as municipio,
//  province.prov_name as provincia,
//  own.own_saler as gestor,
//  (SELECT COUNT(ownershipreservation.own_res_id) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id) AS solicitudes,
//  (SELECT COUNT(ownershipreservation.own_res_id) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id AND ownershipreservation.own_res_status=5) AS reservas,
//  (SELECT SUM(ownershipreservation.own_res_total_in_site) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id AND ownershipreservation.own_res_status=5) AS ingresos
//FROM ownership own
//  INNER JOIN municipality ON municipality.mun_id = own.own_address_municipality
//  INNER JOIN province ON province.prov_id = municipality.mun_prov_id
//ORDER BY own.own_mcp_code ASC
//;";
        $result = $this->getEntityManager()->createNativeQuery($query, $rsm);
        die(dump($result->e));
        return $result->getResult();
    }

    public function getRoomsIdByOwnership($idOwnership) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('r.room_id', 'r.room_num', 'r.room_type')
            ->from("mycpBundle:room", "r")
            ->where('r.room_ownership = :ownership')
            ->setParameter("ownership", $idOwnership)
            ->orderBy("r.room_num", "ASC");

        return $qb->getQuery()->getResult();
    }

    function getByIdsForExport($ownsIdsArray) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         o.own_name as name,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         st.status_name as status,
                         o.own_phone_number as phone,
                         o.own_mobile_number as mobile,
                         prov.prov_phone_code as phoneCode
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status st
                         WHERE o.own_id IN ($ownsIdsArray)
                         ORDER BY LENGTH(o.own_mcp_code) ASC, o.own_mcp_code ASC";

        $results = $em->createQuery($query_string)
            ->getResult();

        return $results;
    }

    function updateGeneralData($accommodation) {
        $em = $this->getEntityManager();
        $maximum_guest_total = 0;
        $roomsActiveTotal = 0;
        $roomsInactiveTotal = 0;
        $rooms = $em->getRepository("mycpBundle:room")->findBy(array("room_ownership" => $accommodation->getOwnId()));

        foreach ($rooms as $room) {
            if($room->getRoomActive()) {
                $roomsActiveTotal++;
                if(($accommodation->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownTo() < $accommodation->getOwnMinimumPrice()))
                    $accommodation->setOwnMinimumPrice($room->getRoomPriceDownTo());

                if(($accommodation->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $accommodation->getOwnMaximumPrice()))
                    $accommodation->setOwnMaximumPrice($room->getRoomPriceUpTo());

                if(($accommodation->getOwnMaximumPrice() == 0 || $room->getRoomPriceSpecial() > $accommodation->getOwnMaximumPrice()))
                    $accommodation->setOwnMaximumPrice($room->getRoomPriceSpecial());

                $maximum_guest_total += $room->getMaximumNumberGuests();
            }
            else
                $roomsInactiveTotal++;
        }

        $accommodation->setOwnMaximumNumberGuests($maximum_guest_total);
        $accommodation->setOwnRoomsTotal($roomsActiveTotal);

        if($roomsInactiveTotal == count($rooms)) {
            $inactiveStatus = $em->getRepository("mycpBundle:ownershipStatus")->find(ownershipStatus::STATUS_INACTIVE);
            $accommodation->setOwnStatus($inactiveStatus);
        }

        $em->persist($accommodation);
        $em->flush();
    }

    /**
     * Calcula automaticamente la categoria de un alojamiento
     * @param ownership $accommodation
     */
    function calculateAccommodationCategory($accommodation) {
        $em = $this->getEntityManager();
        $category = "";

        $average = $em->createQueryBuilder()
            ->from("mycpBundle:room", "r")
            ->select("AVG(r.room_price_down_to) as average")
            ->where("r.room_ownership = :idAccommodation")
            ->setParameter("idAccommodation", $accommodation->getOwnId())
            ->getQuery()
            ->getSingleScalarResult();


        if($average < 15 || ($average >= 15 && $average <= 35))
            $category = ownership::ACCOMMODATION_CATEGORY_ECONOMIC;
        else if($average > 35 && $average <= 50)
            $category = ownership::ACCOMMODATION_CATEGORY_MIDDLE_RANGE;
        else
            $category = ownership::ACCOMMODATION_CATEGORY_PREMIUM;

        $accommodation->setOwnCategory($category);
        $em->persist($accommodation);

        $em->flush();
    }

    function logs($filter_user = '', $filter_status = '', $filter_date = '', $filter_created = '', $filter_description = '') {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder()
            ->from("mycpBundle:ownershipStatistics", "os")
            ->select("os")
            ->join("os.accommodation", "acc")
            ->join("os.user", "user")
            ->join("acc.own_status", "status");

        if($filter_user != "")
            $qb->andWhere("user.user_id = :userId")
                ->setParameter("userId", $filter_user);

        if($filter_status != "")
            $qb->andWhere("status.status_id = :statusIs")
                ->setParameter("userId", $filter_status);

        if($filter_date != "")
            $qb->andWhere("os.date LIKE :date")
                ->setParameter("date", $filter_date . "%");

        if($filter_created != "") {

            if($filter_created == FilterHelper::ACCOMMODATION_GENERAL_DATA_CREATED)
                $qb->andWhere("os.created = 1");
        }

        if($filter_description != "")
            $qb->andWhere("os.notes LIKE :description")
                ->setParameter("description", "%" . $filter_description . "%");

        return $qb->getQuery();
    }

    public function canActive($ownership) {
        $em = $this->getEntityManager();

        $haveRooms = ($ownership->getOwnRoomsTotal() > 0);
        $havePhotos = $em->createQueryBuilder()
            ->from("mycpBundle:ownershipPhoto", "op")
            ->select("count(op)")
            ->where("op.own_pho_own = :accommodation")
            ->setParameter("accommodation", $ownership->getOwnId())
            ->getQuery()->getSingleScalarResult();

        $havePhotos = ($havePhotos > 0);

        $haveDescriptions = $em->createQueryBuilder()
            ->from("mycpBundle:ownershipDescriptionLang", "odl")
            ->select("count(odl)")
            ->where("odl.odl_ownership = :accommodation")
            ->setParameter("accommodation", $ownership->getOwnId())
            ->getQuery()->getSingleScalarResult();

        $haveDescriptions = ($haveDescriptions > 0);

        return $haveDescriptions && $havePhotos && $haveRooms;
    }
    function getRecommendableAccommodations($checkin_date = null, $checkout_date = null, $price = null, $municipality_id = null, $province_id = null, $max_result_set = null, $exclude_own_id = null, $user_id = null, $session_id = null,$innmediate=null) {
        if($municipality_id != null || $province_id != null) {
            $em = $this->getEntityManager();

            $query_string = "SELECT DISTINCT o.own_id,
                             o.own_name,
                             prov.prov_name,
                             mun.mun_name,
                             o.own_comments_total as comments_total,
                             o.own_rating as rating,
                             o.own_category as category,
                             o.own_type as type,
                             o.own_minimum_price as minimum_price,
                             (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                             (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                             (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id AND r.room_active = 1) as rooms_count,
                        (SELECT count(res) FROM mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments
                             FROM mycpBundle:room r1
                             JOIN r1.room_ownership o
                             JOIN o.own_address_province prov
                             JOIN o.own_address_municipality mun
                             WHERE r1.room_active = 1 AND o.own_status = " . ownershipStatus::STATUS_ACTIVE;

            /*if($municipality_id != null && $municipality_id != -1 && $municipality_id != '')
                $query_string = $query_string . " AND o.own_address_municipality =$municipality_id";*/

            if($province_id != null && $province_id != -1 && $province_id != '')
                $query_string = $query_string . " AND o.own_address_province =$province_id";

            if($exclude_own_id != null && $exclude_own_id != "")
                $query_string = $query_string . " AND o.own_id <>$exclude_own_id";

           /* if($price != null && $price != "")
                $query_string = $query_string . " AND o.own_minimum_price <= $price AND o.own_maximum_price >= $price";*/

            if($innmediate != null && $innmediate != "")
                $query_string = $query_string . " AND o.own_inmediate_booking_2 = $innmediate";

            $owns_with_reservations = array();
            if($checkin_date != null && $checkin_date != "" && $checkout_date != null && $checkout_date != "") {
                $query_reservations = "SELECT DISTINCT o.own_id FROM mycpBundle:ownershipReservation ores
                                   JOIN ores.own_res_gen_res_id gr
                                   JOIN gr.gen_res_own_id o
                                   WHERE ores.own_res_reservation_from_date >= :checkin_date
                                     AND ores.own_res_reservation_to_date <= :checkout_date";

                $owns_with_reservations = $em->createQuery($query_reservations)
                    ->setParameter("checkin_date", $checkin_date)
                    ->setParameter("checkout_date", $checkout_date)
                    ->getResult();

                $owns_id = "0";

                foreach ($owns_with_reservations as $oid) {
                    $owns_id .= "," . $oid["own_id"];
                }
                $query_string = $query_string . " AND o.own_id NOT IN ($owns_id)";
            }

            $query_string = $query_string . " AND o.own_not_recommendable = 0";

            if($max_result_set != null && $max_result_set > 0) {
                $rows_total = count($em->createQuery($query_string)->getResult());
                $offset = max(0, rand(0, $rows_total - $max_result_set - 1));

                $results = $em->createQuery($query_string)
                    ->setMaxResults($max_result_set)
                    ->setFirstResult($offset)
                    ->getResult();
            }
            else {
                $results = $em->createQuery($query_string)
                    ->getResult();
            }

            for ($i = 0; $i < count($results); $i++) {
                if($results[$i]['photo'] == null)
                    $results[$i]['photo'] = "no_photo_square.gif";
                else if(!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                    $results[$i]['photo'] = "no_photo_square.gif";
                }
            }
            return $results;
        }
        return null;
    }

    public function getRankingStatisticsToSendEmails($month, $year)
    {
        $em = $this->getEntityManager();

        $qb = $em->createQueryBuilder()
            ->from("mycpBundle:ownershipRankingExtra", "rank")
            ->join("rank.accommodation", "o")
            ->leftJoin("mycpBundle:ownershipRankingExtra", 'pRank', 'WITH', "pRank.accommodation = rank.accommodation")
            ->join("o.data", "data")
            ->join("o.own_destination", "des")
            ->join("rank.category", "currCat")
            ->join("pRank.category", "prevCat")
            ->where("o.own_status = :activeStatus")
            ->andWhere("((o.own_email_1 IS NOT NULL AND o.own_email_1 != '') OR (o.own_email_2 IS NOT NULL AND o.own_email_2 != ''))")
            ->andWhere("(MONTH(rank.startDate) = :monthValue AND YEAR(rank.startDate) = :yearValue)")
            ->andWhere("DATE_DIFF(rank.startDate, pRank.endDate) = 1")
            ->select("o.own_id as id, o.own_name as name, o.own_mcp_code as code, des.des_name as destination, rank.endDate as date,
            IF(o.own_email_1 IS NOT NULL AND o.own_email_1 != '', o.own_email_1, o.own_email_2) as email,
            IF(o.own_homeowner_1 IS NOT NULL AND o.own_homeowner_1 != '', o.own_homeowner_1, o.own_homeowner_2) as homeOwner,
            data.visitsLastWeek as visits, rank.totalAvailableRooms, rank.totalNonAvailableRooms, rank.totalReservedRooms, rank.totalFacturation, rank.currentMonthFacturation, rank.place, rank.destinationPlace,
            rank.ranking, rank.place, rank.destinationPlace, pRank.ranking as previousRank, pRank.place as previousPlace, pRank.destinationPlace as previousDestinationPlace,
            'es' as user_locale, currCat.nom_name as currentCategory, prevCat.nom_name as previousCategory")
            ->setParameter("activeStatus", OwnershipStatuses::ACTIVE)
            ->setParameter("monthValue", $month)
            ->setParameter("yearValue", $year)
            ->getQuery();
        return $qb->getResult();
    }

    public function getAllDateRankingCalculate(){
        $em = $this->getEntityManager();
        $query = $em->createQuery("select DISTINCT rank.startDate from mycpBundle:ownershipRankingExtra rank order by rank.startDate ASC");

        return $objects = $query->getResult();
    }

    public function getAllYearRankingCalculate(){
        $em = $this->getEntityManager();
        $query = $em->createQuery("select DISTINCT rank.year from mycpBundle:ownershipRankingExtraYear rank order by rank.year ASC");

        return $objects = $query->getResult();
    }

    public function getRankingStatisticsByOwnership($ownership, $month, $year){
        $em = $this->getEntityManager();

//        $currentDate = "01-".$month."-".$year;
//        dump($currentDate);die;
//        $fecha = date_create($currentDate);
//        $datestring = date_format($fecha,"Y-m-d");
//        $currentDate = strtotime($datestring.' +1 months');
//        $currentDate = date("Y-m-d",$currentDate);

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF(rank.place > previousRank.place, 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank, stat as current_statistic
         FROM mycpBundle:ownershipRankingExtra stat
         JOIN stat.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtra rank WITH rank.accommodation = stat.accommodation AND DATE_DIFF(stat.startDate, rank.endDate) = 1
         LEFT JOIN mycpBundle:ownershipRankingExtra previousRank WITH previousRank.accommodation = stat.accommodation AND DATE_DIFF(rank.startDate, previousRank.endDate) = 1         
         WHERE o.own_status = 1
         AND stat.accommodation = :id
         AND (MONTH(stat.startDate) = :montValue 
         AND YEAR(stat.startDate) = :yearValue)
         ");

        $query->setParameter("montValue", $month)
            ->setParameter("yearValue", $year)
//            ->setParameter("currentDate", $currentDate)
            ->setParameter("id", $ownership->getOwnId());

        return $objects = $query->getResult();

    }

    public function getRankingByPosition($position, $month, $year){
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF(rank.place > previousRank.place, 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank
         FROM mycpBundle:ownershipRankingExtra rank
         JOIN rank.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtra previousRank WITH previousRank.accommodation = rank.accommodation AND DATE_DIFF(rank.startDate, previousRank.endDate) = 1
         WHERE o.own_status = 1
         AND rank.place = :place
         AND (MONTH(rank.startDate) = :montValue 
         AND YEAR(rank.startDate) = :yearValue)
         ");

        $query->setParameter("montValue", $month)
            ->setParameter("yearValue", $year)
            ->setParameter("place", $position);

        return $objects = $query->getResult();
    }

    public function getRankingDestinationByPosition($position, $destination, $month, $year){
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF(rank.place > previousRank.place, 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank
         FROM mycpBundle:ownershipRankingExtra rank
         JOIN rank.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtra previousRank WITH previousRank.accommodation = rank.accommodation AND DATE_DIFF(rank.startDate, previousRank.endDate) = 1
         WHERE o.own_status = 1
         AND rank.destinationPlace = :place
         AND o.own_destination = :destination
         AND (MONTH(rank.startDate) = :montValue 
         AND YEAR(rank.startDate) = :yearValue)
         ");

        $query->setParameter("montValue", $month)
            ->setParameter("yearValue", $year)
            ->setParameter("place", $position)
            ->setParameter("destination", $destination);

        return $objects = $query->getResult();
    }

    public function getRankingStatistics($ownership, $month, $year){

        $result = $this->getRankingStatisticsByOwnership($ownership, $month, $year);

        if (count($result) > 0){

            $upPosition = array();
            $downPosition = array();
            $upDestinationPosition = array();
            $downDestinationPosition = array();

            if ($result[1]['current_rank'] != null){
                $year = (int)date_format($result[1]['current_rank']->getStartDate(),"Y");
                $month = (int)date_format($result[1]['current_rank']->getStartDate(),"m");

                $upPosition = $this->getRankingByPosition($result[1]['current_rank']->getPLace() - 1, $month, $year);
                $downPosition = $this->getRankingByPosition($result[1]['current_rank']->getPLace() + 1, $month, $year);
                //dump($result);die;
                $upDestinationPosition = $this->getRankingDestinationByPosition($result[1]['current_rank']->getDestinationPlace() - 1, $ownership->getOwnDestination()->getDesId(), $month, $year);
                $downDestinationPosition = $this->getRankingDestinationByPosition($result[1]['current_rank']->getDestinationPlace() + 1, $ownership->getOwnDestination()->getDesId(), $month, $year);
            }

            return array(
                "ranking" => $result,
                "upPosition" => $upPosition,
                "downPosition" => $downPosition,
                "upDestinationPosition" => $upDestinationPosition,
                "downDestinationPosition" => $downDestinationPosition
            );
        }

        return false;

    }

    //By Year

    public function getYearRankingStatistics($ownership, $year){

        $result = $this->getYearRankingStatisticsByOwnership($ownership, $year);

        if (count($result) > 0){
            $upPosition = $this->getYearRankingByPosition($result[0]['current_rank']->getPLace() - 1, $year);
            $downPosition = $this->getYearRankingByPosition($result[0]['current_rank']->getPLace() + 1, $year);

            $upDestinationPosition = $this->getYearRankingDestinationByPosition($result[0]['current_rank']->getDestinationPlace() - 1, $ownership->getOwnDestination()->getDesId(), $year);
            $downDestinationPosition = $this->getYearRankingDestinationByPosition($result[0]['current_rank']->getDestinationPlace() + 1, $ownership->getOwnDestination()->getDesId(), $year);

            return array(
                "ranking" => $result,
                "upPosition" => $upPosition,
                "downPosition" => $downPosition,
                "upDestinationPosition" => $upDestinationPosition,
                "downDestinationPosition" => $downDestinationPosition
            );
        }

        return false;

    }

    public function getYearRankingStatisticsByOwnership($ownership, $year){
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF( rank.place > previousRank.place , 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank
         FROM mycpBundle:ownershipRankingExtraYear rank
         JOIN rank.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtraYear previousRank WITH previousRank.accommodation = rank.accommodation AND (rank.year - previousRank.year) = 1
         WHERE o.own_status = 1
         AND rank.accommodation = :id
         AND rank.year = :yearValue
         ");

        $query->setParameter("yearValue", $year)
            ->setParameter("id", $ownership->getOwnId());

        return $objects = $query->getResult();

    }

    public function getYearRankingByPosition($position, $year){
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF( rank.place > previousRank.place , 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank
         FROM mycpBundle:ownershipRankingExtraYear rank
         JOIN rank.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtraYear previousRank WITH previousRank.accommodation = rank.accommodation AND (rank.year - previousRank.year) = 1
         WHERE o.own_status = 1
         AND rank.place = :place
         AND rank.year = :yearValue
         ");

        $query->setParameter("yearValue", $year)
            ->setParameter("place", $position);

        return $objects = $query->getResult();
    }

    public function getYearRankingDestinationByPosition($position, $destination, $year){
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT IF(rank.place < previousRank.place, 'subio',IF( rank.place > previousRank.place , 'bajo', 'mantuvo')) as up_down, IF(rank.destinationPlace < previousRank.destinationPlace, 'subio',IF(rank.destinationPlace > previousRank.destinationPlace, 'bajo', 'mantuvo')) as up_down_destination ,rank as current_rank, previousRank as previous_rank
         FROM mycpBundle:ownershipRankingExtraYear rank
         JOIN rank.accommodation o
         LEFT JOIN mycpBundle:ownershipRankingExtraYear previousRank WITH previousRank.accommodation = rank.accommodation AND (rank.year - previousRank.year) = 1
         WHERE o.own_status = 1
         AND rank.destinationPlace = :place
         AND o.own_destination = :destination
         AND rank.year = :yearValue
         ");

        $query->setParameter("yearValue", $year)
            ->setParameter("place", $position)
            ->setParameter("destination", $destination);

        return $objects = $query->getResult();
    }

    public function registerVisit($owner_id){
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder()
            ->from("mycpBundle:ownershipRankingExtra", "rank")
            ->select("rank")
            ->where("MONTH(rank.startDate) = MONTH(:today) AND YEAR(rank.startDate) = YEAR(:today)")
            ->andWhere("rank.accommodation = :accommodationId")
            ->setMaxResults(1)
            ->setParameter("today", new \DateTime())
            ->setParameter("accommodationId", $owner_id)
        ;

        $rank = $qb->getQuery()->getOneOrNullResult();

        if($rank != null)
        {
            $rank->setVisits($rank->getVisits() + 1);
            $em->persist($rank);
        }
        else{
            $today = new \DateTime();
            $firstDayOfMonth = date('Y-m-01', strtotime($today));
            $lastDayOfMonth = date('Y-m-t', strtotime($today));

            $accommodation = $em->getRepository("mycpBundle:ownership")->find($owner_id);
            $rank = new ownershipRankingExtra();
            $rank->setAccommodation($accommodation);
            $rank->setStartDate($firstDayOfMonth);
            $rank->setEndDate($lastDayOfMonth);
            $rank->setVisits(1);

            $em->persist($rank);
        }

        $em->flush();
    }

}
