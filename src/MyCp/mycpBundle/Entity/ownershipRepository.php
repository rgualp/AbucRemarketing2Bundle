<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use MyCp\mycpBundle\Entity\ownership;
use MyCp\mycpBundle\Entity\ownershipDescriptionLang;
use MyCp\mycpBundle\Entity\ownershipGeneralLang;
use MyCp\mycpBundle\Entity\ownershipKeywordLang;
use MyCp\mycpBundle\Entity\room;
use MyCp\mycpBundle\Entity\userCasa;
use MyCp\mycpBundle\Helpers\SyncStatuses;
use MyCp\mycpBundle\Entity\ownershipStatus;
use MyCp\mycpBundle\Helpers\Dates;

/**
 * ownershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ownershipRepository extends EntityRepository {

    function insert($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller) {

        if ($data['facilities_breakfast'] == 'No')
            $data['facilities_breakfast'] = 0;
        else
            $data['facilities_breakfast'] = 1;

        if ($data['facilities_dinner'] == 'No')
            $data['facilities_dinner'] = 0;
        else
            $data['facilities_dinner'] = 1;

        if ($data['facilities_parking'] == 'No')
            $data['facilities_parking'] = 0;
        else
            $data['facilities_parking'] = 1;

        $active_top_20 = 0;
        if (isset($data['top_20']))
            $active_top_20 = 1;

        $active_not_recommendable = 0;
        if (isset($data['not_recommendable']))
            $active_not_recommendable = 1;

        $water_jacuzee = 0;
        if (isset($data['water_jacuzee']))
            $water_jacuzee = 1;

        $water_sauna = 0;
        if (isset($data['water_sauna']))
            $water_sauna = 1;

        $water_pool = 0;
        if (isset($data['water_piscina']))
            $water_pool = 1;

        //languages
        $ownership_english_lang = 0;
        if (isset($data['ownership_english_lang']))
            $ownership_english_lang = 1;

        $ownership_french_lang = 0;
        if (isset($data['ownership_french_lang']))
            $ownership_french_lang = 1;

        $ownership_german_lang = 0;
        if (isset($data['ownership_german_lang']))
            $ownership_german_lang = 1;

        $ownership_italian_lang = 0;
        if (isset($data['ownership_italian_lang']))
            $ownership_italian_lang = 1;

        $langs_string = $ownership_english_lang . $ownership_french_lang . $ownership_german_lang . $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = new ownership();
        $ownership->setOwnLangs($langs_string);
        $ownership->setOwnName($data['ownership_name']);
        $ownership->setOwnLicenceNumber($data['ownership_licence_number']);
        $ownership->setOwnMcpCode($data['ownership_mcp_code']);
        $ownership->setOwnAddressStreet($data['ownership_address_street']);
        $ownership->setOwnAddressNumber($data['ownership_address_number']);
        $ownership->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1']);
        $ownership->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);
        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov);
        $ownership->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));

        if ($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnHomeowner1($data['ownership_homeowner_1']);
        $ownership->setOwnHomeowner2($data['ownership_homeowner_2']);
        $ownership->setOwnPhoneCode('(+53' . $prov->getProvPhoneCode() . ')');
        $phone = '(+53' . $prov->getProvPhoneCode() . ') ' . $data['ownership_phone_number'];
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnCategory($data['ownership_category']);
        $ownership->setOwnType($data['ownership_type']);
        $ownership->setOwnFacilitiesBreakfast($data['facilities_breakfast']);
        $ownership->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price']);
        $ownership->setOwnFacilitiesDinner($data['facilities_dinner']);
        $ownership->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from']);
        $ownership->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to']);
        $ownership->setOwnFacilitiesParking($data['facilities_parking']);
        $ownership->setOwnFacilitiesParkingPrice($data['facilities_parking_price']);
        $ownership->setOwnFacilitiesNotes($data['facilities_notes']);
        $ownership->setOwnDescriptionBicycleParking($data['description_bicycle_parking']);
        $ownership->setOwnDescriptionPets($data['description_pets']);
        $ownership->setOwnDescriptionLaundry($data['description_laundry']);
        $ownership->setOwnDescriptionInternet($data['description_internet']);
        $ownership->setOwnGeolocateX($data['geolocate_x']);
        $ownership->setOwnGeolocateY($data['geolocate_y']);
        $ownership->setOwnTop20($active_top_20);
        $ownership->setOwnNotRecommendable($active_not_recommendable);
        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);

        if (!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);

        $ownership->setOwnStatus($status);
        $ownership->setOwnRoomsTotal($data['count_rooms']);
        $ownership->setOwnComment($data['comment']);
        $ownership->setOwnCommissionPercent($data['ownership_percent_commission']);
        $ownership->setOwnSaler($data['ownership_saler']);
        $ownership->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']));
        $ownership->setOwnLastUpdate(new \DateTime());
        $ownership->setOwnCreationDate(new \DateTime());
        //var_dump($data);
        //exit();

        $ownership->setOwnCommentsTotal(0);
        $ownership->setOwnMaximumNumberGuests(0);
        $ownership->setOwnRating(0);
        $ownership->setOwnMaximumPrice(0);
        $ownership->setOwnMinimumPrice(0);
        $ownership->setOwnRoomsTotal(0);

        $ownership->setOwnWaterJacuzee($water_jacuzee);
        $ownership->setOwnWaterSauna($water_sauna);
        $ownership->setOwnWaterPiscina($water_pool);

        $em->persist($ownership);

        $keys = array_keys($data);

        foreach ($keys as $item) {
            if (strpos($item, 'ownership_language') !== false) {

                $id = substr($item, 19, strlen($item));
                $ogl = new ownershipGeneralLang();
                $ogl->setOglIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $ogl->setOglOwnership($ownership);
                $em->persist($ogl);
            }

            if (strpos($item, 'description_desc') !== false) {

                $id = substr($item, 17, strlen($item));
                $odl = new ownershipDescriptionLang();
                $odl->setOdlIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $odl->setOdlDescription($data['description_desc_' . $id]);
                $odl->setOdlBriefDescription($data['description_brief_desc_' . $id]);
                $odl->setOdlOwnership($ownership);
                $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }

        $ownership->setOwnRoomsTotal($data['count_rooms']);

        $beds_total = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {
            $room = new room();
            $room->setRoomType($data['room_type_' . $e]);
            $room->setRoomBeds($data['room_beds_number_' . $e]);
            //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
            $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
            //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
            $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);
            
            if(isset($data['room_price_special_' . $e]))
                $room->setRoomPriceSpecial($data['room_price_special_' . $e]);
            
            $room->setRoomClimate($data['room_climate_' . $e]);
            $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
            $room->setRoomSmoker($data['room_smoker_' . $e]);
            $room->setRoomSafe($data['room_safe_box_' . $e]);
            $room->setRoomBaby($data['room_baby_' . $e]);
            $room->setRoomBathroom($data['room_bathroom_' . $e]);
            $room->setRoomStereo($data['room_stereo_' . $e]);
            $room->setRoomWindows($data['room_windows_' . $e]);
            $room->setRoomBalcony($data['room_balcony_' . $e]);
            $room->setRoomTerrace($data['room_terrace_' . $e]);
            $room->setRoomYard($data['room_yard_' . $e]);
            $room->setRoomOwnership($ownership);
            $room->setRoomNum($e);
            $em->persist($room);

            /**
             * Codigo Yanet - Inicio
             */
            if ($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice())
                $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

            $ownership->setOwnMaximumNumberGuests($ownership->getOwnMaximumNumberGuests() + $room->getRoomBeds());

            if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());
            
            if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

            if ($room->getRoomBeds() > 0)
                $beds_total += $room->getRoomBeds();
            //$ownership->setOwnMaximunNumberGuests($ownership->getOwnMaximunNumberGuests() + $room->getRoomBeds());

            $em->persist($ownership);
            /**
             * Codigo Yanet - Fin
             */
        }

        $ownership->setOwnMaximunNumberGuests($beds_total);
        $em->persist($ownership);

        //save client casa
        if ($new_user) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUser($ownership,$file,$dir,$factory, $send_creation_mail, $controller);
        }
        $em->flush();
    }

    function edit($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller) {
        $id_ownership = $data['edit_ownership'];

        $active_top_20 = 0;
        if (isset($data['top_20']))
            $active_top_20 = 1;

        $water_jacuzee = 0;
        if (isset($data['water_jacuzee']))
            $water_jacuzee = 1;

        $water_sauna = 0;
        if (isset($data['water_sauna']))
            $water_sauna = 1;

        $water_pool = 0;
        if (isset($data['water_piscina']))
            $water_pool = 1;

        $active_not_recommendable = 0;
        if (isset($data['not_recommendable']))
            $active_not_recommendable = 1;

        //languages
        $ownership_english_lang = 0;
        if (isset($data['ownership_english_lang']))
            $ownership_english_lang = 1;

        $ownership_french_lang = 0;
        if (isset($data['ownership_french_lang']))
            $ownership_french_lang = 1;

        $ownership_german_lang = 0;
        if (isset($data['ownership_german_lang']))
            $ownership_german_lang = 1;

        $ownership_italian_lang = 0;
        if (isset($data['ownership_italian_lang']))
            $ownership_italian_lang = 1;

        $langs_string = $ownership_english_lang .
                $ownership_french_lang . $ownership_german_lang .
                $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership =
                $em->getRepository('mycpBundle:ownership')->find($id_ownership);
        $ownership->setOwnLangs($langs_string);
        $ownership->setOwnName($data['ownership_name']);
        $ownership->setOwnLicenceNumber($data['ownership_licence_number']);
        $ownership->setOwnMcpCode($data['ownership_mcp_code']);
        $ownership->setOwnAddressStreet($data['ownership_address_street']);
        $ownership->setOwnAddressNumber($data['ownership_address_number']);
        $ownership->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1']);
        $ownership->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);
        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov);
        $ownership->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));
        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnHomeowner1($data['ownership_homeowner_1']);
        $ownership->setOwnHomeowner2($data['ownership_homeowner_2']);
        $ownership->setOwnPhoneCode('(+53' . $prov->getProvPhoneCode() . ')');
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnCategory($data['ownership_category']);
        $ownership->setOwnType($data['ownership_type']);
        $ownership->setOwnFacilitiesBreakfast($data['facilities_breakfast']);
        $ownership->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price']);
        $ownership->setOwnFacilitiesDinner($data['facilities_dinner']);
        $ownership->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from']);
        $ownership->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to']);
        $ownership->setOwnFacilitiesParking($data['facilities_parking']);
        $ownership->setOwnFacilitiesParkingPrice($data['facilities_parking_price']);
        $ownership->setOwnFacilitiesNotes($data['facilities_notes']);
        $ownership->setOwnDescriptionBicycleParking($data['description_bicycle_parking']);
        $ownership->setOwnDescriptionPets($data['description_pets']);
        $ownership->setOwnDescriptionLaundry($data['description_laundry']);
        $ownership->setOwnDescriptionInternet($data['description_internet']);
        $ownership->setOwnGeolocateX($data['geolocate_x']);
        $ownership->setOwnGeolocateY($data['geolocate_y']);
        $ownership->setOwnTop20($active_top_20);
        $ownership->setOwnNotRecommendable($active_not_recommendable);

        if ($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);
        if (!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);
        $ownership->setOwnStatus($status);
        $ownership->setOwnComment($data['comment']);
        $old_rooms = $em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $data['edit_ownership']));
        $ownership->setOwnCommissionPercent($data['ownership_percent_commission']);
        $ownership->setOwnLastUpdate(new \DateTime());
        $ownership->setOwnSaler($data['ownership_saler']);
        
        if(isset($data['ownership_visit_date']))
            $ownership->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']));

        $ownership->setOwnWaterJacuzee($water_jacuzee);
        $ownership->setOwnWaterSauna($water_sauna);
        $ownership->setOwnWaterPiscina($water_pool);

        /**
         * Codigo Yanet - Inicio
         */
        $ownership->setOwnMaximumNumberGuests(0);
        $ownership->setOwnMaximumPrice(0);
        $ownership->setOwnMinimumPrice(0);
        $ownership->setOwnRoomsTotal(0);
        $em->persist($ownership);

        $query = $em->createQuery("DELETE
            mycpBundle:ownershipGeneralLang ogl WHERE
            ogl.ogl_ownership=$id_ownership");
        $query->execute();

        $keys = array_keys($data);

        foreach ($keys as $item) {
            if (strpos($item, 'description_desc') !== false) {

                $id = substr($item, 17, strlen($item));

                if (array_key_exists('description_id_' . $id, $data))
                    $odl = $em->getRepository('mycpBundle:ownershipDescriptionLang')->find($data['description_id_' . $id]);
                else
                    $odl = new ownershipDescriptionLang();

                $odl->setOdlIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $odl->setOdlDescription($data['description_desc_' . $id]);

                $odl->setOdlBriefDescription($data['description_brief_desc_' . $id]);
                $odl->setOdlOwnership($ownership);
                $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                if (array_key_exists('kw_id_' . $id, $data))
                    $okl = $em->getRepository('mycpBundle:ownershipKeywordLang')->find($data['kw_id_' . $id]);
                else
                    $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }
        /**
         * Codigo Yanet - Inicio
         */
        $ownership->setOwnRoomsTotal($data['count_rooms']);
        /**
         * Codigo Yanet - Fin
         */
        $beds_total = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {

            if (array_key_exists('room_id_' . $e, $data))
                $room = $em->getRepository('mycpBundle:room')->find($data['room_id_' . $e]);
            else
                $room = new room();

            if (isset($old_rooms[$e - 1])) {
                $metadata = $em->getClassMetadata(get_class($room));
                $metadata->setIdGeneratorType(ClassMetadata::GENERATOR_TYPE_NONE);
                //$room->setRoomId($old_rooms[$e - 1]->getRoomId());
            }
            $room->setRoomType($data['room_type_' . $e]);
            $room->setRoomBeds($data['room_beds_number_' . $e]);
            //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
            $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
            //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
            $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);
            
            if(isset($data['room_price_special_' . $e]))
                $room->setRoomPriceSpecial($data['room_price_special_' . $e]);
            
            $room->setRoomClimate($data['room_climate_' . $e]);
            $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
            $room->setRoomSmoker($data['room_smoker_' . $e]);
            $room->setRoomSafe($data['room_safe_box_' . $e]);
            $room->setRoomBaby($data['room_baby_' . $e]);
            $room->setRoomBathroom($data['room_bathroom_' . $e]);
            $room->setRoomStereo($data['room_stereo_' . $e]);
            $room->setRoomWindows($data['room_windows_' . $e]);
            $room->setRoomBalcony($data['room_balcony_' . $e]);
            $room->setRoomTerrace($data['room_terrace_' . $e]);
            $room->setRoomYard($data['room_yard_' . $e]);
            $room->setRoomOwnership($ownership);
            $room->setRoomNum($e);
            $em->persist($room);

            if ($ownership->getOwnMinimumPrice() == 0 ||
                    $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice())
                $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

            $ownership->setOwnMaximumNumberGuests($ownership->getOwnMaximumNumberGuests() + $room->getRoomBeds());

            if ($ownership->getOwnMaximumPrice() == 0 ||
                    $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());
            
            if ($ownership->getOwnMaximumPrice() == 0 ||
                    $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

            if ($room->getRoomBeds() > 0)
                $beds_total += $room->getRoomBeds();

            $em->persist($ownership);
        }
        $ownership->setOwnMaximunNumberGuests($beds_total);
        $em->persist($ownership);

        //save client casa
        if ($new_user) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUser($ownership,$file,$dir,$factory, $send_creation_mail, $controller);
        }

        $em->flush();
    }

    function getAll($filter_code = '', $filter_active = '', $filter_category = '', $filter_province = '', $filter_municipality = '', $filter_destination = '', $filter_type = '', $filter_name = '', $filter_saler = '', $filter_visit_date = '') {

        $condition = '';
        if ($filter_active != 'null' && $filter_active != '') {
            $condition .= "AND ow.own_status = :filter_active ";
        }
        if ($filter_category != 'null' && $filter_category != '') {
            $condition .= " AND ow.own_category = :filter_category ";
        }
        if ($filter_province != 'null' && $filter_province != '') {
            $condition .= " AND ow.own_address_province = :filter_province ";
        }
        if ($filter_municipality != 'null' && $filter_municipality != '') {
            $condition .= " AND ow.own_address_municipality = :filter_municipality ";
        }
        if ($filter_destination != 'null' && $filter_destination != '') {
            if ($filter_destination == "-1")
                $condition .= " AND ow.own_destination IS NULL ";
            else
                $condition .= " AND ow.own_destination = :filter_destination ";
        }
        if ($filter_type != 'null' && $filter_type != '') {
            $condition .= " AND ow.own_type = :filter_type ";
        }

        if ($filter_name != 'null' && $filter_name != '') {
            $condition .= " AND ow.own_name LIKE :filter_name ";
        }
        if ($filter_saler != 'null' && $filter_saler != '') {
            $condition .= " AND ow.own_saler LIKE :filter_saler ";
        }
        if ($filter_visit_date != 'null' && $filter_visit_date != '') {
            $condition .= " AND ow.own_visit_date = :filter_visit_date ";
        }


        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT
        ow.own_not_recommendable,
        ow.own_mcp_code,
        ow.own_name,
        mun.mun_name,
        prov.prov_name,
        ow.own_comment,
        ow.own_id,
        ow.own_rooms_total,
        (SELECT min(d.des_name) FROM mycpBundle:destination d WHERE d.des_id = ow.own_destination) as des_name,
        (SELECT min(s.status_id) FROM mycpBundle:ownershipStatus s WHERE s.status_id = ow.own_status) as status_id,
        (SELECT min(s1.status_name) FROM mycpBundle:ownershipStatus s1 WHERE s1.status_id = ow.own_status) as status_name,
        (SELECT count(op) FROM mycpBundle:ownershipPhoto op WHERE op.own_pho_own = ow.own_id) as photos_count
        FROM mycpBundle:ownership ow
        JOIN ow.own_address_municipality mun
        JOIN ow.own_address_province prov
        WHERE ow.own_mcp_code LIKE :filter_code $condition ORDER BY ow.own_mcp_code ASC");

        if ($filter_active != 'null' && $filter_active != '')
            $query->setParameter('filter_active', $filter_active);

        if ($filter_category != 'null' && $filter_category != '')
            $query->setParameter('filter_category', $filter_category);

        if ($filter_province != 'null' && $filter_province != '')
            $query->setParameter('filter_province', $filter_province);

        if ($filter_municipality != 'null' && $filter_municipality != '')
            $query->setParameter('filter_municipality', $filter_municipality);

        if ($filter_destination != 'null' && $filter_destination != '' && $filter_destination != '-1')
            $query->setParameter('filter_destination', $filter_destination);

        if ($filter_type != 'null' && $filter_type != '')
            $query->setParameter('filter_type', $filter_type);

        if ($filter_name != 'null' && $filter_name != '')
            $query->setParameter('filter_name', "%" . $filter_name . "%");

        if ($filter_saler != 'null' && $filter_saler != '')
            $query->setParameter('filter_saler', "%" . $filter_saler . "%");

        if ($filter_visit_date != 'null' && $filter_visit_date != '')
            $query->setParameter('filter_visit_date', Dates::createFromString($filter_visit_date, '-'));

        if (isset($filter_code))
            $query->setParameter('filter_code', "%" . $filter_code . "%");

        return $query->getResult();
    }

    /**
     * Codigo Yanet - Inicio
     */

    /**
     * Realiza busquedas segun los criterios seleccionados
     * @param integer $province_id
     * @param datetime $arrivalDate
     * @param datetime $leavingDate
     * @param integer $guest_total
     * @param string $order_by
     * @return array of MyCp\mycpBundle\Entity\ownership
     */
    function search($controller, $text = null, $arrivalDate = null, $leavingDate = null, $guest_total = 1, $rooms_total = 1, $order_by = 'PRICE_LOW_HIGH', $room_filter = false, $filters = null) {

        $em = $this->getEntityManager();
        $user_ids = $em->getRepository('mycpBundle:user')->user_ids($controller);
        $user_id = $user_ids['user_id'];
        $session_id = $user_ids['session_id'];

        $reservations_where = "0";

        if ($arrivalDate != null || $leavingDate != null) {

            $query_string = "SELECT DISTINCT o.own_id FROM mycpBundle:ownershipReservation owr
                                JOIN owr.own_res_gen_res_id r
                                JOIN r.gen_res_own_id o
                                WHERE owr.own_res_status = " . ownershipReservation::STATUS_RESERVED .
                    " AND (SELECT count(owr1) FROM mycpBundle:ownershipReservation owr1
                                       JOIN owr1.own_res_gen_res_id r1 WHERE r1.gen_res_own_id = o.own_id
                                       AND owr1.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") < o.own_rooms_total";
            $dates_where = "";

            if ($arrivalDate != null) {
                $dates_where .= ($dates_where != '') ? " OR " : "";
                $dates_where .= "(owr.own_res_reservation_from_date <= :arrival_date AND owr.own_res_reservation_to_date >= :arrival_date)";
            }

            if ($leavingDate != null) {
                $dates_where .= ($dates_where != '') ? " OR " : "";
                $dates_where .= "(owr.own_res_reservation_from_date <= :leaving_date AND owr.own_res_reservation_to_date >= :leaving_date)";
            }

            if ($arrivalDate != null && $leavingDate != null) {
                $dates_where .= ($dates_where != '') ? " OR " : "";
                $dates_where .= "(owr.own_res_reservation_from_date >= :arrival_date AND owr.own_res_reservation_to_date <= :leaving_date)";
            }

            $query_string .= ($dates_where != '') ? " AND ($dates_where)" : "";

            $query_reservation = $em->createQuery($query_string);

            if ($arrivalDate != null)
                $query_reservation->setParameter('arrival_date', $arrivalDate);

            if ($leavingDate != null)
                $query_reservation->setParameter('leaving_date', $leavingDate);

            $reservations = $query_reservation->getResult();

            foreach ($reservations as $res)
                $reservations_where .= "," . $res["own_id"];
        }

        $query_string = "";
        $temp_array = null;
        $parameters = array();
        if (!$room_filter) {
            $query_string = "SELECT o.own_id as own_id,
                             o.own_name as own_name,
                            (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                            prov.prov_name as prov_name,
                            mun.mun_name as mun_name,
                            o.own_comments_total as comments_total,
                            o.own_rating as rating,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = :user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = :session_id " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                            (SELECT count(room) FROM mycpBundle:room room WHERE room.room_ownership=o.own_id) as rooms_count,
                            (SELECT count(res) FROM mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                            (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments,
                            o.own_facilities_breakfast as breakfast,
                            o.own_facilities_dinner as dinner,
                            o.own_facilities_parking as parking,
                            o.own_water_piscina as pool,
                            o.own_description_laundry as laundry,
                            o.own_description_internet as internet,
                            o.own_water_sauna as sauna,
                            o.own_description_pets as pets,
                            o.own_water_jacuzee as jacuzee,
                            o.own_langs as langs
                             FROM mycpBundle:ownership o
                             JOIN o.own_address_province prov
                             JOIN o.own_address_municipality mun";
        } else {
            $query_string = "SELECT o.own_id as own_id,
                             o.own_name as own_name,
                            (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                            prov.prov_name as prov_name,
                            mun.mun_name as mun_name,
                            o.own_comments_total as comments_total,
                            o.own_rating as rating,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = :user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = :session_id " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                            (SELECT count(room) FROM mycpBundle:room room WHERE room.room_ownership=o.own_id) as rooms_count,
                            (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                            (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments ,
                            o.own_facilities_breakfast as breakfast,
                            o.own_facilities_dinner as dinner,
                            o.own_facilities_parking as parking,
                            o.own_water_piscina as pool,
                            o.own_description_laundry as laundry,
                            o.own_description_internet as internet,
                            o.own_water_sauna as sauna,
                            o.own_description_pets as pets,
                            o.own_water_jacuzee as jacuzee,
                            o.own_langs as langs
                             FROM mycpBundle:room r
                             JOIN r.room_ownership o
                             JOIN o.own_address_province prov
                             JOIN o.own_address_municipality mun";
        }
        $parameters[] = array('session_id', $session_id);
        $where = ' WHERE o.own_status = ' . ownershipStatus::STATUS_ACTIVE . " AND o.own_id NOT IN ($reservations_where)";
        if ($text != null && $text != '' && $text != 'null')
            $where = $where . ($where != '' ? " AND " : " WHERE ") . "(prov.prov_name LIKE :text OR " . "o.own_name LIKE :text OR o.own_mcp_code LIKE :text OR mun.mun_name LIKE :text)";

        if ($filters != null && is_array($filters) && in_array('own_beds_total', $filters) && $filters['own_beds_total'] != null && is_array($filters['own_beds_total']) && count($filters['own_beds_total']) > 0) {
            $temp_array = $filters['own_beds_total'];

            if (in_array('+5', $temp_array)) {
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests > 5";

                if (($key = array_search('+5', $temp_array)) !== false) {
                    unset($temp_array[$key]);
                }
            }

            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests IN (" . $this->getStringFromArray($filters['own_beds_total'], false) . ")";
        } else if ($guest_total != null && $guest_total != 'null' && $guest_total != "")
            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests >= :guests_total";

        if (isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != "")
            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_rooms_total >= :rooms_total";


        if ($filters != null && is_array($filters)) {

            if (key_exists('own_category', $filters) && $filters['own_category'] != null && is_array($filters['own_category']) && count($filters['own_category']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_category IN (" . $this->getStringFromArray($filters['own_category']) . ")";

            if (key_exists('own_type', $filters) && $filters['own_type'] != null && is_array($filters['own_type']) && count($filters['own_type']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_type IN (" . $this->getStringFromArray($filters['own_type']) . ")";


            if (key_exists('own_price_from', $filters) && $filters['own_price_from'] != null && is_array($filters['own_price_from']) && count($filters['own_price_from']) > 0 && $filters['own_price_to'] != null && is_array($filters['own_price_to']) && count($filters['own_price_to']) > 0) {
                $prices_where = "";

                for ($i = 0; $i < count($filters['own_price_from']); $i++) {
                    $prices_where .= ($prices_where != '' ? " AND " : "") . "(o.own_minimum_price >=" . $filters['own_price_from'][$i] . " AND o.own_minimum_price <=" . $filters['own_price_to'][$i] . ")";
                }

                $where = $where . (($prices_where != "") ? ($where != '' ? " AND " : " WHERE ") . "($prices_where)" : "");
            }


            if (key_exists('room_type', $filters) && $filters['room_type'] != null && is_array($filters['room_type']) && count($filters['room_type']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_type IN (" . $this->getStringFromArray($filters['room_type']) . ")";

            if (key_exists('room_climatization', $filters) && $filters['room_climatization'] != null && $filters['room_climatization'] != 'null' && $filters['room_climatization'] != '')
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_climate LIKE '%" . $filters['room_climatization'] . "%'";

            if (key_exists('room_safe', $filters) && $filters['room_safe'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_safe = 1";

            if (key_exists('room_audiovisuals', $filters) && $filters['room_audiovisuals'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "(r.room_audiovisual <>'' OR r.room_audiovisual IS NOT NULL)";

            if (key_exists('room_kids', $filters) && $filters['room_kids'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_baby = 1";

            if (key_exists('room_smoker', $filters) && $filters['room_smoker'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_smoker = 1";

            if (key_exists('room_windows_total', $filters) && $filters['room_windows_total'] != null && is_array($filters['room_windows_total']) && count($filters['room_windows_total']) > 0) {
                $temp_array = $filters['room_windows_total'];

                if (in_array('+5', $temp_array)) {
                    $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_windows > 5";

                    if (($key = array_search('+5', $temp_array)) !== false) {
                        unset($temp_array[$key]);
                    }
                }
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_windows IN (" . $this->getStringFromArray($temp_array, false) . ")";
            }

            if (key_exists('room_balcony', $filters) && $filters['room_balcony'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_balcony = 1";

            if (key_exists('room_terraza', $filters) && $filters['room_terraza'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_terrace = 1";

            if (key_exists('room_courtyard', $filters) && $filters['room_courtyard'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_yard = 1";

            if (key_exists('room_bathroom', $filters) && $filters['room_bathroom'] != null && is_array($filters['room_bathroom']) && count($filters['room_bathroom']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_bathroom IN (" . $this->getStringFromArray($filters['room_bathroom']) . ")";

            if (key_exists('own_others_pets', $filters) && $filters['own_others_pets'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_pets = 1";

            if (key_exists('own_others_internet', $filters) && $filters['own_others_internet'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_internet = 1";

            if (key_exists('own_others_languages', $filters) && $filters['own_others_languages'] != null && is_array($filters['own_others_languages']) && count($filters['own_others_languages']) > 0) {
                $lang_where = "";

                for ($i = 0; $i < count($filters['own_others_languages']); $i++) {
                    $lang_where .= ($lang_where != '' ? " AND " : "") . "o.own_langs LIKE '" . $filters['own_others_languages'][$i] . "'";
                }

                $where = $where . (($lang_where != "") ? ($where != '' ? " AND " : " WHERE ") . "($lang_where)" : "");
            }

            if (key_exists('own_others_included', $filters) && $filters['own_others_included'] != null && is_array($filters['own_others_included']) && count($filters['own_others_included']) > 0) {
                for ($i = 0; $i < count($filters['own_others_languages']); $i++) {
                    switch ($filters['own_others_included'][$i]) {
                        case 'JACUZZY':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_jacuzee = 1";
                            break;
                        case 'SAUNA':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_sauna = 1";
                            break;
                        case 'POOL':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_piscina = 1";
                            break;
                    }
                }
            }

            if (key_exists('own_others_not_included', $filters) && $filters['own_others_not_included'] != null && is_array($filters['own_others_not_included']) && count($filters['own_others_not_included']) > 0) {
                for ($i = 0; $i < count($filters['own_others_not_included']); $i++) {
                    switch ($filters['own_others_not_included'][$i]) {
                        case 'BREAKFAST':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_breakfast = 1";
                            break;
                        case 'DINNER':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_dinner = 1";
                            break;
                        case 'LAUNDRY':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_laundry = 1";
                            break;
                        case 'PARKING':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_parking = 1";
                            break;
                    }
                }
            }

            if (key_exists('own_rooms_number', $filters) && $filters['own_rooms_number'] != null && is_array($filters['own_rooms_number']) && count($filters['own_rooms_number']) > 0) {
                $temp_array = $filters['own_rooms_number'];

                if (in_array('+5', $temp_array)) {
                    $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_rooms_total > 5";

                    if (($key = array_search('+5', $temp_array)) !== false) {
                        unset($temp_array[$key]);
                    }
                }
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_rooms_total IN (" . $this->getStringFromArray($temp_array, false) . ")";
            }
        }

        if ($where != '')
            $query_string = $query_string . $where;

        if ($order_by == "PRICE_LOW_HIGH")
            $order = " o.own_minimum_price ASC, o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC";
        else if ($order_by == "PRICE_HIGH_LOW")
            $order = " o.own_minimum_price DESC, o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC ";
        else if ($order_by == "BEST_VALUED")
            $order = " o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC ";
        else if ($order_by == "WORST_VALUED")
            $order = " o.own_rating ASC, o.own_comments_total ASC, count_reservations DESC ";
        else if ($order_by == "A_Z")
            $order = " o.own_name ASC, o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC ";
        else if ($order_by == "Z_A")
            $order = " o.own_name DESC, o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC ";
        else if ($order_by == "RESERVATIONS_HIGH_LOW")
            $order = " count_reservations DESC, o.own_rating DESC, o.own_comments_total DESC ";
        else if ($order_by == "RESERVATIONS_LOW_HIGH")
            $order = " count_reservations ASC, o.own_rating DESC, o.own_comments_total DESC ";
        else {
            $order = " o.own_minimum_price ASC, o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC ";
        }

        $query_string = $query_string . ' ORDER BY ' . $order;

        $query = $em->createQuery($query_string);

        if ($user_id != null)
            $query->setParameter('user_id', $user_id);

        if ($session_id != null)
            $query->setParameter('session_id', $session_id);

        if ($text != null && $text != '' && $text != 'null')
            $query->setParameter('text', "%" . $text . "%");

        if ($guest_total != null && $guest_total != 'null' && $guest_total != "")
            $query->setParameter('guests_total', ($guest_total != "+10" ? $guest_total : 11));

        if (isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != "")
            $query->setParameter('rooms_total', ($rooms_total != "+5" ? $rooms_total : 6));

        //$return_list = array();
        $results = $query->getResult();


        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "no_photo.png";
        }
        return $results;
    }

    /**
     * Muestra todas las casas que son top20, para mostrar en la portada
     * @param varchar $lang_code
     */
    function top20($locale = "ES", $category = null) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                         prov.prov_name as prov_name,
                         o.own_comments_total as comments_total,
                         (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                         (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as description,
                         (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         WHERE o.own_top_20=1
                           AND o.own_status = " . ownershipStatus::STATUS_ACTIVE;

        if ($category != null) {
            $query_string .= " AND LOWER(o.own_category) = '$category'";
        }

        $query_string .= " ORDER BY o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC";

        $results = $em->createQuery($query_string)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    public function top20_statistics() {
        $em = $this->getEntityManager();
        $query = "SELECT count(own.own_id) as premium_total,
                  (SELECT count(own1.own_id) FROM mycpBundle:ownership own1 WHERE own1.own_top_20 = 1 AND own1.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND LOWER(own1.own_category) = 'rango medio') as midrange_total,
                  (SELECT count(own2.own_id) FROM mycpBundle:ownership own2 WHERE own2.own_top_20 = 1 AND own2.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND own2.own_category = 'Económica') as economic_total
                  FROM mycpBundle:ownership own WHERE own.own_top_20 = 1 AND own.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND own.own_category = 'Premium'";
        return $em->createQuery($query)->getOneOrNullResult();
    }

    public function getSalersNames() {
        $em = $this->getEntityManager();
        $query = "SELECT DISTINCT own.own_saler as name FROM mycpBundle:ownership own ORDER BY own.own_saler";
        return $em->createQuery($query)->getResult();
    }

    /**
     * Devuelve un arreglo que contiene todas las categorias de casas posibles
     * @return type arreglo
     */
    function getOwnsCategories($own_ids = null) {
        $em = $this->getEntityManager();

        $owns_categories = array();
        $owns_categories[] = "Económica";
        $owns_categories[] = "Rango medio";
        $owns_categories[] = "Premium";

        $categories = array();

        if (isset($own_ids))
            $query_string = "SELECT count(o) as economic,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_category='Rango medio') as middle_range,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_category='Premium') as premium
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_category='Económica'";
        else
            $query_string = "SELECT count(o) as economic,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_category='Rango medio') as middle_range,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_category='Premium') as premium
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_category='Económica'";
        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $categories[] = array(trim("Económica"), $counts['economic']);
        $categories[] = array(trim("Rango medio"), $counts['middle_range']);
        $categories[] = array(trim("Premium"), $counts['premium']);

        return $categories;
    }

    function getOwnsPrices($own_ids = null) {
        $em = $this->getEntityManager();
        /* $prices = range(25, 200, 25);
          $prices[] = 300; */

        $prices_result = array();
        //$minimun_price = 0;
        //foreach ($prices as $price) {
        if (isset($own_ids))
            $query_string = "SELECT count(o) as primero,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_minimum_price< 50 AND o.own_minimum_price >=25) as segundo,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_minimum_price< 75 AND o2.own_minimum_price >=50) as tercero,
                         (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_id IN ($own_ids) AND o3.own_minimum_price< 100 AND o3.own_minimum_price >=75) as cuarto,
                         (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_id IN ($own_ids) AND o4.own_minimum_price< 125 AND o4.own_minimum_price >=100) as quinto,
                         (SELECT count(o5) FROM mycpBundle:ownership o5 WHERE o5.own_status = :own_status AND o5.own_id IN ($own_ids) AND o5.own_minimum_price< 150 AND o5.own_minimum_price >=125) as sexto,
                         (SELECT count(o6) FROM mycpBundle:ownership o6 WHERE o6.own_status = :own_status AND o6.own_id IN ($own_ids) AND o6.own_minimum_price< 175 AND o6.own_minimum_price >=150) as septimo,
                         (SELECT count(o7) FROM mycpBundle:ownership o7 WHERE o7.own_status = :own_status AND o7.own_id IN ($own_ids) AND o7.own_minimum_price< 200 AND o7.own_minimum_price >=175) as octavo,
                         (SELECT count(o8) FROM mycpBundle:ownership o8 WHERE o8.own_status = :own_status AND o8.own_id IN ($own_ids) AND o8.own_minimum_price< 300 AND o8.own_minimum_price >=200) as noveno
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_minimum_price< 25 AND o.own_minimum_price >=0";
        else
            $query_string = "SELECT count(o) as primero,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_minimum_price< 50 AND o.own_minimum_price >=25) as segundo,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_minimum_price< 75 AND o2.own_minimum_price >=50) as tercero,
                         (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_minimum_price< 100 AND o3.own_minimum_price >=75) as cuarto,
                         (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_minimum_price< 125 AND o4.own_minimum_price >=100) as quinto,
                         (SELECT count(o5) FROM mycpBundle:ownership o5 WHERE o5.own_status = :own_status AND o5.own_minimum_price< 150 AND o5.own_minimum_price >=125) as sexto,
                         (SELECT count(o6) FROM mycpBundle:ownership o6 WHERE o6.own_status = :own_status AND o6.own_minimum_price< 175 AND o6.own_minimum_price >=150) as septimo,
                         (SELECT count(o7) FROM mycpBundle:ownership o7 WHERE o7.own_status = :own_status AND o7.own_minimum_price< 200 AND o7.own_minimum_price >=175) as octavo,
                         (SELECT count(o8) FROM mycpBundle:ownership o8 WHERE o8.own_status = :own_status AND o8.own_minimum_price< 300 AND o8.own_minimum_price >=200) as noveno
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND ((o.own_minimum_price< 25 AND o.own_minimum_price >=0))";

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $prices_result[] = array(0, 25, $counts['primero']);
        $prices_result[] = array(25, 50, $counts['segundo']);
        $prices_result[] = array(50, 75, $counts['tercero']);
        $prices_result[] = array(75, 100, $counts['cuarto']);
        $prices_result[] = array(100, 125, $counts['quinto']);
        $prices_result[] = array(125, 150, $counts['sexto']);
        $prices_result[] = array(150, 175, $counts['septimo']);
        $prices_result[] = array(175, 200, $counts['octavo']);
        $prices_result[] = array(200, 300, $counts['noveno']);

        return $prices_result;
    }

    /**
     * Devuelve un arreglo con todos los tipos de casa posibles
     * @return type arreglo
     */
    //Yanet - Inicio
    function getOwnsTypes($own_ids = null) {
        $em = $this->getEntityManager();

        $owns_types = array();
        $owns_types[] = "Penthouse";
        $owns_types[] = "Villa con piscina";
        $owns_types[] = "Apartamento";
        $owns_types[] = "Propiedad completa";
        $owns_types[] = "Casa particular";

        $types = array();
        if (isset($own_ids))
            $query_string = "SELECT count(o) as penthouse,
                             (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_type='Villa con piscina') as villa,
                             (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_type='Apartamento') as apartamento,
                             (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_id IN ($own_ids) AND o3.own_type='Propiedad completa') as propiedad,
                             (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_id IN ($own_ids) AND o4.own_type='Casa particular') as casa
                             FROM mycpBundle:ownership o
                             WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_type='Penthouse'";
        else
            $query_string = "SELECT count(o) as penthouse,
                             (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_type='Villa con piscina') as villa,
                             (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_type='Apartamento') as apartamento,
                             (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_type='Propiedad completa') as propiedad,
                             (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_type='Casa particular') as casa
                             FROM mycpBundle:ownership o
                             WHERE o.own_status = :own_status AND o.own_type='Penthouse'";

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $types[] = array("Penthouse", $counts['penthouse']);
        $types[] = array("Villa con piscina", $counts['villa']);
        $types[] = array("Apartamento", $counts['apartamento']);
        $types[] = array("Propiedad completa", $counts['propiedad']);
        $types[] = array("Casa particular", $counts['casa']);

        return $types;
    }

    function getSearchStatistics() {
        $em = $this->getEntityManager();
        $statistics = array();

        $statistics['room_double'] = 0;
        $statistics['room_double_two_beds'] = 0;
        $statistics['room_simple'] = 0;
        $statistics['room_triple'] = 0;
        $statistics['room_climatization'] = 0;
        $statistics['room_audio_visuals'] = 0;
        $statistics['room_kids'] = 0;
        $statistics['room_smoker'] = 0;
        $statistics['room_safe'] = 0;
        $statistics['room_balcony'] = 0;
        $statistics['room_terrace'] = 0;
        $statistics['room_yard'] = 0;

        $statistics['own_bathroom_inner'] = 0;
        $statistics['own_bathroom_outer'] = 0;
        $statistics['own_bathroom_shared'] = 0;
        $statistics['own_water_sauna'] = 0;
        $statistics['own_water_jacuzzi'] = 0;
        $statistics['own_water_pool'] = 0;

        $statistics['own_services_breakfast'] = 0;
        $statistics['own_services_dinner'] = 0;
        $statistics['own_services_parking'] = 0;
        $statistics['own_services_pets'] = 0;
        $statistics['own_services_laundry'] = 0;
        $statistics['own_service_internet_email'] = 0;

        $statistics['own_lang_english'] = 0;
        $statistics['own_lang_french'] = 0;
        $statistics['own_lang_german'] = 0;
        $statistics['own_lang_italian'] = 0;

        $statistics['room_total_windows_1'] = 0;
        $statistics['room_total_windows_2'] = 0;
        $statistics['room_total_windows_3'] = 0;
        $statistics['room_total_windows_4'] = 0;
        $statistics['room_total_windows_5'] = 0;
        $statistics['room_total_windows_+5'] = 0;

        $statistics['rooms_total_1'] = 0;
        $statistics['rooms_total_2'] = 0;
        $statistics['rooms_total_3'] = 0;
        $statistics['rooms_total_4'] = 0;
        $statistics['rooms_total_5'] = 0;
        $statistics['rooms_total_+5'] = 0;

        $statistics['room_total_beds_1'] = 0;
        $statistics['room_total_beds_2'] = 0;
        $statistics['room_total_beds_3'] = 0;
        $statistics['room_total_beds_4'] = 0;
        $statistics['room_total_beds_5'] = 0;
        $statistics['room_total_beds_+5'] = 0;

        $own_ids = "0";

        $query_string = "SELECT DISTINCT o.own_id as own_id,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            o.own_facilities_breakfast as breakfast,
                            o.own_facilities_dinner as dinner,
                            o.own_facilities_parking as parking,
                            o.own_water_piscina as pool,
                            o.own_description_laundry as laundry,
                            o.own_description_internet as internet,
                            o.own_water_sauna as sauna,
                            o.own_description_pets as pets,
                            o.own_water_jacuzee as jacuzee,
                            o.own_langs as langs,
                            o.own_rooms_total
                            FROM mycpBundle:ownership o
                            WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE;
        $query = $em->createQuery($query_string);
        $own_list = $query->getResult();

        $query_string = "SELECT r FROM mycpBundle:room r join r.room_ownership o WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                         ORDER BY r.room_ownership ASC";
        $rooms = $em->createQuery($query_string)->getResult();

        foreach ($own_list as $own) {

            switch ($own['own_rooms_total']) {
                case 1: $statistics['rooms_total_1'] += 1;
                    break;
                case 2: $statistics['rooms_total_2'] += 1;
                    break;
                case 3: $statistics['rooms_total_3'] += 1;
                    break;
                case 4: $statistics['rooms_total_4'] += 1;
                    break;
                case 5: $statistics['rooms_total_5'] += 1;
                    break;
                default:
                    if ($own['own_rooms_total'] > 5) {
                        $statistics['rooms_total_+5'] += 1;
                        break;
                    }
            }

            if ($own['breakfast'] != null && $own['breakfast'])
                $statistics['own_services_breakfast'] += 1;

            if ($own['dinner'] != null && $own['dinner'])
                $statistics['own_services_dinner'] += 1;

            if ($own['parking'] != null && $own['parking'])
                $statistics['own_services_parking'] += 1;

            if ($own['pets'] != null && $own['pets'])
                $statistics['own_services_pets'] += 1;

            if ($own['laundry'] != null && $own['laundry'])
                $statistics['own_services_laundry'] += 1;

            if ($own['internet'] != null && $own['internet'])
                $statistics['own_service_internet_email'] += 1;

            if ($own['sauna'] != null && $own['sauna'])
                $statistics['own_water_sauna'] += 1;

            if ($own['pool'] != null && $own['pool'])
                $statistics['own_water_pool'] += 1;

            if ($own['jacuzee'] != null && $own['jacuzee'])
                $statistics['own_water_jacuzzi'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 0, 1) == "1")
                $statistics['own_lang_english'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 1, 1) == "1")
                $statistics['own_lang_french'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 2, 1) == "1")
                $statistics['own_lang_german'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 3, 1) == "1")
                $statistics['own_lang_italian'] += 1;
        }

        $is_room_individual = false;
        $is_room_double = false;
        $is_room_double_two_beds = false;
        $is_room_triple = false;
        $is_room_climatization = false;
        $is_room_audiovisual = false;
        $is_room_kids = false;
        $is_room_smoker = false;
        $is_room_safe = false;
        $is_room_windows = false;
        $is_room_balcony = false;
        $is_room_terrace = false;
        $is_room_yard = false;
        $is_room_bathromm_inner = false;
        $is_room_bathroom_outer = false;
        $is_room_bathroom_shared = false;
        $is_room_total_bed = false;
        $is_own_total_room = false;

        foreach ($rooms as $room) {
            $is_room_individual = false;
            $is_room_double = false;
            $is_room_double_two_beds = false;
            $is_room_triple = false;
            $is_room_climatization = false;
            $is_room_audiovisual = false;
            $is_room_kids = false;
            $is_room_smoker = false;
            $is_room_safe = false;
            $is_room_windows = false;
            $is_room_balcony = false;
            $is_room_terrace = false;
            $is_room_yard = false;
            $is_room_bathromm_inner = false;
            $is_room_bathroom_outer = false;
            $is_room_bathroom_shared = false;
            $is_room_total_bed = false;
            $is_own_total_room = false;

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación doble' && !$is_room_double) {
                $statistics['room_double'] += 1;
                $is_room_double = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación doble (Dos camas)' && !$is_room_double_two_beds) {
                $statistics['room_double_two_beds'] += 1;
                $is_room_double_two_beds = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación individual' && !$is_room_individual) {
                $statistics['room_simple'] += 1;
                $is_room_individual = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación Triple' && !$is_room_triple) {
                $statistics['room_triple'] += 1;
                $is_room_triple = true;
            }

            if ($room->getRoomClimate() != null && ($room->getRoomClimate() == 'Aire acondicionado' || $room->getRoomClimate() == 'Aire acondicionado / Ventilador') && !$is_room_climatization) {
                $statistics['room_climatization'] += 1;
                $is_room_climatization = true;
            }

            if ($room->getRoomAudiovisual() != null && $room->getRoomAudiovisual() != '' && !$is_room_audiovisual) {
                $statistics['room_audio_visuals'] += 1;
                $is_room_audiovisual = true;
            }

            if ($room->getRoomBaby() != null && $room->getRoomBaby() && !$is_room_kids) {
                $statistics['room_kids'] += 1;
                $is_room_kids = true;
            }

            if ($room->getRoomSmoker() != null && $room->getRoomSmoker() && !$is_room_smoker) {
                $statistics['room_smoker'] += 1;
                $is_room_smoker = true;
            }

            if ($room->getRoomSafe() != null && $room->getRoomSafe() && !$is_room_safe) {
                $statistics['room_safe'] += 1;
                $is_room_safe = true;
            }

            if ($room->getRoomWindows() != null && $room->getRoomWindows() > 0 && !$is_room_windows) {
                //$statistics['room_windows'] += 1;
                switch ($room->getRoomWindows()) {
                    case 1: $statistics['room_total_windows_1'] += 1;
                        break;
                    case 2: $statistics['room_total_windows_2'] += 1;
                        break;
                    case 3: $statistics['room_total_windows_3'] += 1;
                        break;
                    case 4: $statistics['room_total_windows_4'] += 1;
                        break;
                    case 5: $statistics['room_total_windows_5'] += 1;
                        break;
                    default:
                        if ($room->getRoomWindows() > 5) {
                            $statistics['room_total_windows_+5'] += 1;
                            break;
                        }
                }
                $is_room_windows = true;
            }

            if ($room->getRoomBeds() != null && $room->getRoomBeds() > 0 && !$is_room_total_bed) {
                //$statistics['room_windows'] += 1;
                switch ($room->getRoomBeds()) {
                    case 1: $statistics['room_total_beds_1'] += 1;
                        break;
                    case 2: $statistics['room_total_beds_2'] += 1;
                        break;
                    case 3: $statistics['room_total_beds_3'] += 1;
                        break;
                    case 4: $statistics['room_total_beds_4'] += 1;
                        break;
                    case 5: $statistics['room_total_beds_5'] += 1;
                        break;
                    default:
                        if ($room->getRoomBeds() > 5) {
                            $statistics['room_total_beds_+5'] += 1;
                            break;
                        }
                }
                $is_room_total_bed = true;
            }

            if ($room->getRoomBalcony() != null && $room->getRoomBalcony() > 0 && !$is_room_balcony) {
                $statistics['room_balcony'] += 1;
                $is_room_balcony = true;
            }

            if ($room->getRoomTerrace() != null && $room->getRoomTerrace() && !$is_room_terrace) {
                $statistics['room_terrace'] += 1;
                $is_room_terrace = true;
            }

            if ($room->getRoomYard() != null && $room->getRoomYard() && !$is_room_yard) {
                $statistics['room_yard'] += 1;
                $is_room_yard = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Interior privado' && !$is_room_bathromm_inner) {
                $statistics['own_bathroom_inner'] += 1;
                $is_room_bathromm_inner = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Exterior privado' && !$is_room_bathroom_outer) {
                $statistics['own_bathroom_outer'] += 1;
                $is_room_bathroom_outer = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Compartido' && !$is_room_bathroom_shared) {
                $statistics['own_bathroom_shared'] += 1;
                $is_room_bathroom_shared = true;
            }
        }

        return $statistics;
    }

    /* function getSearchStatisticsByIds($own_ids) {
      $em = $this->getEntityManager();

      if(isset($own_ids)){
      $query_string = "SELECT o.own_id as own_id,
      o.own_facilities_breakfast as breakfast,
      o.own_facilities_dinner as dinner,
      o.own_facilities_parking as parking,
      o.own_water_piscina as pool,
      o.own_description_laundry as laundry,
      o.own_description_internet as internet,
      o.own_water_sauna as sauna,
      o.own_description_pets as pets,
      o.own_water_jacuzee as jacuzee,
      o.own_langs as langs FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
      $own_list = $em->createQuery($query_string)->getResult();
      return $this->getSearchStatistics($own_list);
      }else
      {

      }
      } */

    function getCompleteListByIds($own_ids, $user_id, $session_id) {
        $em = $this->getEntityManager();
        $results = array();

        if (isset($own_ids)) {
            $query_string = "SELECT o.own_id as own_id,
                             o.own_name as own_name,
                            (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                            prov.prov_name as prov_name,
                            mun.mun_name as mun_name,
                            o.own_comments_total as comments_total,
                            o.own_rating as rating,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                            (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                            (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                            (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_id IN ($own_ids)";

            $results = $em->createQuery($query_string)->getResult();

            for ($i = 0; $i < count($results); $i++) {
                if ($results[$i]['photo'] == null)
                    $results[$i]['photo'] = "no_photo.png";
                else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                    $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getListByIds($own_ids) {
        $em = $this->getEntityManager();
        $results = array();

        if (isset($own_ids)) {
            $query_string = "SELECT o FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
            $results = $em->createQuery($query_string)->getResult();
        }
        return $results;
    }

    //Yanet - Fin

    /**
     * Devuelve un list con las ultimas casas agregadas
     * @return type list
     */
    function lastAdded($results_total = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                        (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                        prov.prov_name as prov_name,
                        mun.mun_name as mun_name,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_category as category,
                        o.own_type as type,
                        o.own_minimum_price as minimum_price,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                         ORDER BY o.own_id DESC";

        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function get_details($own_name, $locale = "ES", $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as ownname,
                        prov.prov_name as ownAddressProvince,
                        prov.prov_id as ownAddressProvince_id,
                        o.own_address_street as ownAddressStreet,
                        o.own_address_number as ownAddressNumber,
                        o.own_type as owntype,
                        mun.mun_name as ownaddressmunicipality,
                        mun.mun_id as ownaddressmunicipality_id,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_mcp_code as mycpcode,
                        o.own_category as category,
                        o.own_minimum_price as ownminimumprice,
                        o.own_geolocate_x as OwnGeolocateX,
                        o.own_geolocate_y as OwnGeolocateY,
                        o.own_facilities_breakfast as ownFacilitiesBreakfast,
                        o.own_facilities_breakfast_price as ownFacilitiesBreakfastPrice,
                        o.own_facilities_dinner as ownFacilitiesDinner,
                        o.own_facilities_dinner_price_from as ownFacilitiesDinnerPriceFrom,
                        o.own_facilities_dinner_price_to as ownFacilitiesDinnerPriceTo,
                        o.own_facilities_parking as ownFacilitiesParking,
                        o.own_facilities_parking_price as ownFacilitiesParkingPrice,
                        o.own_description_bicycle_parking as ownDescriptionBicycleParking,
                        o.own_maximun_number_guests as ownmaximumnumberguests,
                        o.own_description_pets as ownDescriptionPets,
                        o.own_description_laundry as ownDescriptionLaundry,
                        o.own_description_internet as ownDescriptionInternet,
                        o.own_water_jacuzee as ownWaterJacuzee,
                        o.own_water_sauna as ownWaterSauna,
                        o.own_water_piscina as ownWaterPiscina,
                        o.own_homeowner_1 as owner1,
                        o.own_homeowner_2 as owner2,
                        o.own_commission_percent as OwnCommissionPercent,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments,
                        (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as brief_description,
                        (SELECT min(dd.odl_description) FROM mycpBundle:ownershipDescriptionLang dd JOIN dd.odl_id_lang dl WHERE dd.odl_ownership = o.own_id AND dl.lang_code = '$locale') as description,
                        (SELECT kl.okl_keywords FROM mycpBundle:ownershipKeywordLang kl JOIN kl.okl_id_lang lang WHERE kl.okl_ownership = o.own_id AND lang.lang_code = '$locale') as keywords,
                        (SELECT count(o1.own_id) from mycpBundle:ownership o1 where o1.own_id = o.own_id AND o1.own_langs LIKE '1___') as english,
                        (SELECT count(o2.own_id) from mycpBundle:ownership o2 where o2.own_id = o.own_id AND o2.own_langs LIKE '_1__') as french,
                        (SELECT count(o3.own_id) from mycpBundle:ownership o3 where o3.own_id = o.own_id AND o3.own_langs LIKE '__1_') as german,
                        (SELECT count(o4.own_id) from mycpBundle:ownership o4 where o4.own_id = o.own_id AND o4.own_langs LIKE '___1') as italian
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_name = :own_name
                         ORDER BY o.own_id DESC";

        return $em->createQuery($query_string)->setParameter('own_name', $own_name)->getOneOrNullResult();
    }

    function get_details_by_code($own_mycp_code, $locale = "ES") {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as ownname,
                         s.status_id,
                        prov.prov_name as ownAddressProvince,
                        prov.prov_id as ownAddressProvince_id,
                        o.own_address_street as ownAddressStreet,
                        o.own_address_number as ownAddressNumber,
                        o.own_type as owntype,
                        mun.mun_name as ownaddressmunicipality,
                        mun.mun_id as ownaddressmunicipality_id,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_mcp_code as mycpcode,
                        o.own_category as category,
                        o.own_minimum_price as ownminimumprice,
                        o.own_geolocate_x as OwnGeolocateX,
                        o.own_geolocate_y as OwnGeolocateY,
                        o.own_facilities_breakfast as ownFacilitiesBreakfast,
                        o.own_facilities_breakfast_price as ownFacilitiesBreakfastPrice,
                        o.own_facilities_dinner as ownFacilitiesDinner,
                        o.own_facilities_dinner_price_from as ownFacilitiesDinnerPriceFrom,
                        o.own_facilities_dinner_price_to as ownFacilitiesDinnerPriceTo,
                        o.own_facilities_parking as ownFacilitiesParking,
                        o.own_facilities_parking_price as ownFacilitiesParkingPrice,
                        o.own_description_bicycle_parking as ownDescriptionBicycleParking,
                        o.own_maximun_number_guests as ownmaximumnumberguests,
                        o.own_description_pets as ownDescriptionPets,
                        o.own_description_laundry as ownDescriptionLaundry,
                        o.own_description_internet as ownDescriptionInternet,
                        o.own_water_jacuzee as ownWaterJacuzee,
                        o.own_water_sauna as ownWaterSauna,
                        o.own_water_piscina as ownWaterPiscina,
                        o.own_homeowner_1 as owner1,
                        o.own_homeowner_2 as owner2,
                        o.own_commission_percent as OwnCommissionPercent,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments,
                        (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as brief_description,
                        (SELECT min(dd.odl_description) FROM mycpBundle:ownershipDescriptionLang dd JOIN dd.odl_id_lang dl WHERE dd.odl_ownership = o.own_id AND dl.lang_code = '$locale') as description,
                        (SELECT kl.okl_keywords FROM mycpBundle:ownershipKeywordLang kl JOIN kl.okl_id_lang lang WHERE kl.okl_ownership = o.own_id AND lang.lang_code = '$locale') as keywords,
                        (SELECT count(o1.own_id) from mycpBundle:ownership o1 where o1.own_id = o.own_id AND o1.own_langs LIKE '1___') as english,
                        (SELECT count(o2.own_id) from mycpBundle:ownership o2 where o2.own_id = o.own_id AND o2.own_langs LIKE '_1__') as french,
                        (SELECT count(o3.own_id) from mycpBundle:ownership o3 where o3.own_id = o.own_id AND o3.own_langs LIKE '__1_') as german,
                        (SELECT count(o4.own_id) from mycpBundle:ownership o4 where o4.own_id = o.own_id AND o4.own_langs LIKE '___1') as italian
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status s
                         WHERE o.own_mcp_code = :own_mycp_code
                         ORDER BY o.own_id DESC";

        return $em->createQuery($query_string)->setParameter('own_mycp_code', $own_mycp_code)->getOneOrNullResult();
    }

    function getByCategory($category, $results_total = null, $exclude_id = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = '';
        if ($exclude_id == null)
            $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                        (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                        prov.prov_name as prov_name,
                        mun.mun_name as mun_name,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_category as category,
                        o.own_type as type,
                        o.own_minimum_price as minimum_price,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_category= :category
                           AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                         ORDER BY o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC";
        else
            $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                         o.own_type as own_type,
                        (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                        prov.prov_name as prov_name,
                        mun.mun_name as mun_name,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_category as category,
                        o.own_type as type,
                        o.own_minimum_price as minimum_price,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_category= :category
                           AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                           AND o.own_id <> $exclude_id
                         ORDER BY o.own_rating DESC, o.own_comments_total DESC, count_reservations DESC";

        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setParameter('category', $category)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->setParameter('category', $category)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getPhotos($ownid) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if (file_exists(realpath("uploads/ownershipImages/" . $photo->getOwnPhoPhoto()->getPhoName())))
                $photos[] = $photo->getOwnPhoPhoto();
        }

        return $photos;
    }

    function getPhotosAndDescription($ownid, $lang_code) {

        $em = $this->getEntityManager();
        $query_string = "SELECT p.pho_name as photo_name,
                         (SELECT min(pl.pho_lang_description) FROM mycpBundle:photoLang pl
                         JOIN pl.pho_lang_id_lang l WHERE l.lang_code='$lang_code' AND pl.pho_lang_id_photo=p.pho_id) as photo_description
                         FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if (file_exists(realpath("uploads/ownershipImages/" . $photo["photo_name"])))
                $photos[] = array(
                    'photo_name' => $photo["photo_name"],
                    'photo_description' => $photo["photo_description"]
                );
        }

        return $photos;
    }

    function getOwnershipForAutocomplete_ByName($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_name LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getOwnershipForAutocomplete_ByCode($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_mcp_code LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_mcp_code ASC");
        return $query->getResult();
    }

    function getPublicOwnerships() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    private function getStringFromArray($array, $has_string_items = true) {
        if (is_array($array)) {
            $quotas_element = (($has_string_items) ? "'" : "");
            $string_value = $quotas_element . "0" . $quotas_element;

            foreach ($array as $item) {
                $string_value .= "," . $quotas_element . $item . $quotas_element;
            }
            return $string_value;
        }
        return null;
    }

    function get_best_ownership() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o
            FROM mycpBundle:ownership o
            WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
              AND o.own_rating >= 4
            ORDER BY o.own_rating DESC, o.own_comments_total DESC");
        return $query->getResult();
    }

    function get_voted_best_ownerships() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
                          AND o.own_comments_total > 0
                        ORDER BY o.own_rating DESC, o.own_comments_total DESC";

        return $em->createQuery($query_string)->getResult();
    }

    function get_photos_array($own_list) {
        $photos = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $photos[$own->getOwnId()] = $this->get_ownership_photo($own->getOwnId());
            }
        }
        return $photos;
    }

    function get_ownership_photo($own_id) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                        JOIN op.own_pho_photo p
                        WHERE op.own_pho_own = " . $own_id .
                " ORDER BY p.pho_order ASC";
        $results = $em->createQuery($query_string)->setMaxResults(1)->getResult();
        $ownership_photo = ($results != null && count($results) > 0) ? $results[0] : null;
        $photo = null;
        if ($ownership_photo != null) {
            $photo_name = $ownership_photo->getOwnPhoPhoto()->getPhoName();

            if (file_exists(realpath("uploads/ownershipImages/" . $photo_name))) {
                $photo = $photo_name;
            } else {
                $photo = 'no_photo.png';
            }
        } else {
            $photo = 'no_photo.png';
        }
        return $photo;
    }

    function get_rooms_array($own_list) {
        $em = $this->getEntityManager();
        $rooms = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $rooms[$own->getOwnId()] = count($em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $own->getOwnId())));
            }
        }
        return $rooms;
    }

    function get_counts_for_search($own_list) {
        $em = $this->getEntityManager();
        $counts = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $own_id = $own->getOwnId();
                $query = $em->createQuery("SELECT count(res) as reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = $own_id)  as comments
                        FROM mycpBundle:generalReservation res
                        WHERE res.gen_res_own_id = $own_id
                        AND res.gen_res_status=" . generalReservation::STATUS_RESERVED);
                $counts[$own_id] = $query->getArrayResult();
            }
        }

        return $counts;
    }

    public function autocomplete_text_list() {
        //$term = $request->get('term');
        $em = $this->getEntityManager();
        $provinces = $em->getRepository('mycpBundle:province')->getProvinces();
        $municipalities = $em->getRepository('mycpBundle:municipality')->get_municipalities();
        $ownerships = $em->getRepository('mycpBundle:ownership')->getPublicOwnerships();

        $result = array();
        foreach ($provinces as $prov) {
            $result[] = $prov->getProvName();
        }

        foreach ($municipalities as $mun) {
            if (!array_search($mun->getMunName(), $result))
                $result[] = $mun->getMunName();
        }

        foreach ($ownerships as $own) {
            if (!array_search($own->getOwnName(), $result))
                $result[] = $own->getOwnName();

            if (!array_search($own->getOwnMcpCode(), $result))
                $result[] = $own->getOwnMcpCode();
        }

        return json_encode($result);
    }

    public function getNotSynchronized() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_sync_st<>" . "'" . SyncStatuses::SYNC . "'";

        return $em->createQuery($query_string)->getResult();
    }

    public function setAllSync() {
        $em = $this->getEntityManager();
        foreach ($this->getHousesToOfflineApp() as $_house) {
            $_house->setOwnSync(true);
            $em->persist($_house);
        }
        $em->flush();
    }

}
