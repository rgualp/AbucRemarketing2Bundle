<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\QueryBuilder;
use MyCp\mycpBundle\Entity\ownership;
use MyCp\mycpBundle\Entity\ownershipDescriptionLang;
use MyCp\mycpBundle\Entity\ownershipGeneralLang;
use MyCp\mycpBundle\Entity\ownershipKeywordLang;
use MyCp\mycpBundle\Entity\room;
use MyCp\mycpBundle\Entity\userCasa;
use MyCp\mycpBundle\Helpers\OrderByHelper;
use MyCp\mycpBundle\Helpers\OwnershipStatuses;
use MyCp\mycpBundle\Helpers\SyncStatuses;
use MyCp\mycpBundle\Entity\ownershipStatus;
use MyCp\mycpBundle\Helpers\Dates;
use MyCp\mycpBundle\Helpers\SearchUtils;
use MyCp\mycpBundle\Helpers\FilterHelper;
use MyCp\mycpBundle\Service\TranslatorResponseStatusCode;

/**
 * ownershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ownershipRepository extends EntityRepository {

    function insert($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller, $translator, $container) {
        $active_top_20 = (isset($data['top_20'])) ? 1 : 0;
        $active_not_recommendable = (isset($data['not_recommendable'])) ? 1 : 0;
        $active_selection = (isset($data['selection'])) ? 1 : 0;
        $active_inmediate_booking = (isset($data['inmediate_booking'])) ? 1 : 0;
        $water_jacuzee = (isset($data['water_jacuzee'])) ? 1 : 0;
        $water_sauna = (isset($data['water_sauna'])) ? 1 : 0;
        $water_pool = (isset($data['water_piscina'])) ? 1 : 0;
        $cubacoupon = (isset($data['cubacoupon'])) ? 1 : 0;

        //languages
        $ownership_english_lang = (isset($data['ownership_english_lang'])) ? 1 : 0;
        $ownership_french_lang = (isset($data['ownership_french_lang'])) ? 1 : 0;
        $ownership_german_lang = (isset($data['ownership_german_lang'])) ? 1 : 0;
        $ownership_italian_lang = (isset($data['ownership_italian_lang'])) ? 1 : 0;

        $langs_string = $ownership_english_lang . $ownership_french_lang . $ownership_german_lang . $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = new ownership();
        $ownership->setOwnLangs($langs_string)
            ->setOwnName($data['ownership_name'])
            ->setOwnLicenceNumber($data['ownership_licence_number'])
            //->setOwnMcpCode($data['ownership_mcp_code']);
            ->setOwnAddressStreet($data['ownership_address_street'])
            ->setOwnAddressNumber($data['ownership_address_number'])
            ->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1'])
            ->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);

        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov)
            ->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));

        if ($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $ownership->setOwnMobileNumber($data['ownership_mobile_number'])
            ->setOwnHomeowner1($data['ownership_homeowner_1'])
            ->setOwnHomeowner2($data['ownership_homeowner_2'])
            ->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode())
            ->setOwnPhoneNumber($data['ownership_phone_number'])
            ->setOwnEmail1($data['ownership_email_1'])
            ->setOwnEmail2($data['ownership_email_2'])
            ->setOwnCategory($data['ownership_category'])
            ->setOwnType($data['ownership_type'])
            ->setOwnFacilitiesBreakfast($data['facilities_breakfast'])
            ->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price'])
            ->setOwnFacilitiesDinner($data['facilities_dinner'])
            ->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from'])
            ->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to'])
            ->setOwnFacilitiesParking($data['facilities_parking'])
            ->setOwnFacilitiesParkingPrice($data['facilities_parking_price'])
            ->setOwnFacilitiesNotes($data['facilities_notes'])
            ->setOwnDescriptionBicycleParking($data['description_bicycle_parking'])
            ->setOwnDescriptionPets($data['description_pets'])
            ->setOwnDescriptionLaundry($data['description_laundry'])
            ->setOwnDescriptionInternet($data['description_internet'])
            ->setOwnGeolocateX($data['geolocate_x'])
            ->setOwnGeolocateY($data['geolocate_y'])
            ->setOwnTop20($active_top_20)
            ->setOwnSelection($active_selection)
            ->setOwnInmediateBooking($active_inmediate_booking)
            ->setOwnNotRecommendable($active_not_recommendable)
            ->setOwnCubaCoupon($cubacoupon);

        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);

        if (!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);

        $ownership->setOwnStatus($status)
            ->setOwnRoomsTotal($data['count_rooms'])
            ->setOwnComment($data['comment'])
            ->setOwnCommissionPercent($data['ownership_percent_commission'])
            ->setOwnSaler($data['ownership_saler'])
            ->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']))
            ->setOwnLastUpdate(new \DateTime())
            ->setOwnCreationDate(new \DateTime());
        //var_dump($data);
        //exit();

        $ownership->setOwnCommentsTotal(0)
            ->setOwnMaximumNumberGuests(0)
            ->setOwnRating(0)
            ->setOwnMaximumPrice(0)
            ->setOwnMinimumPrice(0)
            ->setOwnRoomsTotal(0)
            ->setOwnWaterJacuzee($water_jacuzee)
            ->setOwnWaterSauna($water_sauna)
            ->setOwnWaterPiscina($water_pool);

        /*Si el estado es activo directamente, publicar la casa*/
        if($status->getStatusId() == ownershipStatus::STATUS_ACTIVE)
            $ownership->setOwnPublishDate (new \DateTime());

        $em->persist($ownership);

        $keys = array_keys($data);

        $targetLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "DE"));
        $sourceLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "EN"));
        foreach ($keys as $item) {
            if (strpos($item, 'ownership_language') !== false) {

                $id = substr($item, 19, strlen($item));
                $ogl = new ownershipGeneralLang();
                $ogl->setOglIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $ogl->setOglOwnership($ownership);
                $em->persist($ogl);
            }

            if (strpos($item, 'description_desc') !== false) {
                $id = substr($item, 17, strlen($item));
                $currentLanguage = $em->getRepository('mycpBundle:lang')->find($id);
                $briefDescription = $data['description_brief_desc_' . $id];
                $description = $data['description_desc_' . $id];
                $translated = false;

                if($currentLanguage->getLangId() == $targetLanguage->getLangId()) {
                   $translatedArray = $this->doTranslations("en", "de", $translator, array("briefDescription" => $briefDescription, "description" => $description),
                        array("briefDescription" => $data["description_brief_desc_".$sourceLanguage->getLangId()],
                            "description" => $data["description_desc_".$sourceLanguage->getLangId()]),
                        false);

                    $briefDescription = $translatedArray["briefDescription"];
                    $description = $translatedArray["description"];
                    $translated = $translatedArray["translated"];
                }

                //Son las descripciones de lenguajes que no son el target (DE) o que no necesitan traducciÃ³n
                    $odl = new ownershipDescriptionLang();
                    $odl->setOdlIdLang($currentLanguage)
                        ->setOdlDescription($description)
                        ->setOdlBriefDescription($briefDescription)
                        ->setOdlOwnership($ownership)
                        ->setOdlAutomaticTranslation($translated);

                    $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }

        $ownership->setOwnRoomsTotal($data['count_rooms']);

        $maximum_guest_total = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {
            $doOperations = ($data['room_type_' . $e] != "" && $data['room_beds_number_' . $e] != ""
                && $data['room_price_up_to_' . $e] != "" && $data['room_price_down_to_' . $e] != ""
                && $data['room_climate_' . $e] != "" && $data['room_audiovisual_' . $e] != "" && $data['room_bathroom_' . $e] != ""
                && $data['room_windows_' . $e] != "" && $data['room_balcony_' . $e] != ""
            );

            if ($doOperations) {
                $room = new room();
                $room->setRoomType($data['room_type_' . $e]);
                $room->setRoomBeds($data['room_beds_number_' . $e]);
                //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
                $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
                //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
                $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);

                if (isset($data['room_price_special_' . $e]))
                    $room->setRoomPriceSpecial($data['room_price_special_' . $e]);

                $room->setRoomClimate($data['room_climate_' . $e]);
                $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
                $room->setRoomSmoker($data['room_smoker_' . $e]);
                $room->setRoomSafe($data['room_safe_box_' . $e]);
                $room->setRoomBaby($data['room_baby_' . $e]);
                $room->setRoomBathroom($data['room_bathroom_' . $e]);
                $room->setRoomStereo($data['room_stereo_' . $e]);
                $room->setRoomWindows($data['room_windows_' . $e]);
                $room->setRoomBalcony($data['room_balcony_' . $e]);
                $room->setRoomTerrace($data['room_terrace_' . $e]);
                $room->setRoomYard($data['room_yard_' . $e]);
                $room->setRoomOwnership($ownership);
                $room->setRoomNum($e);
                $room->setRoomActive(true);
                $em->persist($room);

                if ($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice())
                    $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

                if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                    $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

                if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice())
                    $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

                $maximum_guest_total += $room->getMaximumNumberGuests();
            }
        }

        $ownership->setOwnMaximumNumberGuests($maximum_guest_total);
        $em->persist($ownership);

        //save client casa
        if ($new_user && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUser($ownership, $file, $factory, $send_creation_mail, $controller, $container);
        }

        //save owner photo
        $this->saveOwnerPhoto($em, $ownership, $dir, $request);

        $em->flush();

        return $ownership;
    }

    function edit($data, $request, $dir, $factory, $new_user, $send_creation_mail, $controller, $translator, $container) {
        $id_ownership = $data['edit_ownership'];

        $active_top_20 = (isset($data['top_20'])) ? 1 : 0;
        $active_not_recommendable = (isset($data['not_recommendable'])) ? 1 : 0;
        $active_selection = (isset($data['selection'])) ? 1 : 0;
        $active_inmediate_booking = (isset($data['inmediate_booking'])) ? 1 : 0;
        $water_jacuzee = (isset($data['water_jacuzee'])) ? 1 : 0;
        $water_sauna = (isset($data['water_sauna'])) ? 1 : 0;
        $water_pool = (isset($data['water_piscina'])) ? 1 : 0;
        $cubacoupon = (isset($data['cubacoupon'])) ? 1 : 0;

        //languages
        $ownership_english_lang = (isset($data['ownership_english_lang'])) ? 1 : 0;
        $ownership_french_lang = (isset($data['ownership_french_lang'])) ? 1 : 0;
        $ownership_german_lang = (isset($data['ownership_german_lang'])) ? 1 : 0;
        $ownership_italian_lang = (isset($data['ownership_italian_lang'])) ? 1 : 0;

        $langs_string = $ownership_english_lang .
                $ownership_french_lang . $ownership_german_lang .
                $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = $em->getRepository('mycpBundle:ownership')->find($id_ownership);
        $old_status = $ownership->getOwnStatus();

        $ownership->setOwnLangs($langs_string)
            ->setOwnName($data['ownership_name'])
            ->setOwnLicenceNumber($data['ownership_licence_number'])
        //  ->setOwnMcpCode($data['ownership_mcp_code'])
            ->setOwnAddressStreet($data['ownership_address_street'])
            ->setOwnAddressNumber($data['ownership_address_number'])
            ->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1'])
            ->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);

        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov)
            ->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']))
            ->setOwnMobileNumber($data['ownership_mobile_number'])
            ->setOwnHomeowner1($data['ownership_homeowner_1'])
            ->setOwnHomeowner2($data['ownership_homeowner_2'])
            ->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode())
            ->setOwnPhoneNumber($data['ownership_phone_number'])
            ->setOwnEmail1($data['ownership_email_1'])
            ->setOwnEmail2($data['ownership_email_2'])
            ->setOwnCategory($data['ownership_category'])
            ->setOwnType($data['ownership_type'])
            ->setOwnFacilitiesBreakfast($data['facilities_breakfast'])
            ->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price'])
            ->setOwnFacilitiesDinner($data['facilities_dinner'])
            ->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from'])
            ->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to'])
            ->setOwnFacilitiesParking($data['facilities_parking'])
            ->setOwnFacilitiesParkingPrice($data['facilities_parking_price'])
            ->setOwnFacilitiesNotes($data['facilities_notes'])
            ->setOwnDescriptionBicycleParking($data['description_bicycle_parking'])
            ->setOwnDescriptionPets($data['description_pets'])
            ->setOwnDescriptionLaundry($data['description_laundry'])
            ->setOwnDescriptionInternet($data['description_internet'])
            ->setOwnGeolocateX($data['geolocate_x'])
            ->setOwnGeolocateY($data['geolocate_y'])
            ->setOwnTop20($active_top_20)
            ->setOwnSelection($active_selection)
            ->setOwnInmediateBooking($active_inmediate_booking)
            ->setOwnNotRecommendable($active_not_recommendable)
            ->setOwnCubaCoupon($cubacoupon);

        if ($data['ownership_destination'] != 0) {
            $destination = $em->getRepository('mycpBundle:destination')->find($data['ownership_destination']);
            $ownership->setOwnDestination($destination);
        }

        $status = $em->getRepository('mycpBundle:ownershipStatus')->find($data['status']);
        if (!isset($status))
            $status = $em->getRepository('mycpBundle:ownershipStatus')->find(ownershipStatus::STATUS_IN_PROCESS);
        $ownership->setOwnStatus($status)
            ->setOwnComment($data['comment']);

        $old_rooms = $em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $data['edit_ownership']));
        $ownership->setOwnCommissionPercent($data['ownership_percent_commission'])
            ->setOwnLastUpdate(new \DateTime())
            ->setOwnSaler($data['ownership_saler']);

        if (isset($data['ownership_visit_date']))
            $ownership->setOwnVisitDate(Dates::createFromString($data['ownership_visit_date']));

        $ownership->setOwnWaterJacuzee($water_jacuzee)
            ->setOwnWaterSauna($water_sauna)
            ->setOwnWaterPiscina($water_pool)
            ->setOwnMaximumNumberGuests(0)
            ->setOwnMaximumPrice(0)
            ->setOwnMinimumPrice(0)
            ->setOwnRoomsTotal(0);
        $em->persist($ownership);

        $query = $em->createQuery("DELETE
            mycpBundle:ownershipGeneralLang ogl WHERE
            ogl.ogl_ownership=$id_ownership");
        $query->execute();

        $keys = array_keys($data);
        $targetLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "DE"));
        $sourceLanguage = $em->getRepository('mycpBundle:lang')->findOneBy(array("lang_code" => "EN"));

        foreach ($keys as $item) {
            if (strpos($item, 'description_desc') !== false) {
                $id = substr($item, 17, strlen($item));
                $currentLanguage = $em->getRepository('mycpBundle:lang')->find($id);
                $briefDescription = $data['description_brief_desc_' . $id];
                $description = $data['description_desc_' . $id];
                $translated = false;
                $odl = $em->getRepository('mycpBundle:ownershipDescriptionLang')->getDescriptionsByAccommodation($ownership, $currentLanguage->getLangCode());

                if($odl == null)
                    $odl = new ownershipDescriptionLang();

                if($currentLanguage->getLangId() == $targetLanguage->getLangId()) {
                    $storedSourceDescription = $em->getRepository('mycpBundle:ownershipDescriptionLang')->getDescriptionsByAccommodation($ownership, "EN");

                    if($storedSourceDescription == null)
                        $storedSourceDescription = new ownershipDescriptionLang();



                    $translatedArray = $this->doTranslationsInEditMode("en", "de", $translator, array("briefDescription" => $briefDescription, "description" => $description),
                        array("briefDescription" => $data["description_brief_desc_".$sourceLanguage->getLangId()],
                            "description" => $data["description_desc_".$sourceLanguage->getLangId()]),$storedSourceDescription, $odl);

                    $briefDescription = $translatedArray["briefDescription"];
                    $description = $translatedArray["description"];
                    $translated = ($translatedArray["translated"]) ? true: $translated;
                }

                if($odl == null)
                    $odl = new ownershipDescriptionLang();
                else if(!$translated) //Para evitar que se elimine la bandera cuando no hay traducciones
                {
                   $translated = ($description == $odl->getOdlDescription()) ? $odl->getOdlAutomaticTranslation(): false;
                }

                $odl->setOdlIdLang($currentLanguage)
                    ->setOdlDescription($description)
                    ->setOdlBriefDescription($briefDescription)
                    ->setOdlOwnership($ownership)
                    ->setOdlAutomaticTranslation($translated);

                $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                if (array_key_exists('kw_id_' . $id, $data))
                    $okl = $em->getRepository('mycpBundle:ownershipKeywordLang')->find($data['kw_id_' . $id]);
                else
                    $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }
        $maximum_guest_total = 0;
        $roomsActiveTotal = 0;
        for ($e = 1; $e <= $data['count_rooms']; $e++) {

            $doOperations = ($data['room_type_' . $e] != "" && $data['room_beds_number_' . $e] != ""
                && $data['room_price_up_to_' . $e] != "" && $data['room_price_down_to_' . $e] != ""
                && $data['room_climate_' . $e] != "" && $data['room_audiovisual_' . $e] != "" && $data['room_bathroom_' . $e] != ""
                && $data['room_windows_' . $e] != "" && $data['room_balcony_' . $e] != ""
            );

            //if ($doOperations) {
                if (array_key_exists('room_id_' . $e, $data))
                    $room = $em->getRepository('mycpBundle:room')->find($data['room_id_' . $e]);
                else {
                    $room = new room();
                    $room->setRoomActive(true);
                }

                if (isset($old_rooms[$e - 1])) {
                    $metadata = $em->getClassMetadata(get_class($room));
                    $metadata->setIdGeneratorType(ClassMetadata::GENERATOR_TYPE_NONE);
                    //$room->setRoomId($old_rooms[$e - 1]->getRoomId());
                }

                if ($room->getRoomActive())
                    $roomsActiveTotal++;

                $room->setRoomType($data['room_type_' . $e]);
                $room->setRoomBeds($data['room_beds_number_' . $e]);
                //$room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
                $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
                //$room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
                $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);

                if (isset($data['room_price_special_' . $e]))
                    $room->setRoomPriceSpecial($data['room_price_special_' . $e]);

                $room->setRoomClimate($data['room_climate_' . $e]);
                $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
                $room->setRoomSmoker($data['room_smoker_' . $e]);
                $room->setRoomSafe($data['room_safe_box_' . $e]);
                $room->setRoomBaby($data['room_baby_' . $e]);
                $room->setRoomBathroom($data['room_bathroom_' . $e]);
                $room->setRoomStereo($data['room_stereo_' . $e]);
                $room->setRoomWindows($data['room_windows_' . $e]);
                $room->setRoomBalcony($data['room_balcony_' . $e]);
                $room->setRoomTerrace($data['room_terrace_' . $e]);
                $room->setRoomYard($data['room_yard_' . $e]);
                $room->setRoomOwnership($ownership);
                $room->setRoomNum($e);
                $em->persist($room);

                if (($ownership->getOwnMinimumPrice() == 0 ||
                        $room->getRoomPriceDownTo() < $ownership->getOwnMinimumPrice()) && $room->getRoomActive()
                )
                    $ownership->setOwnMinimumPrice($room->getRoomPriceDownTo());

                if (($ownership->getOwnMaximumPrice() == 0 ||
                        $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice()) && $room->getRoomActive()
                )
                    $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

                if (($ownership->getOwnMaximumPrice() == 0 ||
                        $room->getRoomPriceSpecial() > $ownership->getOwnMaximumPrice()) && $room->getRoomActive()
                )
                    $ownership->setOwnMaximumPrice($room->getRoomPriceSpecial());

                if ($room->getRoomActive()) {
                    $maximum_guest_total += $room->getMaximumNumberGuests();
                }
                $ownership->setOwnMaximumNumberGuests($maximum_guest_total);
           // }
        }

        $ownership->setOwnRoomsTotal($roomsActiveTotal);

        $em->persist($ownership);

        //save client casa
        if ($new_user && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE) {
            $file = $request->files->get('user_photo');
            $em->getRepository('mycpBundle:userCasa')->createUser($ownership, $file, $factory, $send_creation_mail, $controller,$container);
        }

        //If the status of the accommodation change from active to inactive, then the userCasa account associated must be set to disabled
        if ($old_status->getStatusId() == ownershipStatus::STATUS_ACTIVE && $status->getStatusId() == ownershipStatus::STATUS_INACTIVE)
            $em->getRepository('mycpBundle:userCasa')->changeStatus($ownership->getOwnId(), false);

        if ($old_status->getStatusId() != ownershipStatus::STATUS_ACTIVE && $status->getStatusId() == ownershipStatus::STATUS_ACTIVE)
            $em->getRepository('mycpBundle:userCasa')->changeStatus($ownership->getOwnId(), true);

        //save owner photo
        $this->saveOwnerPhoto($em, $ownership, $dir, $request);

        $em->flush();
        return $ownership;
    }

    private function doTranslations($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray)
    {
        $briefDescription = $targetLanguageDescriptionsArray["briefDescription"];
        $description = $targetLanguageDescriptionsArray["description"];
        $sourceBriefDescription = $sourceLanguageDescriptionArray["briefDescription"];
        $sourceDescription = $sourceLanguageDescriptionArray["description"];
        $translated = false;

        //Solo traducir descripcion breve si la descripcion breve en aleman estÃ¡ vacÃ­a, si la descripcion breve en ingles tiene texto y si la descripcion en ingles esta vacÃ­a
        if($briefDescription == "" && $description == ""  && $sourceBriefDescription != "" && $sourceDescription != "")
        {
            $response = $translator->multipleTranslations(array($sourceDescription, $sourceBriefDescription), $sourceLanguageCode, $targetLanguageCode);

            if($response[0]->getCode() == TranslatorResponseStatusCode::STATUS_200)
            {
                $description = $response[0]->getTranslation();
                $translated = true;
            }

            if($response[1]->getCode() == TranslatorResponseStatusCode::STATUS_200)
            {
                $briefDescription = $response[1]->getTranslation();
                //$translated = true;
            }
        }
        else if($briefDescription == ""  && $sourceBriefDescription != "")
        {
            $response = $translator->translate($sourceBriefDescription, $sourceLanguageCode, $targetLanguageCode);

            if($response->getCode() == TranslatorResponseStatusCode::STATUS_200)
            {
                $briefDescription = $response->getTranslation();
                //$translated = true;
            }

        }
        else if($description == ""  && $sourceDescription != "")
        {
            $response = $translator->translate($sourceDescription, $sourceLanguageCode, $targetLanguageCode);

            if($response->getCode() == TranslatorResponseStatusCode::STATUS_200)
            {
                $description = $response->getTranslation();
                $translated = true;
            }
        }

        return  array("briefDescription" => $briefDescription, "description" => $description, "translated" => $translated);
    }

    private function doTranslationsInEditMode($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray, $storedSourceDescription, $storedTargetDescription)
    {
        $responseTranslated = $this->doTranslations($sourceLanguageCode, $targetLanguageCode, $translator, $targetLanguageDescriptionsArray, $sourceLanguageDescriptionArray);

        $briefDescription = $responseTranslated["briefDescription"];
        $description = $responseTranslated["description"];
        $translated = $responseTranslated["translated"];

        if(!$translated)
        {
            $sourceBriefDescription = $sourceLanguageDescriptionArray["briefDescription"];
            $sourceDescription = $sourceLanguageDescriptionArray["description"];

            if($storedTargetDescription->getOdlBriefDescription() == $briefDescription && $sourceBriefDescription != $storedTargetDescription->getOdlBriefDescription() &&
                $storedTargetDescription->getOdlDescription() == $description && $sourceDescription != $storedTargetDescription->getOdlDescription())
            {
                $response = $translator->multipleTranslations(array($sourceDescription, $sourceBriefDescription), $sourceLanguageCode, $targetLanguageCode);

                if($response[0]->getCode() == TranslatorResponseStatusCode::STATUS_200)
                {
                    $description = $response[0]->getTranslation();
                    $translated = true;
                }

                if($response[1]->getCode() == TranslatorResponseStatusCode::STATUS_200)
                {
                    $briefDescription = $response[1]->getTranslation();
                    //$translated = true;
                }
            }
            else if($storedTargetDescription->getOdlBriefDescription() == $briefDescription && $sourceBriefDescription != $storedTargetDescription->getOdlBriefDescription())
            {
                $response = $translator->translate($sourceBriefDescription, $sourceLanguageCode, $targetLanguageCode);

                if($response->getCode() == TranslatorResponseStatusCode::STATUS_200)
                {
                    $briefDescription = $response->getTranslation();
                    //$translated = true;
                }
            }
            else if($storedTargetDescription->getOdlDescription() == $description && $sourceDescription != $storedTargetDescription->getOdlDescription())
            {
                $response = $translator->translate($sourceDescription, $sourceLanguageCode, $targetLanguageCode);

                if($response->getCode() == TranslatorResponseStatusCode::STATUS_200)
                {
                    $description = $response->getTranslation();
                    $translated = true;
                }
            }
        }

        return  array("briefDescription" => $briefDescription, "description" => $description, "translated" => $translated);
    }

    public function saveOwnerPhoto($em, $ownership, $dir, $request) {
        //subir photos
        $file = $request->files->get('own_ownership_photo');
        // var_dump($request->files);
        if (isset($file)) {
                $photo = ($ownership->getOwnOwnerPhoto() == null) ? new photo() : $ownership->getOwnOwnerPhoto();
                $fileName = ($ownership->getOwnOwnerPhoto() == null) ? uniqid('owner-') . '-photo.jpg' : $ownership->getOwnOwnerPhoto()->getPhoName();
                $file->move($dir, $fileName);
                //Redimensionando la foto del propietario
                \MyCp\mycpBundle\Helpers\Images::resize($dir . $fileName, 150);

                $photo->setPhoName($fileName);
                $ownership->setOwnOwnerPhoto($photo);
                $ownership->setOwnLastUpdate(new \DateTime());
                $em->persist($photo);

            $em->persist($ownership);

            return $fileName;
        }
        return null;
    }

    function shortEditOwnership($data) {
        $id_ownership = $data['edit_ownership'];
        $em = $this->getEntityManager();
        $ownership =
                $em->getRepository('mycpBundle:ownership')->find($id_ownership);

        $prov = $em->getRepository('mycpBundle:province')->find($ownership->getOwnAddressProvince());
        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode());
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    function getAll($filter_code = '', $filter_active = '', $filter_category = '', $filter_province = '', $filter_municipality = '', $filter_destination = '', $filter_type = '', $filter_name = '', $filter_saler = '', $filter_visit_date = '', $filter_other = "", $filter_commission = "") {

        $condition = '';

        switch ($filter_other) {
            case FilterHelper::ACCOMMODATION_TOP20: $condition .= "AND ow.own_top_20 = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_SELECTION: $condition .= "AND ow.own_selection = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_NOT_RECOMMENDABLE: $condition .= "AND ow.own_not_recommendable = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_INMEDIATE_BOOKING: $condition .= "AND ow.own_inmediate_booking = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_CUBACOUPON: $condition .= "AND ow.own_cubacoupon = 1 ";
                break;
            case FilterHelper::ACCOMMODATION_WITH_ERRORS_PHONE:
                $condition .= "AND (ow.own_phone_number LIKE '%-%' OR ow.own_phone_number LIKE '%(%' OR ow.own_phone_number LIKE '%)%' OR ow.own_phone_number LIKE '%+53%') ";
                break;
            case FilterHelper::ACCOMMODATION_WITH_ERRORS_ADDRESS:
                $condition .= "AND (ow.own_address_street LIKE '%avenida%' OR ow.own_address_street LIKE '%ave%' OR ow.own_address_street LIKE '%calle%' OR ow.own_address_street LIKE '%calzada%' OR ow.own_address_street LIKE '%carretera%' OR (ow.own_address_between_street_1 is not null AND ow.own_address_between_street_1 <> '' AND ow.own_address_between_street_2 IS NOT NULL AND ow.own_address_between_street_2 <> '' AND ow.own_address_between_street_1 = ow.own_address_between_street_2)) ";
                break;
        }

        if ($filter_active != 'null' && $filter_active != '') {
            $condition .= "AND ow.own_status = :filter_active ";
        }
        if ($filter_category != 'null' && $filter_category != '') {
            $condition .= " AND ow.own_category = :filter_category ";
        }
        if ($filter_province != 'null' && $filter_province != '') {
            $condition .= " AND ow.own_address_province = :filter_province ";
        }
        if ($filter_municipality != 'null' && $filter_municipality != '') {
            $condition .= " AND ow.own_address_municipality = :filter_municipality ";
        }
        if ($filter_type != 'null' && $filter_type != '') {
            $condition .= " AND ow.own_type = :filter_type ";
        }

        if ($filter_name != 'null' && $filter_name != '') {
            $condition .= " AND ow.own_name LIKE :filter_name ";
        }
        if ($filter_saler != 'null' && $filter_saler != '') {
            $condition .= " AND ow.own_saler LIKE :filter_saler ";
        }
        if ($filter_visit_date != 'null' && $filter_visit_date != '') {
            $condition .= " AND ow.own_visit_date >= :filter_visit_date AND ow.own_visit_date < :filter_visit_date_plus_day";
        }
        if ($filter_destination != 'null' && $filter_destination != '') {

            $condition .= " AND ow.own_destination = :filter_destination ";
        }
        if ($filter_commission != 'null' && $filter_commission != '') {

            $condition .= " AND ow.own_commission_percent = :filter_commission ";
        }


        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT
        ow.own_not_recommendable,
        ow.own_mcp_code,
        ow.own_top_20,
        ow.own_selection,
        ow.own_inmediate_booking,
        ow.own_name,
        mun.mun_name,
        prov.prov_name,
        ow.own_comment,
        ow.own_id,
        ow.own_cubacoupon,
        (SELECT count(room) FROM mycpBundle:room room WHERE room.room_ownership = ow.own_id AND room.room_active = 1) as own_rooms_total,
        (SELECT min(d.des_name) FROM mycpBundle:destination d WHERE d.des_id = ow.own_destination) as des_name,
        (SELECT min(s.status_id) FROM mycpBundle:ownershipStatus s WHERE s.status_id = ow.own_status) as status_id,
        (SELECT min(s1.status_name) FROM mycpBundle:ownershipStatus s1 WHERE s1.status_id = ow.own_status) as status_name,
        (SELECT count(op) FROM mycpBundle:ownershipPhoto op WHERE op.own_pho_own = ow.own_id) as photos_count
        FROM mycpBundle:ownership ow
        JOIN ow.own_address_municipality mun
        JOIN ow.own_address_province prov
        WHERE ow.own_mcp_code LIKE :filter_code $condition ORDER BY ow.own_mcp_code ASC");

        if ($filter_active != 'null' && $filter_active != '')
            $query->setParameter('filter_active', $filter_active);

        if ($filter_category != 'null' && $filter_category != '')
            $query->setParameter('filter_category', $filter_category);

        if ($filter_province != 'null' && $filter_province != '')
            $query->setParameter('filter_province', $filter_province);

        if ($filter_municipality != 'null' && $filter_municipality != '')
            $query->setParameter('filter_municipality', $filter_municipality);

        if ($filter_type != 'null' && $filter_type != '')
            $query->setParameter('filter_type', $filter_type);

        if ($filter_name != 'null' && $filter_name != '')
            $query->setParameter('filter_name', "%" . $filter_name . "%");

        if ($filter_saler != 'null' && $filter_saler != '')
            $query->setParameter('filter_saler', "%" . $filter_saler . "%");

        if ($filter_visit_date != 'null' && $filter_visit_date != '') {
            $filter_date = \DateTime::createFromFormat('d-m-Y', $filter_visit_date);
            $query->setParameter('filter_visit_date', $filter_date->format("Y-m-d"));

            $filter_date->add(new \DateInterval("P1D"));
            $query->setParameter('filter_visit_date_plus_day', $filter_date->format("Y-m-d"));
        }

        if ($filter_destination != 'null' && $filter_destination != '')
            $query->setParameter('filter_destination', $filter_destination);

        if (isset($filter_code))
            $query->setParameter('filter_code', "%" . $filter_code . "%");

        if ($filter_commission != 'null' && $filter_commission != '')
            $query->setParameter('filter_commission', $filter_commission);

        return $query->getResult();
    }


    /**
     * Realiza busquedas segun los criterios seleccionados
     * @param integer $province_id
     * @param datetime $arrivalDate
     * @param datetime $leavingDate
     * @param integer $guest_total
     * @param string $order_by
     * @return array of MyCp\mycpBundle\Entity\ownership
     */
    function search($controller, $text = null, $arrivalDate = null, $leavingDate = null, $guest_total = 1, $rooms_total = 1, $order_by = 'BEST_VALUED', $room_filter = false, $filters = null) {

        $em = $this->getEntityManager();
        $user_ids = $em->getRepository('mycpBundle:user')->getIds($controller);
        $user_id = $user_ids['user_id'];
        $session_id = $user_ids['session_id'];

        $reservations_where = SearchUtils::createDatesWhere($em, $arrivalDate, $leavingDate);

        $query_string = SearchUtils::getBasicQuery($room_filter, $user_id, $session_id);

        $parameters = array();

        $parameters[] = array('session_id', $session_id);
        $where = '';
        $textWhere = SearchUtils::getTextWhere($text);
        $where .= ($textWhere != "") ? " AND " . $textWhere : "";

        if ($guest_total != null && $guest_total != 'null' && $guest_total != "")
            $where .= " AND " . "o.own_maximun_number_guests >= :guests_total";

        if (isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != "")
            $where .= " AND " . "o.own_rooms_total >= :rooms_total";


        if ($reservations_where != "")
            $where .= " AND o.own_id NOT IN (" . $reservations_where . ")";

        $filterWhere = SearchUtils::getFilterWhere($filters);

        $where .= ($filterWhere != "") ? $filterWhere : "";

        if ($where != '')
            $query_string .= $where;

        $order = SearchUtils::getOrder($order_by);
        $query_string .= $order;

        //var_dump($query_string);

        $query = $em->createQuery($query_string);

        if ($user_id != null)
            $query->setParameter('user_id', $user_id);

        if ($session_id != null)
            $query->setParameter('session_id', $session_id);

        if ($text != null && $text != '' && $text != 'null')
            $query->setParameter('text', "%" . $text . "%");

        if ($guest_total != null && $guest_total != 'null' && $guest_total != "")
            $query->setParameter('guests_total', ($guest_total != "+10" ? $guest_total : 11));

        if (isset($rooms_total) && $rooms_total != null && $rooms_total != 'null' && $rooms_total != "")
            $query->setParameter('rooms_total', ($rooms_total != "+5" ? $rooms_total : 6));

        //$return_list = array();
        $results = $query->getResult();


        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                $results[$i]['photo'] = "no_photo.png";
        }
        return $results;
    }

    /**
     * Muestra todas las casas que son top20, para mostrar en la portada
     * @param $locale
     * @param $category
     * @param $user_id
     * @param session_id
     * @return mixed
     */
    function top20($locale = "ES", $category = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = "SELECT o.own_id as own_id,
                         o.own_name as own_name,
                         prov.prov_name as prov_name,
                         o.own_comments_total as comments_total,
                         (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                         (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as description,
                         (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                         (SELECT min(a.second_icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award,
                         o.own_minimum_price as minPrice,
                         (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         WHERE o.own_top_20=1
                         AND o.own_status = " . ownershipStatus::STATUS_ACTIVE;

        if ($category != null) {
            $query_string .= " AND LOWER(o.own_category) = '$category'";

        }

        $query_string .= " ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";

        return $em->createQuery($query_string);

        /*for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;*/
    }

    function getNotSendedToReservationTeam() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         o.own_name as name,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         prov.prov_phone_code as provCode,
                         o.own_phone_number as phone,
                         o.own_mobile_number as mobile,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         s.status_name as status,
                         (select min(r1.room_price_down_to) from mycpBundle:room r1 where r1.room_ownership = o.own_id) as lowDown,
                         (select max(r2.room_price_down_to) from mycpBundle:room r2 where r2.room_ownership = o.own_id) as highDown,
                         (select min(r3.room_price_up_to) from mycpBundle:room r3 where r3.room_ownership = o.own_id) as lowUp,
                         (select max(r4.room_price_up_to) from mycpBundle:room r4 where r4.room_ownership = o.own_id) as highUp
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status s
                         WHERE o.own_sended_to_team=0 ORDER BY o.own_mcp_code ASC";

        $results = $em->createQuery($query_string)->getResult();

        return $results;
    }

    function getByProvince($idProvince, $status = null) {
        $em = $this->getEntityManager();
        $whereByStatus = ($status != null) ? " AND o.own_status = :status" : "";
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code_generated as generatedCode,
                         o.own_name as name,
                         o.own_mcp_code as mycpCode,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_email_1 as email1,
                         o.own_email_2 as email2,
                         prov.prov_phone_code as provCode,
                         o.own_phone_number as phone,
                         o.own_mobile_number as mobile,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         s.status_name as status,
                         (select min(r1.room_price_down_to) from mycpBundle:room r1 where r1.room_ownership = o.own_id) as lowDown,
                         (select max(r2.room_price_down_to) from mycpBundle:room r2 where r2.room_ownership = o.own_id) as highDown,
                         (select min(r3.room_price_up_to) from mycpBundle:room r3 where r3.room_ownership = o.own_id) as lowUp,
                         (select max(r4.room_price_up_to) from mycpBundle:room r4 where r4.room_ownership = o.own_id) as highUp
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         JOIN o.own_status s
                         WHERE o.own_address_province=$idProvince $whereByStatus ORDER BY o.own_mcp_code ASC";

        $queryObj = $em->createQuery($query_string);

        if($status != null)
            $queryObj->setParameter("status", $status);

        return $queryObj->getResult();
    }

    function getByCodesArray($ownsCodesArray) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         o.own_name as name,
                         o.own_rooms_total as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         (select min(r1.room_price_down_to) from mycpBundle:room r1 where r1.room_ownership = o.own_id) as priceDown,
                         (select max(r4.room_price_up_to) from mycpBundle:room r4 where r4.room_ownership = o.own_id) as priceUp,
                         o.own_facilities_breakfast as breakfast,
                         o.own_facilities_breakfast_price as breakfastPrice,
                         o.own_facilities_parking as parking,
                         o.own_facilities_parking_price as parkingPrice,
                         o.own_water_jacuzee as hotTub,
                         o.own_water_piscina as pool,
                         o.own_description_pets as pets,
                         o.own_description_laundry as washer,
                         o.own_description_internet as internet,
                         (select sum(r2.room_beds) from mycpBundle:room r2 where r2.room_ownership = o.own_id) as bedsTotal
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_mcp_code IN ($ownsCodesArray)
                         AND o.own_status = :status
                         ORDER BY o.own_mcp_code ASC";

        $results = $em->createQuery($query_string)
                ->setParameter("status", ownershipStatus::STATUS_ACTIVE)
                ->getResult();

        return $results;
    }

    function getByIdsArray($ownsIdsArray) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o.own_id as ownId,
                         o.own_mcp_code as mycpCode,
                         r.room_num as roomNumber,
                         o.own_name as name,
                         1 as totalRooms,
                         o.own_homeowner_1 as owner1,
                         o.own_homeowner_2 as owner2,
                         o.own_address_street as street,
                         o.own_address_number as number,
                         o.own_address_between_street_1 as between1,
                         o.own_address_between_street_2 as between2,
                         prov.prov_name as province,
                         mun.mun_name as municipality,
                         r.room_price_up_to as priceUp,
                         o.own_facilities_breakfast as breakfast,
                         o.own_facilities_breakfast_price as breakfastPrice,
                         o.own_facilities_parking as parking,
                         o.own_facilities_parking_price as parkingPrice,
                         o.own_water_jacuzee as hotTub,
                         o.own_water_piscina as pool,
                         o.own_description_pets as pets,
                         o.own_description_laundry as washer,
                         o.own_description_internet as internet,
                         r.room_beds as bedsTotal,
                         r.room_smoker as smoker,
                         r.room_climate as climate,
                         r.room_bathroom as bathroom,
                         r.room_audiovisual as audiovisual,
                         r.room_type as type,
                         o.own_geolocate_x as geoX,
                         o.own_geolocate_y as geoY
                         FROM mycpBundle:room r
                         JOIN r.room_ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun
                         WHERE o.own_id IN ($ownsIdsArray)
                         AND o.own_status = :status
                         ORDER BY o.own_mcp_code ASC, r.room_num ASC";

        $results = $em->createQuery($query_string)
                ->setParameter("status", ownershipStatus::STATUS_ACTIVE)
                ->getResult();

        return $results;
    }

    public function top20Statistics() {
        $em = $this->getEntityManager();
        $query = "SELECT count(own.own_id) as premium_total,
                  (SELECT count(own1.own_id) FROM mycpBundle:ownership own1 WHERE own1.own_top_20 = 1 AND own1.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND LOWER(own1.own_category) = 'rango medio') as midrange_total,
                  (SELECT count(own2.own_id) FROM mycpBundle:ownership own2 WHERE own2.own_top_20 = 1 AND own2.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND own2.own_category = 'EconÃ³mica') as economic_total
                  FROM mycpBundle:ownership own WHERE own.own_top_20 = 1 AND own.own_status = " . ownershipStatus::STATUS_ACTIVE . " AND own.own_category = 'Premium'";
        return $em->createQuery($query)->getOneOrNullResult();
    }

    public function getSalersNames() {
        $em = $this->getEntityManager();
        $query = "SELECT DISTINCT own.own_saler as name FROM mycpBundle:ownership own ORDER BY own.own_saler";
        return $em->createQuery($query)->getResult();
    }

    /**
     * Devuelve un arreglo que contiene todas las categorias de casas posibles
     * @return type arreglo
     */
    function getOwnsCategories($own_ids = null) {
        $em = $this->getEntityManager();

        $owns_categories = array();
        $owns_categories[] = "EconÃ³mica";
        $owns_categories[] = "Rango medio";
        $owns_categories[] = "Premium";

        $categories = array();

        if (isset($own_ids))
            $query_string = "SELECT count(o) as economic,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_category='Rango medio') as middle_range,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_category='Premium') as premium
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_category='EconÃ³mica'";
        else
            $query_string = "SELECT count(o) as economic,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_category='Rango medio') as middle_range,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_category='Premium') as premium
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_category='EconÃ³mica'";
        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $categories[] = array(trim("EconÃ³mica"), $counts['economic']);
        $categories[] = array(trim("Rango medio"), $counts['middle_range']);
        $categories[] = array(trim("Premium"), $counts['premium']);

        return $categories;
    }

    function getOwnsPrices($own_ids = null) {
        $em = $this->getEntityManager();
        /* $prices = range(25, 200, 25);
          $prices[] = 300; */

        $prices_result = array();
        //$minimun_price = 0;
        //foreach ($prices as $price) {
        if (isset($own_ids))
            $query_string = "SELECT count(o) as primero,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_minimum_price< 50 AND o.own_minimum_price >=25) as segundo,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_minimum_price< 75 AND o2.own_minimum_price >=50) as tercero,
                         (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_id IN ($own_ids) AND o3.own_minimum_price< 100 AND o3.own_minimum_price >=75) as cuarto,
                         (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_id IN ($own_ids) AND o4.own_minimum_price< 125 AND o4.own_minimum_price >=100) as quinto,
                         (SELECT count(o5) FROM mycpBundle:ownership o5 WHERE o5.own_status = :own_status AND o5.own_id IN ($own_ids) AND o5.own_minimum_price< 150 AND o5.own_minimum_price >=125) as sexto,
                         (SELECT count(o6) FROM mycpBundle:ownership o6 WHERE o6.own_status = :own_status AND o6.own_id IN ($own_ids) AND o6.own_minimum_price< 175 AND o6.own_minimum_price >=150) as septimo,
                         (SELECT count(o7) FROM mycpBundle:ownership o7 WHERE o7.own_status = :own_status AND o7.own_id IN ($own_ids) AND o7.own_minimum_price< 200 AND o7.own_minimum_price >=175) as octavo,
                         (SELECT count(o8) FROM mycpBundle:ownership o8 WHERE o8.own_status = :own_status AND o8.own_id IN ($own_ids) AND o8.own_minimum_price< 300 AND o8.own_minimum_price >=200) as noveno
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_minimum_price< 25 AND o.own_minimum_price >=0";
        else
            $query_string = "SELECT count(o) as primero,
                         (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_minimum_price< 50 AND o.own_minimum_price >=25) as segundo,
                         (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_minimum_price< 75 AND o2.own_minimum_price >=50) as tercero,
                         (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_minimum_price< 100 AND o3.own_minimum_price >=75) as cuarto,
                         (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_minimum_price< 125 AND o4.own_minimum_price >=100) as quinto,
                         (SELECT count(o5) FROM mycpBundle:ownership o5 WHERE o5.own_status = :own_status AND o5.own_minimum_price< 150 AND o5.own_minimum_price >=125) as sexto,
                         (SELECT count(o6) FROM mycpBundle:ownership o6 WHERE o6.own_status = :own_status AND o6.own_minimum_price< 175 AND o6.own_minimum_price >=150) as septimo,
                         (SELECT count(o7) FROM mycpBundle:ownership o7 WHERE o7.own_status = :own_status AND o7.own_minimum_price< 200 AND o7.own_minimum_price >=175) as octavo,
                         (SELECT count(o8) FROM mycpBundle:ownership o8 WHERE o8.own_status = :own_status AND o8.own_minimum_price< 300 AND o8.own_minimum_price >=200) as noveno
                         FROM mycpBundle:ownership o
                         WHERE o.own_status = :own_status AND ((o.own_minimum_price< 25 AND o.own_minimum_price >=0))";

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $prices_result[] = array(0, 25, $counts['primero']);
        $prices_result[] = array(25, 50, $counts['segundo']);
        $prices_result[] = array(50, 75, $counts['tercero']);
        $prices_result[] = array(75, 100, $counts['cuarto']);
        $prices_result[] = array(100, 125, $counts['quinto']);
        $prices_result[] = array(125, 150, $counts['sexto']);
        $prices_result[] = array(150, 175, $counts['septimo']);
        $prices_result[] = array(175, 200, $counts['octavo']);
        $prices_result[] = array(200, 300, $counts['noveno']);

        return $prices_result;
    }

    /**
     * Devuelve un arreglo con todos los tipos de casa posibles
     * @return type arreglo
     */
    //Yanet - Inicio
    function getOwnsTypes($own_ids = null) {
        $em = $this->getEntityManager();

        $owns_types = array();
        $owns_types[] = "Penthouse";
        $owns_types[] = "Villa con piscina";
        $owns_types[] = "Apartamento";
        $owns_types[] = "Propiedad completa";
        $owns_types[] = "Casa particular";

        $types = array();
        if (isset($own_ids))
            $query_string = "SELECT count(o) as penthouse,
                             (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_id IN ($own_ids) AND o1.own_type='Villa con piscina') as villa,
                             (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_id IN ($own_ids) AND o2.own_type='Apartamento') as apartamento,
                             (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_id IN ($own_ids) AND o3.own_type='Propiedad completa') as propiedad,
                             (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_id IN ($own_ids) AND o4.own_type='Casa particular') as casa
                             FROM mycpBundle:ownership o
                             WHERE o.own_status = :own_status AND o.own_id IN ($own_ids) AND o.own_type='Penthouse'";
        else
            $query_string = "SELECT count(o) as penthouse,
                             (SELECT count(o1) FROM mycpBundle:ownership o1 WHERE o1.own_status = :own_status AND o1.own_type='Villa con piscina') as villa,
                             (SELECT count(o2) FROM mycpBundle:ownership o2 WHERE o2.own_status = :own_status AND o2.own_type='Apartamento') as apartamento,
                             (SELECT count(o3) FROM mycpBundle:ownership o3 WHERE o3.own_status = :own_status AND o3.own_type='Propiedad completa') as propiedad,
                             (SELECT count(o4) FROM mycpBundle:ownership o4 WHERE o4.own_status = :own_status AND o4.own_type='Casa particular') as casa
                             FROM mycpBundle:ownership o
                             WHERE o.own_status = :own_status AND o.own_type='Penthouse'";

        $counts = $em->createQuery($query_string)->setParameter('own_status', ownershipStatus::STATUS_ACTIVE)->getSingleResult();

        $types[] = array("Penthouse", $counts['penthouse']);
        $types[] = array("Villa con piscina", $counts['villa']);
        $types[] = array("Apartamento", $counts['apartamento']);
        $types[] = array("Propiedad completa", $counts['propiedad']);
        $types[] = array("Casa particular", $counts['casa']);

        return $types;
    }

    function getSearchStatistics() {
        $em = $this->getEntityManager();
        $statistics = array();

        $statistics['room_double'] = 0;
        $statistics['room_double_two_beds'] = 0;
        $statistics['room_simple'] = 0;
        $statistics['room_triple'] = 0;
        $statistics['room_climatization'] = 0;
        $statistics['room_audio_visuals'] = 0;
        $statistics['room_kids'] = 0;
        $statistics['room_smoker'] = 0;
        $statistics['room_safe'] = 0;
        $statistics['room_balcony'] = 0;
        $statistics['room_terrace'] = 0;
        $statistics['room_yard'] = 0;

        $statistics['own_bathroom_inner'] = 0;
        $statistics['own_bathroom_outer'] = 0;
        $statistics['own_bathroom_shared'] = 0;
        $statistics['own_water_sauna'] = 0;
        $statistics['own_water_jacuzzi'] = 0;
        $statistics['own_water_pool'] = 0;

        $statistics['own_services_breakfast'] = 0;
        $statistics['own_services_dinner'] = 0;
        $statistics['own_services_parking'] = 0;
        $statistics['own_services_pets'] = 0;
        $statistics['own_services_laundry'] = 0;
        $statistics['own_service_internet_email'] = 0;

        $statistics['own_lang_english'] = 0;
        $statistics['own_lang_french'] = 0;
        $statistics['own_lang_german'] = 0;
        $statistics['own_lang_italian'] = 0;

        $statistics['room_total_windows_1'] = 0;
        $statistics['room_total_windows_2'] = 0;
        $statistics['room_total_windows_3'] = 0;
        $statistics['room_total_windows_4'] = 0;
        $statistics['room_total_windows_5'] = 0;
        $statistics['room_total_windows_+5'] = 0;

        $statistics['rooms_total_1'] = 0;
        $statistics['rooms_total_2'] = 0;
        $statistics['rooms_total_3'] = 0;
        $statistics['rooms_total_4'] = 0;
        $statistics['rooms_total_5'] = 0;
        $statistics['rooms_total_+5'] = 0;

        $statistics['room_total_beds_1'] = 0;
        $statistics['room_total_beds_2'] = 0;
        $statistics['room_total_beds_3'] = 0;
        $statistics['room_total_beds_4'] = 0;
        $statistics['room_total_beds_5'] = 0;
        $statistics['room_total_beds_+5'] = 0;

        $own_ids = "0";

        $query_string = "SELECT DISTINCT o.own_id as own_id,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            o.own_facilities_breakfast as breakfast,
                            o.own_facilities_dinner as dinner,
                            o.own_facilities_parking as parking,
                            o.own_water_piscina as pool,
                            o.own_description_laundry as laundry,
                            o.own_description_internet as internet,
                            o.own_water_sauna as sauna,
                            o.own_description_pets as pets,
                            o.own_water_jacuzee as jacuzee,
                            o.own_langs as langs,
                            o.own_rooms_total
                            FROM mycpBundle:ownership o
                            WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE;
        $query = $em->createQuery($query_string);
        $own_list = $query->getResult();

        $query_string = "SELECT r FROM mycpBundle:room r join r.room_ownership o WHERE r.room_active = 1 AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                         ORDER BY r.room_ownership ASC";
        $rooms = $em->createQuery($query_string)->getResult();

        foreach ($own_list as $own) {

            switch ($own['own_rooms_total']) {
                case 1: $statistics['rooms_total_1'] += 1;
                    break;
                case 2: $statistics['rooms_total_2'] += 1;
                    break;
                case 3: $statistics['rooms_total_3'] += 1;
                    break;
                case 4: $statistics['rooms_total_4'] += 1;
                    break;
                case 5: $statistics['rooms_total_5'] += 1;
                    break;
                default:
                    if ($own['own_rooms_total'] > 5) {
                        $statistics['rooms_total_+5'] += 1;
                        break;
                    }
            }

            if ($own['breakfast'] != null && $own['breakfast'])
                $statistics['own_services_breakfast'] += 1;

            if ($own['dinner'] != null && $own['dinner'])
                $statistics['own_services_dinner'] += 1;

            if ($own['parking'] != null && $own['parking'])
                $statistics['own_services_parking'] += 1;

            if ($own['pets'] != null && $own['pets'])
                $statistics['own_services_pets'] += 1;

            if ($own['laundry'] != null && $own['laundry'])
                $statistics['own_services_laundry'] += 1;

            if ($own['internet'] != null && $own['internet'])
                $statistics['own_service_internet_email'] += 1;

            if ($own['sauna'] != null && $own['sauna'])
                $statistics['own_water_sauna'] += 1;

            if ($own['pool'] != null && $own['pool'])
                $statistics['own_water_pool'] += 1;

            if ($own['jacuzee'] != null && $own['jacuzee'])
                $statistics['own_water_jacuzzi'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 0, 1) == "1")
                $statistics['own_lang_english'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 1, 1) == "1")
                $statistics['own_lang_french'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 2, 1) == "1")
                $statistics['own_lang_german'] += 1;

            if ($own['langs'] != null && substr($own['langs'], 3, 1) == "1")
                $statistics['own_lang_italian'] += 1;
        }

        $is_room_individual = false;
        $is_room_double = false;
        $is_room_double_two_beds = false;
        $is_room_triple = false;
        $is_room_climatization = false;
        $is_room_audiovisual = false;
        $is_room_kids = false;
        $is_room_smoker = false;
        $is_room_safe = false;
        $is_room_windows = false;
        $is_room_balcony = false;
        $is_room_terrace = false;
        $is_room_yard = false;
        $is_room_bathromm_inner = false;
        $is_room_bathroom_outer = false;
        $is_room_bathroom_shared = false;
        $is_room_total_bed = false;
        $is_own_total_room = false;

        foreach ($rooms as $room) {
            $is_room_individual = false;
            $is_room_double = false;
            $is_room_double_two_beds = false;
            $is_room_triple = false;
            $is_room_climatization = false;
            $is_room_audiovisual = false;
            $is_room_kids = false;
            $is_room_smoker = false;
            $is_room_safe = false;
            $is_room_windows = false;
            $is_room_balcony = false;
            $is_room_terrace = false;
            $is_room_yard = false;
            $is_room_bathromm_inner = false;
            $is_room_bathroom_outer = false;
            $is_room_bathroom_shared = false;
            $is_room_total_bed = false;
            $is_own_total_room = false;

            if ($room->getRoomActive()) {
                if ($room->getRoomType() != null && $room->getRoomType() == 'HabitaciÃ³n doble' && !$is_room_double) {
                    $statistics['room_double'] += 1;
                    $is_room_double = true;
                }

                if ($room->getRoomType() != null && $room->getRoomType() == 'HabitaciÃ³n doble (Dos camas)' && !$is_room_double_two_beds) {
                    $statistics['room_double_two_beds'] += 1;
                    $is_room_double_two_beds = true;
                }

                if ($room->getRoomType() != null && $room->getRoomType() == 'HabitaciÃ³n individual' && !$is_room_individual) {
                    $statistics['room_simple'] += 1;
                    $is_room_individual = true;
                }

                if ($room->getRoomType() != null && $room->isTriple() && !$is_room_triple) {
                    $statistics['room_triple'] += 1;
                    $is_room_triple = true;
                }

                if ($room->getRoomClimate() != null && ($room->getRoomClimate() == 'Aire acondicionado' || $room->getRoomClimate() == 'Aire acondicionado / Ventilador') && !$is_room_climatization) {
                    $statistics['room_climatization'] += 1;
                    $is_room_climatization = true;
                }

                if ($room->getRoomAudiovisual() != null && $room->getRoomAudiovisual() != '' && !$is_room_audiovisual) {
                    $statistics['room_audio_visuals'] += 1;
                    $is_room_audiovisual = true;
                }

                if ($room->getRoomBaby() != null && $room->getRoomBaby() && !$is_room_kids) {
                    $statistics['room_kids'] += 1;
                    $is_room_kids = true;
                }

                if ($room->getRoomSmoker() != null && $room->getRoomSmoker() && !$is_room_smoker) {
                    $statistics['room_smoker'] += 1;
                    $is_room_smoker = true;
                }

                if ($room->getRoomSafe() != null && $room->getRoomSafe() && !$is_room_safe) {
                    $statistics['room_safe'] += 1;
                    $is_room_safe = true;
                }

                if ($room->getRoomWindows() != null && $room->getRoomWindows() > 0 && !$is_room_windows) {
                    //$statistics['room_windows'] += 1;
                    switch ($room->getRoomWindows()) {
                        case 1: $statistics['room_total_windows_1'] += 1;
                            break;
                        case 2: $statistics['room_total_windows_2'] += 1;
                            break;
                        case 3: $statistics['room_total_windows_3'] += 1;
                            break;
                        case 4: $statistics['room_total_windows_4'] += 1;
                            break;
                        case 5: $statistics['room_total_windows_5'] += 1;
                            break;
                        default:
                            if ($room->getRoomWindows() > 5) {
                                $statistics['room_total_windows_+5'] += 1;
                                break;
                            }
                    }
                    $is_room_windows = true;
                }

                if ($room->getRoomBeds() != null && $room->getRoomBeds() > 0 && !$is_room_total_bed) {
                    //$statistics['room_windows'] += 1;
                    switch ($room->getRoomBeds()) {
                        case 1: $statistics['room_total_beds_1'] += 1;
                            break;
                        case 2: $statistics['room_total_beds_2'] += 1;
                            break;
                        case 3: $statistics['room_total_beds_3'] += 1;
                            break;
                        case 4: $statistics['room_total_beds_4'] += 1;
                            break;
                        case 5: $statistics['room_total_beds_5'] += 1;
                            break;
                        default:
                            if ($room->getRoomBeds() > 5) {
                                $statistics['room_total_beds_+5'] += 1;
                                break;
                            }
                    }
                    $is_room_total_bed = true;
                }

                if ($room->getRoomBalcony() != null && $room->getRoomBalcony() > 0 && !$is_room_balcony) {
                    $statistics['room_balcony'] += 1;
                    $is_room_balcony = true;
                }

                if ($room->getRoomTerrace() != null && $room->getRoomTerrace() && !$is_room_terrace) {
                    $statistics['room_terrace'] += 1;
                    $is_room_terrace = true;
                }

                if ($room->getRoomYard() != null && $room->getRoomYard() && !$is_room_yard) {
                    $statistics['room_yard'] += 1;
                    $is_room_yard = true;
                }

                if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Interior privado' && !$is_room_bathromm_inner) {
                    $statistics['own_bathroom_inner'] += 1;
                    $is_room_bathromm_inner = true;
                }

                if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Exterior privado' && !$is_room_bathroom_outer) {
                    $statistics['own_bathroom_outer'] += 1;
                    $is_room_bathroom_outer = true;
                }

                if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Compartido' && !$is_room_bathroom_shared) {
                    $statistics['own_bathroom_shared'] += 1;
                    $is_room_bathroom_shared = true;
                }
            }
        }

        return $statistics;
    }

    function getCompleteListByIds($own_ids, $user_id, $session_id) {
        $em = $this->getEntityManager();
        $results = array();

        if (isset($own_ids)) {
            $query_string = $this->getBasicQuery($user_id, $session_id);
            $query_string .= " WHERE o.own_id IN ($own_ids)";

            $results = $em->createQuery($query_string)->getResult();

            for ($i = 0; $i < count($results); $i++) {
                if ($results[$i]['photo'] == null)
                    $results[$i]['photo'] = "no_photo.png";
                else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo'])))
                    $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getListByIds($own_ids) {
        $em = $this->getEntityManager();
        $results = array();

        if (isset($own_ids)) {
            $query_string = "SELECT o FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
            $results = $em->createQuery($query_string)->getResult();
        }
        return $results;
    }

    /**
     * Devuelve un list con las ultimas casas agregadas
     * @return type list
     */
    function lastAdded($results_total = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getBasicQuery($user_id, $session_id);
        $query_string .= " WHERE o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_publish_date DESC, o.own_id DESC";

        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getDetails($own_name, $locale = "ES", $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getDetailBasicQuery($user_id, $session_id, $locale);
        $query_string .= " WHERE o.own_name = :own_name AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_id DESC";

        return $em->createQuery($query_string)->setParameter('own_name', $own_name)->getOneOrNullResult();
    }

    function getDetailsByCode($own_mycp_code, $locale = "ES", $isSimple = false) {
        $em = $this->getEntityManager();
        $query_string = $this->getDetailBasicQuery(null, null, $locale);

        if (!$isSimple)
            $query_string .= " WHERE o.own_mcp_code = :own_mycp_code  AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_id DESC";
        else
            $query_string .= " WHERE o.own_mcp_code = :own_mycp_code ORDER BY o.own_id DESC";

        return $em->createQuery($query_string)->setParameter('own_mycp_code', $own_mycp_code)->getOneOrNullResult();
    }

    function getByCategory($category, $results_total = null, $exclude_id = null, $user_id = null, $session_id = null) {
        $em = $this->getEntityManager();

        $query_string = $this->getBasicQuery($user_id, $session_id);

        if ($exclude_id == null)
            $query_string .= "WHERE o.own_category= :category AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                              ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";
        else
            $query_string .= "WHERE o.own_category= :category
                           AND o.own_status = " . ownershipStatus::STATUS_ACTIVE . "
                           AND o.own_id <> $exclude_id
                         ORDER BY o.own_ranking DESC, o.own_comments_total DESC, count_reservations DESC";

        $results = ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setParameter('category', $category)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->setParameter('category', $category)->getResult();

        for ($i = 0; $i < count($results); $i++) {
            if ($results[$i]['photo'] == null)
                $results[$i]['photo'] = "no_photo.png";
            else if (!file_exists(realpath("uploads/ownershipImages/" . $results[$i]['photo']))) {
                $results[$i]['photo'] = "no_photo.png";
            }
        }
        return $results;
    }

    function getPhotos($ownid) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if (file_exists(realpath("uploads/ownershipImages/" . $photo->getOwnPhoPhoto()->getPhoName())))
                $photos[] = $photo->getOwnPhoPhoto();
        }

        return $photos;
    }

    function getPhotosAndDescription($ownid, $lang_code) {

        $em = $this->getEntityManager();
        $query_string = "SELECT p.pho_name as photo_name,
                         (SELECT min(pl.pho_lang_description) FROM mycpBundle:photoLang pl
                         JOIN pl.pho_lang_id_lang l WHERE l.lang_code='$lang_code' AND pl.pho_lang_id_photo=p.pho_id) as photo_description
                         FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if (file_exists(realpath("uploads/ownershipImages/" . $photo["photo_name"])))
                $photos[] = array(
                    'photo_name' => $photo["photo_name"],
                    'photo_description' => $photo["photo_description"]
                );
        }

        return $photos;
    }

    function getOwnershipForAutocompleteByName($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_name LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getOwnershipForAutocompleteByCode($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_mcp_code LIKE '%$own_part_name%' AND o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_mcp_code ASC");
        return $query->getResult();
    }

    function getPublicOwnerships() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . " ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getBest() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o
            FROM mycpBundle:ownership o
            WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
              AND o.own_rating >= 4
            ORDER BY o.own_ranking DESC, o.own_comments_total DESC");
        return $query->getResult();
    }

    function getVotedBest() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_status=" . ownershipStatus::STATUS_ACTIVE . "
                          AND o.own_comments_total > 0
                        ORDER BY o.own_ranking DESC, o.own_comments_total DESC";

        return $em->createQuery($query_string)->getResult();
    }

    function getPhotosArray($own_list) {
        $photos = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $photos[$own->getOwnId()] = $this->getOwnershipPhoto($own->getOwnId());
            }
        }
        return $photos;
    }

    function getPhotosArrayFromArray($own_list, $keyName) {
        $photos = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $photos[$own[$keyName]] = $this->getOwnershipPhoto($own[$keyName]);
            }
        }
        return $photos;
    }

    function getOwnershipPhoto($own_id) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                        JOIN op.own_pho_photo p
                        WHERE op.own_pho_own = " . $own_id .
                " ORDER BY p.pho_order ASC";
        $results = $em->createQuery($query_string)->setMaxResults(1)->getResult();
        $ownership_photo = ($results != null && count($results) > 0) ? $results[0] : null;
        $photo = null;
        if ($ownership_photo != null) {
            $photo_name = $ownership_photo->getOwnPhoPhoto()->getPhoName();

            if (file_exists(realpath("uploads/ownershipImages/" . $photo_name))) {
                $photo = $photo_name;
            } else {
                $photo = 'no_photo.png';
            }
        } else {
            $photo = 'no_photo.png';
        }
        return $photo;
    }

    function getRoomsArray($own_list) {
        $em = $this->getEntityManager();
        $rooms = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $rooms[$own->getOwnId()] = count($em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $own->getOwnId(), "room_active" => true)));
            }
        }
        return $rooms;
    }

    function getCountsForSearch($own_list) {
        $em = $this->getEntityManager();
        $counts = array();

        if (is_array($own_list)) {
            foreach ($own_list as $own) {
                $own_id = $own->getOwnId();
                $query = $em->createQuery("SELECT count(res) as reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = $own_id)  as comments
                        FROM mycpBundle:generalReservation res
                        WHERE res.gen_res_own_id = $own_id
                        AND res.gen_res_status=" . generalReservation::STATUS_RESERVED);
                $counts[$own_id] = $query->getArrayResult();
            }
        }

        return $counts;
    }

    public function autocompleteTextList() {
        $em = $this->getEntityManager();
        $provinces = $em->createQueryBuilder()
                        ->select("p.prov_name as name")
                        ->from("mycpBundle:province", "p")
                        ->orderBy("p.prov_name", "ASC")->getQuery()->getResult();

        $municipalities = $em->createQueryBuilder()
            ->select("m.mun_name as name")
            ->from("mycpBundle:municipality", "m")
            ->orderBy("m.mun_name", "ASC")->getQuery()->getResult();

        $ownerships = $em->createQueryBuilder()
            ->select("o.own_name as name", "o.own_mcp_code as code")
            ->from("mycpBundle:ownership", "o")
            ->where("o.own_status= :status")
            ->orderBy("o.own_name", "ASC")
            ->setParameter("status", OwnershipStatuses::ACTIVE)->getQuery()->getResult();

        $result = array();
        foreach ($provinces as $prov) {
            $result[] = $prov["name"];
        }

        foreach ($municipalities as $mun) {
            if (!array_search($mun["name"], $result))
                $result[] = $mun["name"];
        }

        foreach ($ownerships as $own) {
            if (!array_search($own["name"], $result))
                $result[] = $own["name"];

            if (!array_search($own["code"], $result))
                $result[] = $own["code"];
        }

        return json_encode($result);
    }

    public function getNotSynchronized() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o
                        FROM mycpBundle:ownership o
                        WHERE o.own_sync_st<>" . "'" . SyncStatuses::SYNC . "'";

        return $em->createQuery($query_string)->getResult();
    }

    public function setAllSync() {
        $em = $this->getEntityManager();
        foreach ($this->getHousesToOfflineApp() as $_house) {
            $_house->setOwnSync(true);
            $em->persist($_house);
        }
        $em->flush();
    }

    private function getBasicQuery($user_id = null, $session_id = null) {
        $query_string = "SELECT o.own_id as own_id,
                             o.own_name as own_name,
                            (SELECT min(p.pho_name) FROM mycpBundle:ownershipPhoto op JOIN op.own_pho_photo p WHERE op.own_pho_own=o.own_id
                            AND (p.pho_order = (select min(p1.pho_order) from  mycpBundle:ownershipPhoto op1 JOIN op1.own_pho_photo p1
                            where op1.own_pho_own = o.own_id) or p.pho_order is null) as photo,
                            prov.prov_name as prov_name,
                            mun.mun_name as mun_name,
                            o.own_comments_total as comments_total,
                            o.own_rating as rating,
                            o.own_category as category,
                            o.own_type as type,
                            o.own_minimum_price as minimum_price,
                            (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                            (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id AND r.room_active = 1) as rooms_count,
                            (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                            (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments,
                            (SELECT min(a.second_icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun ";
        return $query_string;
    }

    private function getDetailBasicQuery($user_id = null, $session_id = null, $locale = "ES") {
        $query_string = "SELECT o.own_id as own_id,
                        (SELECT max(dest.des_id) FROM mycpBundle:destination dest WHERE dest.des_id = o.own_destination) as des_id,
                        o.own_name as ownname,
                        prov.prov_name as ownAddressProvince,
                        prov.prov_id as ownAddressProvince_id,
                        o.own_address_street as ownAddressStreet,
                        o.own_address_number as ownAddressNumber,
                        o.own_type as owntype,
                        mun.mun_name as ownaddressmunicipality,
                        mun.mun_id as ownaddressmunicipality_id,
                        o.own_comments_total as comments_total,
                        o.own_rating as rating,
                        o.own_mcp_code as mycpcode,
                        o.own_category as category,
                        o.own_minimum_price as ownminimumprice,
                        o.own_geolocate_x as OwnGeolocateX,
                        o.own_geolocate_y as OwnGeolocateY,
                        o.own_facilities_breakfast as ownFacilitiesBreakfast,
                        o.own_facilities_breakfast_price as ownFacilitiesBreakfastPrice,
                        o.own_facilities_dinner as ownFacilitiesDinner,
                        o.own_facilities_dinner_price_from as ownFacilitiesDinnerPriceFrom,
                        o.own_facilities_dinner_price_to as ownFacilitiesDinnerPriceTo,
                        o.own_facilities_parking as ownFacilitiesParking,
                        o.own_facilities_parking_price as ownFacilitiesParkingPrice,
                        o.own_description_bicycle_parking as ownDescriptionBicycleParking,
                        o.own_maximun_number_guests as ownmaximumnumberguests,
                        o.own_description_pets as ownDescriptionPets,
                        o.own_description_laundry as ownDescriptionLaundry,
                        o.own_description_internet as ownDescriptionInternet,
                        o.own_water_jacuzee as ownWaterJacuzee,
                        o.own_water_sauna as ownWaterSauna,
                        o.own_water_piscina as ownWaterPiscina,
                        o.own_homeowner_1 as owner1,
                        o.own_homeowner_2 as owner2,
                        o.own_commission_percent as OwnCommissionPercent,
                        (select min(op.pho_name) from mycpBundle:photo op where op.pho_id = o.own_owner_photo) as ownerPhotoName,
                        (SELECT min(os.status_id) FROM mycpBundle:ownershipStatus os where o.own_status = os.status_id) as status_id,
                        (SELECT count(fav) FROM mycpBundle:favorite fav WHERE " . (($user_id != null) ? " fav.favorite_user = $user_id " : " fav.favorite_user is null") . " AND " . (($session_id != null) ? " fav.favorite_session_id = '$session_id' " : " fav.favorite_session_id is null") . " AND fav.favorite_ownership=o.own_id) as is_in_favorites,
                        (SELECT count(r) FROM mycpBundle:room r WHERE r.room_ownership=o.own_id AND r.room_active = 1) as rooms_count,
                        (SELECT count(res) FROm mycpBundle:ownershipReservation res JOIN res.own_res_gen_res_id gen WHERE gen.gen_res_own_id = o.own_id AND res.own_res_status = " . ownershipReservation::STATUS_RESERVED . ") as count_reservations,
                        (SELECT count(com) FROM mycpBundle:comment com WHERE com.com_ownership = o.own_id)  as comments,
                        (SELECT min(d.odl_brief_description) FROM mycpBundle:ownershipDescriptionLang d JOIN d.odl_id_lang l WHERE d.odl_ownership = o.own_id AND l.lang_code = '$locale') as brief_description,
                        (SELECT min(dd.odl_description) FROM mycpBundle:ownershipDescriptionLang dd JOIN dd.odl_id_lang dl WHERE dd.odl_ownership = o.own_id AND dl.lang_code = '$locale') as description,
                        (SELECT min(auto.odl_automatic_translation) FROM mycpBundle:ownershipDescriptionLang auto JOIN auto.odl_id_lang lauto WHERE auto.odl_ownership = o.own_id AND lauto.lang_code = '$locale') as autotomaticTranslation,
                        (SELECT min(kl.okl_keywords) FROM mycpBundle:ownershipKeywordLang kl JOIN kl.okl_id_lang lang WHERE kl.okl_ownership = o.own_id AND lang.lang_code = '$locale') as keywords,
                        (SELECT count(o1.own_id) from mycpBundle:ownership o1 where o1.own_id = o.own_id AND o1.own_langs LIKE '1___') as english,
                        (SELECT count(o2.own_id) from mycpBundle:ownership o2 where o2.own_id = o.own_id AND o2.own_langs LIKE '_1__') as french,
                        (SELECT count(o3.own_id) from mycpBundle:ownership o3 where o3.own_id = o.own_id AND o3.own_langs LIKE '__1_') as german,
                        (SELECT count(o4.own_id) from mycpBundle:ownership o4 where o4.own_id = o.own_id AND o4.own_langs LIKE '___1') as italian,
                        (SELECT min(a.icon_or_class_name) FROM mycpBundle:accommodationAward aw JOIN aw.award a WHERE aw.accommodation = o.own_id ORDER BY aw.year DESC, a.ranking_value DESC) as award
                         FROM mycpBundle:ownership o
                         JOIN o.own_address_province prov
                         JOIN o.own_address_municipality mun  ";
        return $query_string;
    }

    public function getRankingFormula($ownership) {
        $em = $this->getEntityManager();
        $commentsTotal = 0;
        $comments = $em->getRepository("mycpBundle:comment")->findBy(array('com_ownership' => $ownership->getOwnId(), 'com_public' => true));

        foreach ($comments as $comment)
            $commentsTotal += $comment->getComRate();

        $reservationsTotal = count($em->getRepository("mycpBundle:generalReservation")->findBy(array("gen_res_own_id" => $ownership->getOwnId(), "gen_res_status" => generalReservation::STATUS_RESERVED)));

        return sqrt(($commentsTotal + 1) * ($reservationsTotal + 1) * ($reservationsTotal + 1));
    }

    public function updateRanking($ownership) {
        $em = $this->getEntityManager();
        $ranking = $this->getRankingFormula($ownership);
        $ownership->setOwnRanking($ranking);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    public function publish($ownership)
    {
        $em = $this->getEntityManager();
        $status = $em->getRepository("mycpBundle:ownershipStatus")->find(ownershipStatus::STATUS_ACTIVE);

        if ($ownership->getOwnStatus()->getStatusId() == ownershipStatus::STATUS_IN_PROCESS)
            $ownership->setOwnPublishDate(new \DateTime());

        $ownership->setOwnStatus($status);
        $ownership->setOwnLastUpdate(new \DateTime());
        $em->persist($ownership);
        $em->flush();
    }

    public function getSimilars($ownership, $rooms)
    {
        $em = $this->getEntityManager();

        $queryString = "SELECT DISTINCT ow.own_id, ow.own_name, ow.own_commission_percent, ow.own_mcp_code FROM mycpBundle:ownership ow
                        WHERE ow.own_address_province = :province
                          AND ow.own_rooms_total >= :roomsTotal
                          AND ow.own_commission_percent = :commission
                          AND ow.own_id <> :ownId
                          AND ow.own_status = :status
                        ORDER BY ow.own_mcp_code ASC";

        //$em->createQuery($query_string)->getResult();
        return $em->createQuery($queryString)
                  ->setParameters(array("province" => $ownership->getOwnAddressProvince()->getProvId(),
                                        "commission" => $ownership->getOwnCommissionPercent(),
                                        "ownId" => $ownership->getOwnId(),
                                        "roomsTotal" => count($rooms),
                                        "status" => ownershipStatus::STATUS_ACTIVE))
                  ->getResult();
    }


    public function getByRoomsTotalAndMunicipality($municipality, $roomsTotal = null)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('ol')
            ->from("mycpBundle:ownership", "ol")
            ->where('ol.own_address_municipality = :municipality')
            ->andWhere('ol.own_rooms_total > 0')
            ->setParameter("municipality", $municipality)
        ;

        if($roomsTotal != null)
        {
            $qb->andWhere('ol.own_rooms_total = :roomsTotal')
                ->setParameter("roomsTotal", $roomsTotal);
        }

        return $qb->getQuery()->getResult();
    }

    public function getWithReservations($date =  null){
        $em = $this->getEntityManager();

        $dateString = ($date != null) ? " AND gen.gen_res_date >= :date" : "";

        $queryString = "SELECT ow FROM mycpBundle:ownership ow
                        WHERE (SELECT count(gen) FROM mycpBundle:generalreservation gen WHERE ow.own_id = gen.gen_res_own_id $dateString) > 0";

        $query = $em->createQuery($queryString);

        if($date != null)
            $query->setParameter("date", $date);

        return $query->getResult();
    }

    public function getSalesReport(){
        $rsm= new ResultSetMapping();
        $query='SELECT own_id FROM ownership;';
//        $query="SELECT
//  own.own_mcp_code as codigo,
//  own.own_name as nombre,
//  own.own_homeowner_1 as propietario1,
//  own.own_homeowner_2 as propietario2,
//  own.own_email_1 as correo1,
//  own.own_email_2 as correo2,
//  own.own_phone_number AS telefono,
//  own.own_phone_code as codigo_telefono,
//  own.own_mobile_number as celular,
//  own.own_address_street as calle,
//  own.own_address_number as numero,
//  own.own_address_between_street_1 as entre,
//  own.own_address_between_street_2 as y,
//  municipality.mun_name as municipio,
//  province.prov_name as provincia,
//  own.own_saler as gestor,
//  (SELECT COUNT(ownershipreservation.own_res_id) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id) AS solicitudes,
//  (SELECT COUNT(ownershipreservation.own_res_id) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id AND ownershipreservation.own_res_status=5) AS reservas,
//  (SELECT SUM(ownershipreservation.own_res_total_in_site) FROM ownershipreservation INNER JOIN generalreservation ON generalreservation.gen_res_id = ownershipreservation.own_res_gen_res_id WHERE generalreservation.gen_res_own_id=own.own_id AND ownershipreservation.own_res_status=5) AS ingresos
//FROM ownership own
//  INNER JOIN municipality ON municipality.mun_id = own.own_address_municipality
//  INNER JOIN province ON province.prov_id = municipality.mun_prov_id
//ORDER BY own.own_mcp_code ASC
//;";
        $result=$this->getEntityManager()->createNativeQuery($query, $rsm);
        die(dump($result->e));
        return $result->getResult();
    }

    public function getRoomsIdByOwnership($idOwnership)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('r.room_id', 'r.room_num', 'r.room_type')
            ->from("mycpBundle:room", "r")
            ->where('r.room_ownership = :ownership')
            ->setParameter("ownership", $idOwnership)
            ->orderBy("r.room_num", "ASC");

        return $qb->getQuery()->getResult();
    }


}
