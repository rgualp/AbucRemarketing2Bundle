<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MyCp\mycpBundle\Entity\ownership;
use MyCp\mycpBundle\Entity\room;
use MyCp\mycpBundle\Entity\userCasa;
use MyCp\mycpBundle\Entity\ownershipGeneralLang;
use MyCp\mycpBundle\Entity\ownershipDescriptionLang;
use MyCp\mycpBundle\Entity\ownershipKeywordLang;

/**
 * ownershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ownershipRepository extends EntityRepository {

    function insert_ownership($data, $request, $dir, $factory, $new_user) {

        if ($data['facilities_breakfast'] == 'No')
            $data['facilities_breakfast'] = 0;
        else
            $data['facilities_breakfast'] = 1;

        if ($data['facilities_dinner'] == 'No')
            $data['facilities_dinner'] = 0;
        else
            $data['facilities_dinner'] = 1;

        if ($data['facilities_parking'] == 'No')
            $data['facilities_parking'] = 0;
        else
            $data['facilities_parking'] = 1;

        $active = 0;
        if (isset($data['public']))
            $active = 1;
        $active_top_20 = 0;
        if (isset($data['top_20']))
            $active_top_20 = 1;

        //languages
        $ownership_english_lang = 0;
        if (isset($data['ownership_english_lang']))
            $ownership_english_lang = 1;

        $ownership_french_lang = 0;
        if (isset($data['ownership_french_lang']))
            $ownership_french_lang = 1;

        $ownership_german_lang = 0;
        if (isset($data['ownership_german_lang']))
            $ownership_german_lang = 1;

        $ownership_italian_lang = 0;
        if (isset($data['ownership_italian_lang']))
            $ownership_italian_lang = 1;

        $langs_string = $ownership_english_lang . $ownership_french_lang . $ownership_german_lang . $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = new ownership();
        $ownership->setOwnLangs($langs_string);
        $ownership->setOwnName($data['ownership_name']);
        $ownership->setOwnLicenceNumber($data['ownership_licence_number']);
        $ownership->setOwnMcpCode($data['ownership_mcp_code']);
        $ownership->setOwnAddressStreet($data['ownership_address_street']);
        $ownership->setOwnAddressNumber($data['ownership_address_number']);
        $ownership->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1']);
        $ownership->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);
        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov);
        $ownership->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));
        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnHomeowner1($data['ownership_homeowner_1']);
        $ownership->setOwnHomeowner2($data['ownership_homeowner_2']);
        $ownership->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode());
        $phone = '(+53) ' . $prov->getProvPhoneCode() . ' ' . $data['ownership_phone_number'];
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnCategory($data['ownership_category']);
        $ownership->setOwnType($data['ownership_type']);
        $ownership->setOwnFacilitiesBreakfast($data['facilities_breakfast']);
        $ownership->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price']);
        $ownership->setOwnFacilitiesDinner($data['facilities_dinner']);
        $ownership->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from']);
        $ownership->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to']);
        $ownership->setOwnFacilitiesParking($data['facilities_parking']);
        $ownership->setOwnFacilitiesParkingPrice($data['facilities_parking_price']);
        $ownership->setOwnFacilitiesNotes($data['facilities_notes']);
        $ownership->setOwnDescriptionBicycleParking($data['description_bicycle_parking']);
        $ownership->setOwnDescriptionPets($data['description_pets']);
        $ownership->setOwnDescriptionLaundry($data['description_laundry']);
        $ownership->setOwnDescriptionInternet($data['description_internet']);
        $ownership->setOwnGeolocateX($data['geolocate_x']);
        $ownership->setOwnGeolocateY($data['geolocate_y']);
        $ownership->setOwnTop20($active_top_20);
        $ownership->setOwnPublic($active);

        /**
         * Codigo Yanet - Inicio
         */
        $ownership->setOwnCommentsTotal(0);
        $ownership->setOwnMaximumNumberGuests(0);
        $ownership->setOwnRating(0);
        $ownership->setOwnMaximumPrice(0);
        $ownership->setOwnMinimumPrice(0);
        /**
         * Codigo Yanet - Fin
         */
        if (isset($data['water_jacuzee']))
            $ownership->setOwnWaterJacuzee($data['water_jacuzee']);
        if (isset($data['water_sauna']))
            $ownership->setOwnWaterSauna($data['water_sauna']);
        if (isset($data['water_piscina']))
            $ownership->setOwnWaterPiscina($data['water_piscina']);

        $em->persist($ownership);

        $keys = array_keys($data);

        foreach ($keys as $item) {
            if (strpos($item, 'ownership_language') !== false) {

                $id = substr($item, 19, strlen($item));
                $ogl = new ownershipGeneralLang();
                $ogl->setOglIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $ogl->setOglOwnership($ownership);
                $em->persist($ogl);
            }

            if (strpos($item, 'description_desc') !== false) {

                $id = substr($item, 17, strlen($item));
                $odl = new ownershipDescriptionLang();
                $odl->setOdlIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $odl->setOdlDescription($data['description_desc_' . $id]);
                $odl->setOdlBriefDescription($data['description_brief_desc_' . $id]);
                $odl->setOdlOwnership($ownership);
                $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }

        for ($e = 1; $e <= $data['count_rooms']; $e++) {
            $room = new room();
            $room->setRoomType($data['room_type_' . $e]);
            $room->setRoomBeds($data['room_beds_number_' . $e]);
            $room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
            $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
            $room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
            $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);
            $room->setRoomClimate($data['room_climate_' . $e]);
            $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
            $room->setRoomSmoker($data['room_smoker_' . $e]);
            $room->setRoomSafe($data['room_safe_box_' . $e]);
            $room->setRoomBaby($data['room_baby_' . $e]);
            $room->setRoomBathroom($data['room_bathroom_' . $e]);
            $room->setRoomStereo($data['room_stereo_' . $e]);
            $room->setRoomWindows($data['room_windows_' . $e]);
            $room->setRoomBalcony($data['room_balcony_' . $e]);
            $room->setRoomTerrace($data['room_terrace_' . $e]);
            $room->setRoomYard($data['room_yard_' . $e]);
            $room->setRoomOwnership($ownership);
            $em->persist($room);

            /**
             * Codigo Yanet - Inicio
             */
            if ($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownFrom() < $ownership->getOwnMinimumPrice())
                $ownership->setOwnMinimumPrice($room->getRoomPriceDownFrom());

            $ownership->setOwnMaximumNumberGuests($ownership->getOwnMaximumNumberGuests() + $room->getRoomBeds());

            if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

            if ($room->getRoomBeds() > 0)
                $ownership->setOwnMaximunNumberGuests($ownership->getOwnMaximunNumberGuests() + $room->getRoomBeds());

            $em->persist($ownership);
            /**
             * Codigo Yanet - Fin
             */
        }

        //save client casa
        if ($new_user) {
            $user = new user();
            $address = $data['ownership_address_street'] . ' #' . $data['ownership_address_number'];
            $city = $em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']);
            $country = $em->getRepository('mycpBundle:country')->findBy(array('co_name' => 'Cuba'));
            $email = '';
            if (!empty($data['ownership_email_1']))
                $email = $data['ownership_email_1'];
            else
                $email = $data['ownership_email_2'];

            $user->setUserAddress($address);
            $user->setUserCity($city->getMunName());
            $user->setUserCountry($country[0]);
            $user->setUserEmail($email);
            $user->setUserPhone($phone);
            $user->setUserName($data['user_name']);
            $user->setUserLastName($data['ownership_homeowner_1']);
            $file = $request->files->get('user_photo');
            if ($file) {
                $photo = new photo();
                $fileName = uniqid('user-') . '-photo.jpg';
                $file->move($dir, $fileName);
                $photo->setPhoName($fileName);
                $user->setUserPhoto($photo);
                $em->persist($photo);
            }

            $user->setUserRole('ROLE_CLIENT_CASA');
            $user->setUserUserName($data['ownership_homeowner_1']);
            $encoder = $factory->getEncoder($user);
            $password = $encoder->encodePassword($data['user_password'], $user->getSalt());
            $user->setUserPassword($password);
            $user_casa = new userCasa();
            $user_casa->setUserCasaOwnership($ownership);
            $user_casa->setUserCasaUser($user);
            $em->persist($user);
            $em->persist($user_casa);
        }
        $em->flush();
    }

    function edit_ownership($data) {

        $ownership = new ownership();
        $id_ownership = $data['edit_ownership'];
        $active = 0;
        if (isset($data['public']))
            $active = 1;

        $active_top_20 = 0;
        if (isset($data['top_20']))
            $active_top_20 = 1;

        //languages
        $ownership_english_lang = 0;
        if (isset($data['ownership_english_lang']))
            $ownership_english_lang = 1;

        $ownership_french_lang = 0;
        if (isset($data['ownership_french_lang']))
            $ownership_french_lang = 1;

        $ownership_german_lang = 0;
        if (isset($data['ownership_german_lang']))
            $ownership_german_lang = 1;

        $ownership_italian_lang = 0;
        if (isset($data['ownership_italian_lang']))
            $ownership_italian_lang = 1;

        $langs_string = $ownership_english_lang . $ownership_french_lang . $ownership_german_lang . $ownership_italian_lang;

        $em = $this->getEntityManager();
        $ownership = $em->getRepository('mycpBundle:ownership')->find($id_ownership);
        $ownership->setOwnLangs($langs_string);
        $ownership->setOwnName($data['ownership_name']);
        $ownership->setOwnLicenceNumber($data['ownership_licence_number']);
        $ownership->setOwnMcpCode($data['ownership_mcp_code']);
        $ownership->setOwnAddressStreet($data['ownership_address_street']);
        $ownership->setOwnAddressNumber($data['ownership_address_number']);
        $ownership->setOwnAddressBetweenStreet1($data['ownership_address_between_street_1']);
        $ownership->setOwnAddressBetweenStreet2($data['ownership_address_between_street_2']);
        $prov = $em->getRepository('mycpBundle:province')->find($data['ownership_address_province']);
        $ownership->setOwnAddressProvince($prov);
        $ownership->setOwnAddressMunicipality($em->getRepository('mycpBundle:municipality')->find($data['ownership_address_municipality']));
        $ownership->setOwnMobileNumber($data['ownership_mobile_number']);
        $ownership->setOwnHomeowner1($data['ownership_homeowner_1']);
        $ownership->setOwnHomeowner2($data['ownership_homeowner_2']);
        $ownership->setOwnPhoneCode('(+53) ' . $prov->getProvPhoneCode());
        $ownership->setOwnPhoneNumber($data['ownership_phone_number']);
        $ownership->setOwnEmail1($data['ownership_email_1']);
        $ownership->setOwnEmail2($data['ownership_email_2']);
        $ownership->setOwnCategory($data['ownership_category']);
        $ownership->setOwnType($data['ownership_type']);
        $ownership->setOwnFacilitiesBreakfast($data['facilities_breakfast']);
        $ownership->setOwnFacilitiesBreakfastPrice($data['facilities_breakfast_price']);
        $ownership->setOwnFacilitiesDinner($data['facilities_dinner']);
        $ownership->setOwnFacilitiesDinnerPriceFrom($data['facilities_dinner_price_from']);
        $ownership->setOwnFacilitiesDinnerPriceTo($data['facilities_dinner_price_to']);
        $ownership->setOwnFacilitiesParking($data['facilities_parking']);
        $ownership->setOwnFacilitiesParkingPrice($data['facilities_parking_price']);
        $ownership->setOwnFacilitiesNotes($data['facilities_notes']);
        $ownership->setOwnDescriptionBicycleParking($data['description_bicycle_parking']);
        $ownership->setOwnDescriptionPets($data['description_pets']);
        $ownership->setOwnDescriptionLaundry($data['description_laundry']);
        $ownership->setOwnDescriptionInternet($data['description_internet']);
        $ownership->setOwnGeolocateX($data['geolocate_x']);
        $ownership->setOwnGeolocateY($data['geolocate_y']);
        $ownership->setOwnTop20($active_top_20);
        $ownership->setOwnPublic($active);
        $old_rooms = $em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $data['edit_ownership']));

        /**
         * Codigo Yanet - Inicio
         */
        $ownership->setOwnCommentsTotal(0);
        $ownership->setOwnMaximumNumberGuests(0);
        $ownership->setOwnMaximumPrice(0);
        $ownership->setOwnMinimumPrice(0);
        /**
         * Codigo Yanet - Fin
         */
        $em->persist($ownership);

        $query = $em->createQuery("DELETE mycpBundle:ownershipGeneralLang ogl WHERE ogl.ogl_ownership=$id_ownership");
        $query->execute();
        $query = $em->createQuery("DELETE mycpBundle:ownershipDescriptionLang odl WHERE odl.odl_ownership=$id_ownership");
        $query->execute();
        $query = $em->createQuery("DELETE mycpBundle:ownershipKeywordLang okl WHERE okl.okl_ownership=$id_ownership");
        $query->execute();
        $query = $em->createQuery("DELETE mycpBundle:room r WHERE r.room_ownership=$id_ownership");
        $query->execute();
        /* $query = $em->createQuery("DELETE mycpBundle:ownershipPhoto op WHERE op.own_pho_own=$id_ownership");
          $query->execute(); */

        $keys = array_keys($data);

        foreach ($keys as $item) {
            /* if(strpos($item, 'ownership_language')!==false)
              {

              $id=substr($item, 19, strlen($item));
              $ogl= new ownershipGeneralLang();
              $ogl->setOglIdLang($em->getRepository('mycpBundle:lang')->find($id));
              $ogl->setOglOwnership($ownership);
              $em->persist($ogl);
              } */

            if (strpos($item, 'description_desc') !== false) {

                $id = substr($item, 17, strlen($item));
                $odl = new ownershipDescriptionLang();
                $odl->setOdlIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $odl->setOdlDescription($data['description_desc_' . $id]);
                $odl->setOdlBriefDescription($data['description_brief_desc_' . $id]);
                $odl->setOdlOwnership($ownership);
                $em->persist($odl);
            }

            if (strpos($item, 'keywords') !== false) {

                $id = substr($item, 9, strlen($item));
                $okl = new ownershipKeywordLang();
                $okl->setOklIdLang($em->getRepository('mycpBundle:lang')->find($id));
                $okl->setOklKeywords($data['keywords_' . $id]);
                $okl->setOklOwnership($ownership);
                $em->persist($okl);
            }
        }

        //var_dump($old_rooms); exit();
        //exit();



        for ($e = 1; $e <= $data['count_rooms']; $e++) {
            $room = new room();
            if (isset($old_rooms[$e - 1])) {
                $metadata = $em->getClassMetadata(get_class($room));
                $metadata->setIdGeneratorType(\Doctrine\ORM\Mapping\ClassMetadata::GENERATOR_TYPE_NONE);
                $room->setRoomId($old_rooms[$e - 1]->getRoomId());
            }
            $room->setRoomType($data['room_type_' . $e]);
            $room->setRoomBeds($data['room_beds_number_' . $e]);
            $room->setRoomPriceUpFrom($data['room_price_up_from_' . $e]);
            $room->setRoomPriceUpTo($data['room_price_up_to_' . $e]);
            $room->setRoomPriceDownFrom($data['room_price_down_from_' . $e]);
            $room->setRoomPriceDownTo($data['room_price_down_to_' . $e]);
            $room->setRoomClimate($data['room_climate_' . $e]);
            $room->setRoomAudiovisual($data['room_audiovisual_' . $e]);
            $room->setRoomSmoker($data['room_smoker_' . $e]);
            $room->setRoomSafe($data['room_safe_box_' . $e]);
            $room->setRoomBaby($data['room_baby_' . $e]);
            $room->setRoomBathroom($data['room_bathroom_' . $e]);
            $room->setRoomStereo($data['room_stereo_' . $e]);
            $room->setRoomWindows($data['room_windows_' . $e]);
            $room->setRoomBalcony($data['room_balcony_' . $e]);
            $room->setRoomTerrace($data['room_terrace_' . $e]);
            $room->setRoomYard($data['room_yard_' . $e]);
            $room->setRoomOwnership($ownership);
            $em->persist($room);
            /**
             * Codigo Yanet - Inicio
             */
            if ($ownership->getOwnMinimumPrice() == 0 || $room->getRoomPriceDownFrom() < $ownership->getOwnMinimumPrice())
                $ownership->setOwnMinimumPrice($room->getRoomPriceDownFrom());

            $ownership->setOwnMaximumNumberGuests($ownership->getOwnMaximumNumberGuests() + $room->getRoomBeds());

            if ($ownership->getOwnMaximumPrice() == 0 || $room->getRoomPriceUpTo() > $ownership->getOwnMaximumPrice())
                $ownership->setOwnMaximumPrice($room->getRoomPriceUpTo());

            if ($room->getRoomBeds() > 0)
                $ownership->setOwnMaximunNumberGuests($ownership->getOwnMaximunNumberGuests() + $room->getRoomBeds());

            $em->persist($ownership);
            /**
             * Codigo Yanet - Fin
             */
        }
        $em->flush();
    }

    function get_all_ownerships($filter_code, $filter_active, $filter_category, $filter_province, $filter_municipality, $filter_type) {
        $string = '';
        if ($filter_active != 'null' && $filter_active != '') {
            $string = "AND ow.own_public = '$filter_active'";
        }

        $string2 = '';
        if ($filter_category != 'null' && $filter_category != '') {
            $string2 = "AND ow.own_category = '$filter_category'";
        }
        $string3 = '';
        if ($filter_province != 'null' && $filter_province != '') {
            $string3 = "AND ow.own_address_province = '$filter_province'";
        }
        $string4 = '';
        if ($filter_municipality != 'null' && $filter_municipality != '') {
            $string4 = "AND ow.own_address_municipality = '$filter_municipality'";
        }
        $string5 = '';
        if ($filter_type != 'null' && $filter_type != '') {
            $string5 = "AND ow.own_type = '$filter_type'";
        }


        $em = $this->getEntityManager();
        $query = $em->createQuery("SELECT ow FROM mycpBundle:ownership ow
        WHERE ow.own_mcp_code LIKE '%$filter_code%' $string $string2 $string3 $string4 $string5");
        return $query->getResult();
    }

    /**
     * Codigo Yanet - Inicio
     */

    /**
     * Realiza busquedas segun los criterios seleccionados
     * @param integer $province_id
     * @param datetime $arrivalDate
     * @param datetime $leavingDate
     * @param integer $guest_total
     * @param string $order_by
     * @return array of MyCp\mycpBundle\Entity\ownership
     */
    function search($text = null, $arrivalDate = null, $leavingDate = null, $guest_total = 1, $order_by = 'PRICE_LOW_HIGH', $room_filter = false, $filters = null) {

        $em = $this->getEntityManager();

        $query_string = "";
        $temp_array = null;
        if (!$room_filter) {
            $query_string = "SELECT o FROM mycpBundle:ownership o JOIN o.own_address_province p JOIN o.own_address_municipality m";
        } else {
            $query_string = "SELECT r FROM mycpBundle:room r JOIN r.room_ownership o JOIN o.own_address_province p";
        }
        $where = ' WHERE o.own_public <> 0 ';
        if ($text != null && $text != '' && $text != 'null')
            $where = $where . ($where != '' ? " AND " : " WHERE ") . "p.prov_name LIKE '%$text%' OR " . "o.own_name LIKE '%$text%' OR o.own_mcp_code LIKE '%$text%' OR m.mun_name LIKE '%$text%'";

        if ($filters != null && is_array($filters) && $filters['own_beds_total'] != null && is_array($filters['own_beds_total']) && count($filters['own_beds_total']) > 0)
        {
            $temp_array = $filters['own_beds_total'];
                
                if(in_array('+5', $temp_array))
                {
                    $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests > 5";
                    
                    if(($key = array_search('+5', $temp_array)) !== false) {
                        unset($temp_array[$key]);
                    }
                }
                
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests IN (".$this->getStringFromArray($filters['own_beds_total'],false).")";
        }
        else if ($guest_total != null && $guest_total != 'null' && $guest_total > 0)
            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_maximun_number_guests >= $guest_total";


        if ($filters != null && is_array($filters)) {

            if ($filters['own_category'] != null && is_array($filters['own_category']) && count($filters['own_category']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_category IN (".$this->getStringFromArray($filters['own_category']).")";

            if ($filters['own_type'] != null && is_array($filters['own_type']) && count($filters['own_type']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_type IN (".$this->getStringFromArray($filters['own_type']).")";


            if ($filters['own_price_from'] != null && is_array($filters['own_price_from']) && count($filters['own_price_from']) > 0 && $filters['own_price_to'] != null && is_array($filters['own_price_to']) && count($filters['own_price_to']) > 0)
            {
                $prices_where = "";
                
                for($i=0; $i< count($filters['own_price_from']); $i++)
                {
                    $prices_where .= ($prices_where != '' ? " AND " : "")."(o.own_minimum_price >=" . $filters['own_price_from'][$i] . " AND o.own_minimum_price <=" . $filters['own_price_to'][$i]  . ")";
                }
                
                $where = $where . (($prices_where != "")?($where != '' ? " AND " : " WHERE ") . "($prices_where)" : "");
            }

            if ($filters['room_type'] != null && is_array($filters['room_type']) && count($filters['room_type']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_type IN (".$this->getStringFromArray($filters['room_type']).")";

            if ($filters['room_climatization'] != null && $filters['room_climatization'] != 'null' && $filters['room_climatization'] != '')
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_climate = '" . $filters['room_climatization'] . "'";

            if ($filters['room_safe'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_safe = 1";

            if ($filters['room_audiovisuals'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "(r.room_audiovisual <>'' OR r.room_audiovisual IS NOT NULL)";

            if ($filters['room_kids'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_baby = 1";

            if ($filters['room_smoker'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_smoker = 1";

            if ($filters['room_windows_total'] != null && is_array($filters['room_windows_total']) && count($filters['room_windows_total']) > 0)
            {
                $temp_array = $filters['room_windows_total'];
                
                if(in_array('+5', $temp_array))
                {
                    $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_windows > 5";
                    
                    if(($key = array_search('+5', $temp_array)) !== false) {
                        unset($temp_array[$key]);
                    }
                }
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_windows IN (".$this->getStringFromArray($temp_array,false).")";
            }

            if ($filters['room_balcony'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_balcony = 1";

            if ($filters['room_terraza'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_terrace = 1";

            if ($filters['room_courtyard'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_yard = 1";

            if ($filters['room_bathroom'] != null && is_array($filters['room_bathroom']) && count($filters['room_bathroom']) > 0)
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "r.room_bathroom IN (".$this->getStringFromArray($filters['room_bathroom']).")";

            if ($filters['own_others_pets'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_pets = 1";

            if ($filters['own_others_internet'])
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_internet = 1";

            if ($filters['own_others_languages'] != null && is_array($filters['own_others_languages']) && count($filters['own_others_languages']) > 0)
            {
                 $lang_where = "";
                
                for($i=0; $i< count($filters['own_others_languages']); $i++)
                {
                    $lang_where .= ($lang_where != '' ? " AND " : "")."o.own_langs LIKE '" . $filters['own_others_languages'][$i] . "'";
                }
                
                $where = $where . (($lang_where != "")?($where != '' ? " AND " : " WHERE ") . "($lang_where)" : "");
            }

            if ($filters['own_others_included'] != null && is_array($filters['own_others_included']) && count($filters['own_others_included']) > 0) {
                for($i=0; $i< count($filters['own_others_languages']); $i++)
                {
                    switch ($filters['own_others_included'][$i]) {
                        case 'JACUZZY':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_jacuzee = 1";
                            break;
                        case 'SAUNA':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_sauna = 1";
                            break;
                        case 'POOL':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_water_piscina = 1";
                            break;
                    }
                }
            }

            if ($filters['own_others_not_included'] != null && is_array($filters['own_others_not_included']) && count($filters['own_others_not_included']) > 0) {
                for($i=0; $i< count($filters['own_others_not_included']); $i++)
                {
                    switch ($filters['own_others_not_included'][$i]) {
                        case 'BREAKFAST':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_breakfast = 1";
                            break;
                        case 'DINNER':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_dinner = 1";
                            break;
                        case 'LAUNDRY':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_description_laundry = 1";
                            break;
                        case 'PARKING':
                            $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_facilities_parking = 1";
                            break;
                    }
                }
            }

            if ($filters['own_rooms_number'] != null && is_array($filters['own_rooms_number']) && count($filters['own_rooms_number']) > 0)
            {
                $temp_array = $filters['own_rooms_number'];
                
                if(in_array('+5', $temp_array))
                {
                    $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_rooms_total > 5";
                    
                    if(($key = array_search('+5', $temp_array)) !== false) {
                        unset($temp_array[$key]);
                    }
                }
                $where = $where . ($where != '' ? " AND " : " WHERE ") . "o.own_rooms_total IN (".$this->getStringFromArray($temp_array,false).")";
            }
            
        }

        if ($where != '')
            $query_string = $query_string . $where;

        if ($order_by == "PRICE_LOW_HIGH")
            $order = " o.own_minimum_price ASC ";
        else if ($order_by == "PRICE_HIGH_LOW")
            $order = " o.own_minimum_price DESC ";
        else if ($order_by == "BEST_VALUED")
            $order = " o.own_rating DESC ";
        else if ($order_by == "WORST_VALUED")
            $order = " o.own_rating ASC ";
        else if ($order_by == "A_Z")
            $order = " o.own_name ASC ";
        else if ($order_by == "Z_A")
            $order = " o.own_name DESC ";
        else {
            $order = " o.own_minimum_price ASC ";
        }

        $query_string = $query_string . ' ORDER BY ' . $order;
        $query = $em->createQuery($query_string);  
        $ownerships_list = array();

        if (!$room_filter) {
            $ownerships_list = $query->getResult();
        } else {
            $results = $query->getResult();

            foreach ($results as $result)
                $ownerships_list[] = $result->getRoomOwnership();
        }

        if ($arrivalDate != null || $leavingDate != null) {
            $return_list = array();
            foreach ($ownerships_list as $own) {
                $rooms_total = count($em->getRepository('mycpBundle:room')->findBy(array('room_ownership' => $own->getOwnId())));
                $query_string = "SELECT r FROM mycpBundle:ownershipReservation r WHERE
                                r.own_res_own_id =" . $own->getOwnId();
                $dates_where = "";

                if ($arrivalDate != null) {
                    $dates_where .= ($dates_where != '') ? " OR " : "";
                    $dates_where .= "(r.own_res_reservation_from_date <= '$arrivalDate' AND r.own_res_reservation_to_date >= '$arrivalDate')";
                }

                if ($leavingDate != null) {
                    $dates_where .= ($dates_where != '') ? " OR " : "";
                    $dates_where .= "(r.own_res_reservation_from_date <= '$leavingDate' AND r.own_res_reservation_to_date >= '$leavingDate')";
                }

                if ($arrivalDate != null && $leavingDate != null) {
                    $dates_where .= ($dates_where != '') ? " OR " : "";
                    $dates_where .= "(r.own_res_reservation_from_date >= '$arrivalDate' AND r.own_res_reservation_to_date <= '$leavingDate')";
                }


                $query_string .= ($dates_where != '') ? " AND ($dates_where)" : "";
                $reservations = count($em->createQuery($query_string)->getResult());

                if ($rooms_total > $reservations)
                    $return_list[] = $own;
            }

            return $return_list;
        }

        return $ownerships_list;
    }

    /**
     * Muestra todas las casas que son top20, para mostrar en la portada
     * @param varchar $lang_code
     */
    function top20() {
        $em = $this->getEntityManager();
        $query_string = "SELECT o FROM mycpBundle:ownership o
                         WHERE o.own_top_20=1
                           AND o.own_public <> 0
                         ORDER BY o.own_rating DESC";

        return $em->createQuery($query_string)->setMaxResults(8)->getResult();
    }

    /**
     * Devuelve un arreglo que contiene todas las categorias de casas posibles
     * @return type arreglo
     */
    function getOwnsCategories($own_ids = null) {
        $em = $this->getEntityManager();
        
        if($own_ids != null)
            $query_string = "SELECT DISTINCT o.own_category FROM mycpBundle:ownership o
                            WHERE o.own_public = 1 AND o.own_id IN ($own_ids)
                            ORDER BY o.own_category";
        else
            $query_string = "SELECT DISTINCT o.own_category FROM mycpBundle:ownership o
                             WHERE o.own_public = 1
                             ORDER BY o.own_category";

        $owns_categories = $em->createQuery($query_string)->getResult();
        $categories = array();

        foreach ($owns_categories as $category) {
            if($own_ids != null)
                $query_string = "SELECT count(o.own_type) FROM mycpBundle:ownership o
                         WHERE o.own_public = 1 AND o.own_id IN ($own_ids) AND o.own_category='" . $category['own_category'] . "'";
            else
                $query_string = "SELECT count(o.own_type) FROM mycpBundle:ownership o
                         WHERE o.own_public = 1 AND o.own_category='" . $category['own_category'] . "'";
            $count = $em->createQuery($query_string)->getSingleScalarResult();

            $categories[] = array(trim($category['own_category']), $count);
        }

        return $categories;
    }

    function getOwnsPrices($own_ids = null) {
        $em = $this->getEntityManager();
        $prices = array();
        $prices[] = 25;
        $prices[] = 50;
        $prices[] = 75;
        $prices[] = 100;
        $prices[] = 125;
        $prices[] = 150;
        $prices[] = 175;
        $prices[] = 200;
        $prices[] = 300;

        $prices_result = array();
        $minimun_price = 0;
        foreach ($prices as $price) {
            if($own_ids != null)
                $query_string = "SELECT count(o.own_maximum_price) FROM mycpBundle:ownership o
                         WHERE o.own_public = 1 AND o.own_id IN ($own_ids) AND ((o.own_minimum_price<" . $price . " AND o.own_minimum_price >=$minimun_price))";
            else
                $query_string = "SELECT count(o.own_maximum_price) FROM mycpBundle:ownership o
                         WHERE o.own_public = 1 AND ((o.own_minimum_price<" . $price . " AND o.own_minimum_price >=$minimun_price))";
            $count = $em->createQuery($query_string)->getSingleScalarResult();

            $prices_result[] = array($minimun_price, $price, $count);
            $minimun_price = $price;
        }

        return $prices_result;
    }

    /**
     * Devuelve un arreglo con todos los tipos de casa posibles
     * @return type arreglo
     */
    //Yanet - Inicio
    function getOwnsTypes($own_ids = null) {
        $em = $this->getEntityManager();
        if($own_ids != null)
            $query_string = "SELECT DISTINCT o.own_type FROM mycpBundle:ownership o
                             WHERE o.own_public = 1 AND o.own_id IN ($own_ids)
                             ORDER BY o.own_type";
        else 
            $query_string = "SELECT DISTINCT o.own_type FROM mycpBundle:ownership o
                             WHERE o.own_public = 1
                             ORDER BY o.own_type";

        $owns_types = $em->createQuery($query_string)->getResult();
        $types = array();

        foreach ($owns_types as $type) {
            if($own_ids != null)
                $query_string = "SELECT count(o.own_type) FROM mycpBundle:ownership o
                                 WHERE o.own_public = 1 AND o.own_id IN ($own_ids) AND o.own_type='" . $type['own_type'] . "'";
            else
                $query_string = "SELECT count(o.own_type) FROM mycpBundle:ownership o
                                 WHERE o.own_public = 1 AND o.own_type='" . $type['own_type'] . "'";
            
            $count = $em->createQuery($query_string)->getSingleScalarResult();

            $types[] = array(trim($type['own_type']), $count);
        }

        return $types;
    }

    function getSearchStatistics($own_list) {
        $em = $this->getEntityManager();
        $statistics = array();

        $statistics['room_double'] = 0;
        $statistics['room_double_two_beds'] = 0;
        $statistics['room_simple'] = 0;
        $statistics['room_triple'] = 0;
        $statistics['room_climatization'] = 0;
        $statistics['room_audio_visuals'] = 0;
        $statistics['room_kids'] = 0;
        $statistics['room_smoker'] = 0;
        $statistics['room_safe'] = 0;
        $statistics['room_balcony'] = 0;
        $statistics['room_terrace'] = 0;
        $statistics['room_yard'] = 0;

        $statistics['own_bathroom_inner'] = 0;
        $statistics['own_bathroom_outer'] = 0;
        $statistics['own_bathroom_shared'] = 0;
        $statistics['own_water_sauna'] = 0;
        $statistics['own_water_jacuzzi'] = 0;
        $statistics['own_water_pool'] = 0;

        $statistics['own_services_breakfast'] = 0;
        $statistics['own_services_dinner'] = 0;
        $statistics['own_services_parking'] = 0;
        $statistics['own_services_pets'] = 0;
        $statistics['own_services_laundry'] = 0;
        $statistics['own_service_internet_email'] = 0;
        
        $statistics['own_lang_english'] = 0;
        $statistics['own_lang_french'] = 0;
        $statistics['own_lang_german'] = 0;
        $statistics['own_lang_italian'] = 0;
        
        $statistics['room_total_windows_1'] = 0;
        $statistics['room_total_windows_2'] = 0;
        $statistics['room_total_windows_3'] = 0;
        $statistics['room_total_windows_4'] = 0;
        $statistics['room_total_windows_5'] = 0;
        $statistics['room_total_windows_+5'] = 0;
        
        $statistics['rooms_total_1'] = 0;
        $statistics['rooms_total_2'] = 0;
        $statistics['rooms_total_3'] = 0;
        $statistics['rooms_total_4'] = 0;
        $statistics['rooms_total_5'] = 0;
        $statistics['rooms_total_+5'] = 0;
        
        $statistics['room_total_beds_1'] = 0;
        $statistics['room_total_beds_2'] = 0;
        $statistics['room_total_beds_3'] = 0;
        $statistics['room_total_beds_4'] = 0;
        $statistics['room_total_beds_5'] = 0;
        $statistics['room_total_beds_+5'] = 0;
        
        $own_ids = "0";
        foreach ($own_list as $own) {
            $own_ids .= "," . $own->getOwnId();
            
            if ($own->getOwnFacilitiesBreakfast() != null && $own->getOwnFacilitiesBreakfast())
                $statistics['own_services_breakfast'] += 1;

            if ($own->getOwnFacilitiesDinner() != null && $own->getOwnFacilitiesDinner())
                $statistics['own_services_dinner'] += 1;

            if ($own->getOwnFacilitiesParking() != null && $own->getOwnFacilitiesParking())
                $statistics['own_services_parking'] += 1;

            if ($own->getOwnWaterPiscina() != null && $own->getOwnWaterPiscina())
                $statistics['own_services_pets'] += 1;

            if ($own->getOwnDescriptionLaundry() != null && $own->getOwnDescriptionLaundry())
                $statistics['own_services_laundry'] += 1;

            if ($own->getOwnDescriptionInternet() != null && $own->getOwnDescriptionInternet())
                $statistics['own_service_internet_email'] += 1;

            if ($own->getOwnWaterSauna() != null && $own->getOwnWaterSauna())
                $statistics['own_water_sauna'] += 1;

            if ($own->getOwnWaterPiscina() != null && $own->getOwnWaterPiscina())
                $statistics['own_water_pool'] += 1;

            if ($own->getOwnWaterJacuzee() != null && $own->getOwnWaterJacuzee())
                $statistics['own_water_jacuzzi'] += 1;
            
            if ($own->getOwnLangs() != null && substr($own->getOwnLangs(),0,1) == "1")
                $statistics['own_lang_english'] += 1;
            
            if ($own->getOwnLangs() != null && substr($own->getOwnLangs(),1,1) == "1")
                $statistics['own_lang_french'] += 1;
            
            if ($own->getOwnLangs() != null && substr($own->getOwnLangs(),2,1) == "1")
                $statistics['own_lang_german'] += 1;
            
            if ($own->getOwnLangs() != null && substr($own->getOwnLangs(),3,1) == "1")
                $statistics['own_lang_italian'] += 1;
        }

        $query_string = "SELECT r FROM mycpBundle:room r
                         WHERE r.room_ownership IN ($own_ids) ORDER BY r.room_ownership ASC";

        $rooms = $em->createQuery($query_string)->getResult();
        $current_own_id = 0;
        $total_rooms = 0;
        $is_room_individual = false;
        $is_room_double = false;
        $is_room_double_two_beds = false;
        $is_room_triple = false;
        $is_room_climatization = false;
        $is_room_audiovisual = false;
        $is_room_kids = false;
        $is_room_smoker = false;
        $is_room_safe = false;
        $is_room_windows = false;
        $is_room_balcony = false;
        $is_room_terrace = false;
        $is_room_yard = false;
        $is_room_bathromm_inner = false;
        $is_room_bathroom_outer = false;
        $is_room_bathroom_shared = false;
        $is_room_total_bed = false;
        $is_own_total_room = false;

        foreach ($rooms as $room) {            
            
            if ($room->getRoomOwnership()->getOwnId() != $current_own_id) {                
                if ($total_rooms != null && $total_rooms > 0 && !$is_own_total_room) {
                //$statistics['room_windows'] += 1;
                switch($total_rooms)
                {
                    case 1: $statistics['rooms_total_1'] += 1; break;
                    case 2: $statistics['rooms_total_2'] += 1; break;
                    case 3: $statistics['rooms_total_3'] += 1; break;
                    case 4: $statistics['rooms_total_4'] += 1; break;
                    case 5: $statistics['rooms_total_5'] += 1; break;
                    default:
                        if ($room->getRoomWindows() > 5)
                        {
                            $statistics['rooms_total_+5'] += 1; 
                            break;
                        }
                }
                $is_own_total_room = true;
            }
                
                
                $current_own_id = $room->getRoomOwnership()->getOwnId();
                $is_room_individual = false;
                $is_room_double = false;
                $is_room_double_two_beds = false;
                $is_room_triple = false;
                $is_room_climatization = false;
                $is_room_audiovisual = false;
                $is_room_kids = false;
                $is_room_smoker = false;
                $is_room_safe = false;
                $is_room_windows = false;
                $is_room_balcony = false;
                $is_room_terrace = false;
                $is_room_yard = false;
                $is_room_bathromm_inner = false;
                $is_room_bathroom_outer = false;
                $is_room_bathroom_shared = false;
                $is_room_total_bed = false;
                $is_own_total_room = false;
                $total_rooms = 0;
            }
            
            $total_rooms += 1;

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación doble' && !$is_room_double) {
                $statistics['room_double'] += 1;
                $is_room_double = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación doble (Dos camas)' && !$is_room_double_two_beds) {
                $statistics['room_double_two_beds'] += 1;
                $is_room_double_two_beds = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación individual' && !$is_room_individual) {
                $statistics['room_simple'] += 1;
                $is_room_individual = true;
            }

            if ($room->getRoomType() != null && $room->getRoomType() == 'Habitación Triple' && !$is_room_triple) {
                $statistics['room_triple'] += 1;
                $is_room_triple = true;
            }

            if ($room->getRoomClimate() != null && $room->getRoomClimate() == 'Aire acondicionado' && !$is_room_climatization) {
                $statistics['room_climatization'] += 1;
                $is_room_climatization = true;
            }

            if ($room->getRoomAudiovisual() != null && $room->getRoomAudiovisual() != '' && !$is_room_audiovisual) {
                $statistics['room_audio_visuals'] += 1;
                $is_room_audiovisual = true;
            }

            if ($room->getRoomBaby() != null && $room->getRoomBaby() && !$is_room_kids) {
                $statistics['room_kids'] += 1;
                $is_room_kids = true;
            }

            if ($room->getRoomSmoker() != null && $room->getRoomSmoker() && !$is_room_smoker) {
                $statistics['room_smoker'] += 1;
                $is_room_smoker = true;
            }

            if ($room->getRoomSafe() != null && $room->getRoomSafe() && !$is_room_safe) {
                $statistics['room_safe'] += 1;
                $is_room_safe = true;
            }

            if ($room->getRoomWindows() != null && $room->getRoomWindows() > 0 && !$is_room_windows) {
                //$statistics['room_windows'] += 1;
                switch($room->getRoomWindows())
                {
                    case 1: $statistics['room_total_windows_1'] += 1; break;
                    case 2: $statistics['room_total_windows_2'] += 1; break;
                    case 3: $statistics['room_total_windows_3'] += 1; break;
                    case 4: $statistics['room_total_windows_4'] += 1; break;
                    case 5: $statistics['room_total_windows_5'] += 1; break;
                    default:
                        if ($room->getRoomWindows() > 5)
                        {
                            $statistics['room_total_windows_+5'] += 1; 
                            break;
                        }
                }
                $is_room_windows = true;
            }
            
            if ($room->getRoomBeds() != null && $room->getRoomBeds() > 0 && !$is_room_total_bed) {
                //$statistics['room_windows'] += 1;
                switch($room->getRoomBeds())
                {
                    case 1: $statistics['room_total_beds_1'] += 1; break;
                    case 2: $statistics['room_total_beds_2'] += 1; break;
                    case 3: $statistics['room_total_beds_3'] += 1; break;
                    case 4: $statistics['room_total_beds_4'] += 1; break;
                    case 5: $statistics['room_total_beds_5'] += 1; break;
                    default:
                        if ($room->getRoomBeds() > 5)
                        {
                            $statistics['room_total_beds_+5'] += 1; 
                            break;
                        }
                }
                $is_room_total_bed = true;
            }

            if ($room->getRoomBalcony() != null && $room->getRoomBalcony() > 0 && !$is_room_balcony) {
                $statistics['room_balcony'] += 1;
                $is_room_balcony = true;
            }

            if ($room->getRoomTerrace() != null && $room->getRoomTerrace() && !$is_room_terrace) {
                $statistics['room_terrace'] += 1;
                $is_room_terrace = true;
            }

            if ($room->getRoomYard() != null && $room->getRoomYard() && !$is_room_yard) {
                $statistics['room_yard'] += 1;
                $is_room_yard = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Interior privado' && !$is_room_bathromm_inner) {
                $statistics['own_bathroom_inner'] += 1;
                $is_room_bathromm_inner = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Exterior privado' && !$is_room_bathroom_outer) {
                $statistics['own_bathroom_outer'] += 1;
                $is_room_bathroom_outer = true;
            }

            if ($room->getRoomBathroom() != null && $room->getRoomBathroom() == 'Compartido' && !$is_room_bathroom_shared) {
                $statistics['own_bathroom_shared'] += 1;
                $is_room_bathroom_shared = true;
            }
        }
        
        if(count($own_list) == 1)
        {
            switch($total_rooms)
                {
                    case 1: $statistics['rooms_total_1'] += 1; break;
                    case 2: $statistics['rooms_total_2'] += 1; break;
                    case 3: $statistics['rooms_total_3'] += 1; break;
                    case 4: $statistics['rooms_total_4'] += 1; break;
                    case 5: $statistics['rooms_total_5'] += 1; break;
                    default:
                        if ($room->getRoomWindows() > 5)
                        {
                            $statistics['rooms_total_+5'] += 1; 
                            break;
                        }
                }
        }

        return $statistics;
    }

    function getSearchStatisticsByIds($own_ids) {
        $em = $this->getEntityManager();

        $query_string = "SELECT o FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
        $own_list = $em->createQuery($query_string)->getResult();
        return $this->getSearchStatistics($own_list);
    }
    
    function getListByIds($own_ids) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o FROM mycpBundle:ownership o WHERE o.own_id IN ($own_ids)";
        return $em->createQuery($query_string)->getResult();
    }
    

    //Yanet - Fin

    /**
     * Devuelve un list con las ultimas casas agregadas
     * @return type list
     */
    function lastAdded($results_total = null) {
        $em = $this->getEntityManager();
        $query_string = "SELECT o FROM mycpBundle:ownership o
                         WHERE o.own_public <> 0
                         ORDER BY o.own_id DESC";
        return ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->getResult();
    }

    function getByCategory($category, $results_total = null, $exclude_id = null) {
        $em = $this->getEntityManager();

        $query_string = '';
        if ($exclude_id == null)
            $query_string = "SELECT o FROM mycpBundle:ownership o
                         WHERE o.own_category='$category'
                           AND o.own_public <> 0
                         ORDER BY o.own_rating DESC";
        else
            $query_string = "SELECT o FROM mycpBundle:ownership o
                         WHERE o.own_category='$category'
                           AND o.own_public <> 0
                           AND o.own_id <> $exclude_id
                         ORDER BY o.own_rating DESC";

        return ($results_total != null && $results_total > 0) ? $em->createQuery($query_string)->setMaxResults($results_total)->getResult() : $em->createQuery($query_string)->getResult();
    }

    function getPhotos($ownid) {
        $em = $this->getEntityManager();
        $query_string = "SELECT op FROM mycpBundle:ownershipPhoto op
                         JOIN op.own_pho_photo p
                         WHERE op.own_pho_own=$ownid
                         ORDER BY p.pho_order ASC";

        $photos = array();
        $result = $em->createQuery($query_string)->getResult();

        foreach ($result as $photo) {
            if (file_exists(realpath("uploads/ownershipImages/" . $photo->getOwnPhoPhoto()->getPhoName())))
                $photos[] = $photo->getOwnPhoPhoto();
        }

        return $photos;
    }

    function getPhotoDescription($photos, $lang_code) {
        if (is_array($photos)) {
            $em = $this->getEntityManager();
            $query_string = "";

            $descriptions = array();

            foreach ($photos as $photo) {
                $query_string = "SELECT p FROM mycpBundle:photoLang p
                         JOIN p.pho_lang_id_lang l
                         WHERE l.lang_code='$lang_code'
                           AND p.pho_lang_id_photo=" . $photo->getPhoId();
                $descriptions[$photo->getPhoId()] = $em->createQuery($query_string)->setMaxResults(1)->getResult();
            }

            return $descriptions;
        }
    }

    function getOwnershipForAutocomplete_ByName($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_name LIKE '%$own_part_name%' AND o.own_public=1 ORDER BY o.own_name ASC");
        return $query->getResult();
    }

    function getOwnershipForAutocomplete_ByCode($own_part_name) {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_mcp_code LIKE '%$own_part_name%' AND o.own_public=1 ORDER BY o.own_mcp_code ASC");
        return $query->getResult();
    }

    function getPublicOwnerships() {
        $em = $this->getEntityManager();

        $query = $em->createQuery("SELECT o FROM mycpBundle:ownership o
        WHERE o.own_public=1 ORDER BY o.own_name ASC");
        return $query->getResult();
    }
    
    private function getStringFromArray($array, $has_string_items = true)
    {
        if(is_array($array)){
            $quotas_element = (($has_string_items)?"'":"");
            $string_value = $quotas_element."0".$quotas_element;
            
            foreach($array as $item)
            {
                $string_value .= ",".$quotas_element.$item.$quotas_element;
            }
            return $string_value;
        }
        return null;
    }

    /**
     * Codigo Yanet - Fin
     */
}
