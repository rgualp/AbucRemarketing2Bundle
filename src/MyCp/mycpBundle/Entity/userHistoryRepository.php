<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * userHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class userHistoryRepository extends EntityRepository
{
    public function insert($is_ownership, $element_id, $user_ids) {
        $em = $this->getEntityManager();
        //$user_ids = $em->getRepository('mycpBundle:user')->user_ids($controller);
        
        $ownership = null;
        $user = null;
        $destination = null;
        if ($is_ownership)
            $ownership = $em->getRepository('mycpBundle:ownership')->find($element_id);
        else
            $destination = $em->getRepository('mycpBundle:destination')->find($element_id);

        if ($user_ids["user_id"] != null)
            $user = $em->getRepository('mycpBundle:user')->find($user_ids["user_id"]);            

        $element = $this->get_from_history($user_ids, $element_id,$is_ownership);
        if($element == null)
        {
            $history = new userHistory();
            $history->setUserHistoryVisitDate(new \DateTime());
            $history->setUserHistoryOwnership($ownership);
            $history->setUserHistoryDestination($destination);
            $history->setUserHistorySessionId($user_ids["session_id"]);
            $history->setUserHistoryUser($user);
            $history->setUserHistoryVisitCount(1);

            $em->persist($history);
            $em->flush();
        }
        else
        {
            $element->setUserHistoryVisitDate(new \DateTime());
            $element->setUserHistoryVisitCount($element->getUserHistoryVisitCount() + 1);
            $em->persist($element);
            $em->flush();
        }
    }
    
     public function get_from_history($user_ids, $element_id, $is_ownership = true) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT h FROM mycpBundle:userHistory h ";
            $where = "";

            if ($user_ids["user_id"] != null)
                $where.= " WHERE h.user_history_user = ".$user_ids['user_id'];
            else if ($user_ids["session_id"] != null)
                $where .= " WHERE h.user_history_session_id = '".$user_ids["session_id"]."'";

            $where .= ($where != "") ? (($is_ownership) ? " AND h.user_history_ownership = $element_id" : " AND h.user_history_destination = $element_id") : "";

            if ($where != "")
                return $em->createQuery($query_string . $where)->getOneOrNullResult();
            else
                return null;
        } catch (Exception $e) {
            return false;
        }
    }
    
    public function get_list($user_ids, $is_ownership = true, $max_results = null, $exclude_id_element = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT h FROM mycpBundle:userHistory h ";
            $where = "";

            if ($user_ids["user_id"] != null)
                $where.= " WHERE h.user_history_user = ".$user_ids['user_id'];
            else if ($user_ids["session_id"] != null)
                $where .= " WHERE h.user_history_session_id = '".$user_ids["session_id"]."'";

            $where .= ($where != "") ? (($is_ownership) ? " AND h.user_history_ownership IS NOT NULL " : " AND h.user_history_destination IS NOT NULL ") : "";

            if($exclude_id_element != null)
            {
                $where .= ($where != "") ? (($is_ownership) ? " AND h.user_history_ownership != $exclude_id_element " : " AND h.user_history_destination != $exclude_id_element ") : "";
            }
            
            if ($where != "")
                return ($max_results != null) ? $em->createQuery($query_string . $where . " ORDER BY h.user_history_visit_date DESC ")->setMaxResults($max_results)->getResult() : $em->createQuery($query_string . $where . " ORDER BY h.user_history_visit_date DESC ")->getResult();
            else
                return null;
        } catch (Exception $e) {
            return null;
        }
    }
    
    public function get_list_entity($user_ids, $is_ownership = true, $max_results = null, $exclude_id_element = null) {
        try {
            $em = $this->getEntityManager();
            $query_string = "SELECT h FROM mycpBundle:userHistory h ";
            $where = "";

            if ($user_ids["user_id"] != null)
                $where.= " WHERE h.user_history_user = ".$user_ids['user_id'];
            else if ($user_ids["session_id"] != null)
                $where .= " WHERE h.user_history_session_id = '".$user_ids["session_id"]."'";

            $where .= ($where != "") ? (($is_ownership) ? " AND h.user_history_ownership IS NOT NULL " : " AND h.user_history_destination IS NOT NULL ") : "";
            
            if($exclude_id_element != null)
            {
                $where .= ($where != "") ? (($is_ownership) ? " AND h.user_history_ownership != $exclude_id_element " : " AND h.user_history_destination != $exclude_id_element ") : "";
            }

            if ($where != "")
            {
                $query_results = ($max_results != null) ? $em->createQuery($query_string . $where . " ORDER BY h.user_history_visit_date DESC ")->setMaxResults($max_results)->getResult() : $em->createQuery($query_string . $where . " ORDER BY h.user_history_visit_date DESC ")->getResult();
                $results = array();
                
                foreach ($query_results as $history) {
                    $results[] = ($is_ownership) ? $history->getUserHistoryOwnership() : $history->getUserHistoryDestination();
                }
                
                return $results;
            }
            else
                return null;
        } catch (Exception $e) {
            return null;
        }
    }
    
    public function set_to_user($user_id, $session_id) {
        $em = $this->getEntityManager();
        $query = $em->createQuery("UPDATE mycpBundle:userHistory h
                                   SET h.user_history_user= $user_id,
                                       h.user_history_session_id = NULL
                                   WHERE h.user_history_session_id='$session_id'");
        $query->execute();
    }
}
