<?php

namespace MyCp\mycpBundle\Entity;

use Doctrine\ORM\EntityRepository;
use MyCp\mycpBundle\Entity\comment;


/**
 * commentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class commentRepository extends EntityRepository
{
    function insert($data, $user)
    {
         $em = $this->getEntityManager();

         $ownership = $em->getRepository('mycpBundle:ownership')->find($data['com_ownership_id']);

         $comment = new comment();
         $comment->setComDate(new \DateTime());
         $comment->setComOwnership($ownership);
         $comment->setComRate($data['com_rating']);
         $comment->setComComments($data['com_comments']);
         $comment->setComUser($user);
         $comment->setComPublic(true);

         $em->persist($comment);
         $em->flush();

         $newRating = ($ownership->getOwnRating() + $comment->getComRate()) / 2;
         $ownership->setOwnRating($newRating);

         if($comment->getComRate() >= 3)
         {
             $total_comments = $ownership->getOwnCommentsTotal() + 1;
             $ownership->setOwnCommentsTotal($total_comments);
         }
         $em->persist($ownership);
         $em->flush();
    }

    function getByOwnership($ownsership_id)
    {
        $em = $this->getEntityManager();
        $query_string = "SELECT c FROM mycpBundle:comment c
                         WHERE c.com_public=1
                           AND c.com_ownership = :ownership_id
                           AND c.com_public = 1
                         ORDER BY c.com_date DESC";

        return $em->createQuery($query_string)->setParameter('ownership_id', $ownsership_id)->getResult();
    }

    function getAll($filter_ownership,$filter_user,$filter_keyword, $filter_rate,$sort_by)
    {
        $queryStr = "SELECT c,own,us FROM mycpBundle:comment c
        JOIN c.com_ownership own JOIN c.com_user us WHERE own.own_mcp_code LIKE :filter_ownership";
        return $this->get_all_comment_by_query($filter_ownership,$filter_user,$filter_keyword, $filter_rate,$sort_by, -1, $queryStr);
    }

    function get_comment_by_user_casa($filter_ownership,$filter_user,$filter_keyword, $filter_rate,$sort_by, $user_casa_id)
    {
        $queryStr = "SELECT c,own,us FROM mycpBundle:comment c
        JOIN c.com_ownership own JOIN c.com_user us JOIN mycpBundle:userCasa uca WITH own.own_id = uca.user_casa_ownership WHERE own.own_mcp_code LIKE :filter_ownership and uca.user_casa_id = :user_casa_id";
        return $this->get_all_comment_by_query($filter_ownership,$filter_user,$filter_keyword, $filter_rate,$sort_by, $user_casa_id, $queryStr);
    }

    function get_all_comment_by_query($filter_ownership,$filter_user,$filter_keyword, $filter_rate,$sort_by, $user_casa_id, $queryStr)
    {
        $string='';
        if($filter_user!='null' && $filter_user!='')
        {
            $string="AND c.com_user = :filter_user";
        }

        $string2='';
        if($filter_keyword!='null' && $filter_keyword!='')
        {
            $string2="AND c.com_comments LIKE :filter_keyword";
        }
        $string3='';
        if($filter_rate!='null' && $filter_rate!='')
        {
            $string3="AND c.com_rate = :filter_rate";
        }


        $string4='';
        switch($sort_by){
            case 0:
                $string4="ORDER BY own.own_mcp_code ASC";
                break;

            case 1:
                $string4="ORDER BY own.own_mcp_code DESC";
                break;


        }

        $queryStr = $queryStr . " " . $string . " " . $string2 . " " . $string3 . " " . $string4;
        $em = $this->getEntityManager();
        $query = $em->createQuery($queryStr);

        if($filter_user!='null' && $filter_user!='')
            $query->setParameter('filter_user', $filter_user);

        if($filter_keyword!='null' && $filter_keyword!='')
            $query->setParameter('filter_keyword', "%".$filter_keyword."%");

        if($filter_rate!='null' && $filter_rate!='')
            $query->setParameter('filter_rate', $filter_rate);

        if ($user_casa_id != -1)
            $query->setParameter("user_casa_id", $user_casa_id);

        $query->setParameter('filter_ownership', "%".$filter_ownership."%");



        return $query->getResult();
    }

    function canComment($user, $own_id)
    {

        if ($user != null && $user != "anon.")
        {
            $em = $this->getEntityManager();
            $query_string = "SELECT own_r FROM mycpBundle:ownershipReservation own_r JOIN own_r.own_res_gen_res_id gen_res
                             WHERE gen_res.gen_res_own_id = :own_id".
                             " AND gen_res.gen_res_user_id = :user_id".
                             " AND own_r.own_res_status = ".ownershipReservation::STATUS_RESERVED;
            $reservations=count($em->createQuery($query_string)->setParameters(array('own_id' => $own_id, 'user_id' => $user))->getResult());

            $query_string = "SELECT com FROM mycpBundle:comment com
                            WHERE com.com_ownership = :own_id
                              AND com.com_user = :user_id";
            $comments = count($em->createQuery($query_string)->setParameters(array('own_id' => $own_id, 'user_id' => $user))->getResult());
            //var_dump($result); exit();
            return ($reservations > $comments) || ($reservations == 0 && $comments == 0);
        }
        return false;
    }

    function getByUser($id_user)
    {
        if($id_user != null)
        {
            $em = $this->getEntityManager();

            $query_string = "SELECT com FROM mycpBundle:comment com
                             WHERE com.com_user = :id_user
                             AND com.com_ownership IS NOT NULL
                             AND com.com_public = 1
                             ORDER BY com.com_date DESC";

            return $em->createQuery($query_string)->setParameter('id_user', $id_user)->getResult();
        }
    }
}
