<?php

namespace MyCp\PartnerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MyCp\PartnerBundle\Entity\paGeneralReservation;
use MyCp\PartnerBundle\Entity\paOwnershipReservation;

/**
 * paGeneralReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class paGeneralReservationRepository extends EntityRepository {

    public function createReservationForPartner($user, $accommodation, $dateFrom, $dateTo, $adults, $children, $container, $rooms = null)
    {
        $em = $this->getEntityManager();
        $service_time = $container->get("Time");
        $serviceFee = $em->getRepository("mycpBundle:serviceFee")->getCurrent();

        $nights = $service_time->nights($dateFrom->getTimestamp(), $dateTo->getTimestamp());

        $general_reservation = new paGeneralReservation();
        $general_reservation->setUser($user);
        $general_reservation->setCreationDate(new \DateTime(date('Y-m-d')));
        $general_reservation->setHour(new \DateTime(date('H:i:s')));
        $general_reservation->setDateFrom($dateFrom);
        $general_reservation->setDateTo($dateTo);
        $general_reservation->setAccommodation($accommodation);
        $general_reservation->setServiceFee($serviceFee);
        $general_reservation->setNights($nights);

        $total_price = 0;
        $partial_total_price = array();
        $destination_id = ($accommodation->getOwnDestination() != null) ? $accommodation->getOwnDestination()->getDesId() : null;

        $availability = $this->getAvailableRooms($accommodation, $dateFrom, $dateTo);
        $rooms = $availability["availableRooms"];

        if(count($rooms) == 0)
            return array("successful" => false, "message" => "MSG_ERROR_NO_ROOMS_AVAILABLE", "reservation" => null);

        $isAValidTotalGuests = $this->checkCapacity($availability["availableCapacity"], $adults, $children);

        if(!$isAValidTotalGuests)
            return array("successful" => false, "message" => "MSG_ERROR_NO_VALID_TOTAL_GUESTS", "reservation" => null);

        $adultsCounter = $adults;
        $childrenCounter = $children;


        foreach ($rooms as $room) {
            if($adultsCounter <= 0 && $childrenCounter <= 0) break;

            $adultsToLodge = $room->getMaximumNumberGuests();
            $childrenToLodge = $adultsToLodge;

            if($adultsCounter > 0 && $adultsCounter < $adultsToLodge)
                $adultsToLodge = $adultsCounter;

            if($childrenCounter > 0 && $childrenCounter < $childrenToLodge)
                $childrenToLodge = $childrenCounter;

            $adultsCounter -= $adultsToLodge;
            $childrenCounter -= $childrenToLodge;

            $triple_room_recharge = (($adultsToLodge + $childrenToLodge) >= 3) ? $container->getParameter('configuration.triple.room.charge') : 0;
            $array_dates = $service_time->datesBetween($dateFrom->getTimestamp(), $dateTo->getTimestamp());
            $temp_price = 0;

            $seasons = $em->getRepository("mycpBundle:season")->getSeasons($dateFrom->getTimestamp(), $dateTo->getTimestamp(), $destination_id);

            for ($a = 0; $a < count($array_dates) - 1; $a++) {
                $seasonType = $service_time->seasonTypeByDate($seasons, $array_dates[$a]);
                $roomPrice = $room->getPriceBySeasonType($seasonType);
                $total_price += $roomPrice + $triple_room_recharge;
                $temp_price += $roomPrice + $triple_room_recharge;
            }
            $partial_total_price[$room->getRoomId()] = $temp_price;


            $ownership_reservation = new paOwnershipReservation();
            $ownership_reservation->setAdults($adults);
            $ownership_reservation->setChildren($children);
            $ownership_reservation->setDateFrom($dateFrom);
            $ownership_reservation->setDateTo($dateTo);
            $ownership_reservation->setRoom($room);
            $ownership_reservation->setRoomPriceDown($room->getRoomPriceDownTo());
            $ownership_reservation->setRoomPriceUp($room->getRoomPriceUpTo());
            $ownership_reservation->setRoomPriceSpecial($room->getRoomPriceSpecial());
            $ownership_reservation->setPaGenResId($general_reservation);
            $ownership_reservation->setRoomType($room->getRoomType());
            $ownership_reservation->setTotalPrice($partial_total_price[$room->getRoomId()]);
            $ownership_reservation->setNights($nights);

            $em->persist($ownership_reservation);
        }

        $general_reservation->setTotalPrice($total_price);

        $em->persist($general_reservation);
        $em->flush();


        return array("successful" => true, "message" => null, "reservation" => $general_reservation);
    }

    public function getAvailableRooms($accommodation, $dateFrom, $dateTo)
    {
        $em = $this->getEntityManager();
        $rooms = $accommodation->getOwnRooms();
        $capacity = 0;

        $returnedRooms = array();


        foreach($rooms as $room)
        {
            $uDetailsCount = $em->getRepository("mycpBundle:unavailabilityDetails")->existByDateAndRoom($room->getRoomId(), $dateFrom, $dateTo);
            $reservations = $em->getRepository("mycpBundle:ownershipReservation")->getCountReservationsByRoomAndDates($room->getRoomId(), $dateFrom, $dateTo);

            if(($uDetailsCount + $reservations) == 0)
            {
                $returnedRooms[] = $room;
                $capacity += $room->getMaximumNumberGuests();
            }
        }

        return array("availableRooms" => $returnedRooms, "availableCapacity" => $capacity);
    }

    private function checkCapacity($totalCapacity, $adults, $children)
    {
        $maxGuests = ($adults > $children) ? $adults : $children;
        return $totalCapacity >= $maxGuests;
    }
}
