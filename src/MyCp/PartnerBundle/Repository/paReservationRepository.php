<?php

namespace MyCp\PartnerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MyCp\PartnerBundle\Entity\paClient;
use MyCp\PartnerBundle\Entity\paReservation;
use MyCp\PartnerBundle\Entity\paReservationDetail;
use MyCp\PartnerBundle\Entity\paTravelAgency;
use MyCp\mycpBundle\Entity\generalReservation;

/**
 * paReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class paReservationRepository extends EntityRepository {

    /*public function search($destination = null, $fromDate = null, $toDate = null, $guests = null, $hasBabyFacilities = null, $rooms = null)
    {
        $qb = $this->createQueryBuilder()
            ->
            ->from("mycpBundle:ownership", "own")
            ->join("own.data", "data")
            ->leftJoin("own.awards", "award")
    }*/

    public function getOpenReservationsList($agency){
        return $this->createQueryBuilder("query")
            ->select("res", "client")
            ->from("PartnerBundle:paReservation", "res")
            ->join("res.client", "client")
            ->join("client.travelAgency", "agency")
            ->where("agency.id = :travelAgency")
            ->andWhere("res.closed = 0")
            ->setParameter("travelAgency", $agency->getId())
            ->getQuery()->getResult();
    }

    public function newReservation($agency, $clientName, $adults, $children, $dateFrom, $dateTo, $accommodation, $user, $container)
    {
        $em = $this->getEntityManager();
        $client = $this->createQueryBuilder("query")
            ->select("client")
            ->from("PartnerBundle:paClient", "client")
            ->join("client.travelAgency", "agency")
            ->where("client.fullname LIKE :fullname")
            ->andWhere("agency.id = :travelAgencyId")
            ->setMaxResults(1)
            ->setParameter("fullname", "%".$clientName."%")
            ->setParameter("travelAgencyId", $agency->getId())
            ->getQuery()->getOneOrNullResult();

        if($client == null)
        {
            $client = new paClient();
            $client->setFullName($clientName)
                ->setTravelAgency($agency)
            ;

            $em->persist($client);
        }

        //Buscar a ver si el cliente tiene una reserva abierta
        $openReservation = $this->createQueryBuilder("query")
            ->from("PartnerBundle:paReservation", "reservation")
            ->select("reservation")
            ->join("reservation.client", "client")
            ->join("client.travelAgency", "agency")
            ->where("agency.id = :travelAgencyId")
            ->andWhere("client.id = :idClient")
            ->andWhere("reservation.closed = 0")
            ->setParameter("travelAgencyId", $agency->getId())
            ->setParameter("idClient", $client->getId())
            ->getQuery()->getOneOrNullResult();

        if($openReservation == null)
        {
            $openReservation = new paReservation();
            $openReservation->setAdults($adults)
                ->setChildren($children)
                ->setClient($client);
        }

        if($this->canCreateReservation($openReservation, $accommodation, $dateFrom, $dateTo)) {
            //Actualizar total de ubicados
            $openReservation->setAdultsWithAccommodation($openReservation->getAdultsWithAccommodation() + $adults)
                ->setChildrenWithAccommodation($openReservation->getChildrenWithAccommodation() + $children);

            $em->persist($openReservation);

            //Agregar un generalReservation por casa
            $returnedObject = $em->getRepository("PartnerBundle:paGeneralReservation")->createReservationForPartner($user, $accommodation, $dateFrom, $dateTo, $adults, $children, $container);

            if ($returnedObject["successful"]) {
                $detail = new paReservationDetail();
                $detail->setReservation($openReservation)
                    ->setOpenReservationDetail($returnedObject["reservation"]);

                $em->persist($detail);
                $em->flush();
            }

            return $returnedObject;
        }

        return null;
    }

    public function canCreateReservation($reservation, $accommodation, $dateFrom, $dateTo)
    {
        $em = $this->getEntityManager();
        $countReservations = $em->createQueryBuilder()
            ->from("PartnerBundle:paGeneralReservation", "pa_gres")
            ->join("pa_gres.accommodation", "accommodation")
            ->join("pa_gres.travelAgencyOpenReservationsDetails", "paDetail")
            ->leftJoin("paDetail.reservation", "reservation")
            ->select("count(pa_gres)")
            ->where("accommodation.own_id = :ownId")
            ->andWhere("reservation.id = :reservationId")
            ->andWhere("pa_gres.dateFrom = :dateFrom")
            ->andWhere("pa_gres.dateTo = :dateTo")
            ->setParameters(array("dateFrom" => $dateFrom, "dateTo" => $dateTo, "ownId" => $accommodation->getOwnId(), "reservationId" => $reservation->getId()))
            ->setMaxResults(1)->getQuery()->getSingleScalarResult();

        return ($countReservations == 0);
    }
}
