<?php

namespace MyCp\PartnerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MyCp\PartnerBundle\Entity\paClient;
use MyCp\PartnerBundle\Entity\paReservation;
use MyCp\PartnerBundle\Entity\paReservationDetail;
use MyCp\PartnerBundle\Entity\paTravelAgency;
use MyCp\mycpBundle\Entity\generalReservation;

/**
 * paReservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class paReservationRepository extends EntityRepository {

    /*public function search($destination = null, $fromDate = null, $toDate = null, $guests = null, $hasBabyFacilities = null, $rooms = null)
    {
        $qb = $this->createQueryBuilder()
            ->
            ->from("mycpBundle:ownership", "own")
            ->join("own.data", "data")
            ->leftJoin("own.awards", "award")
    }*/

    public function getOpenReservationsList($agency){
        return $this->createQueryBuilder("query")
            ->select("res", "client")
            ->from("PartnerBundle:paReservation", "res")
            ->join("res.client", "client")
            ->join("client.travelAgency", "agency")
            ->where("agency.id = :travelAgency")
            ->andWhere("res.closed = 0")
            ->setParameter("travelAgency", $agency->getId())
            ->getQuery()->getResult();
    }

    public function newReservation($agency, $clientName, $adults, $children, $dateFrom, $dateTo, $accommodation, $user, $container)
    {
        $em = $this->getEntityManager();
        $client = $this->createQueryBuilder("query")
            ->select("client")
            ->from("PartnerBundle:paClient", "client")
            ->join("client.travelAgency", "agency")
            ->where("client.fullname LIKE :fullname")
            ->andWhere("agency.id = :travelAgencyId")
            ->setParameter("fullname", "%".$clientName."%")
            ->setParameter("travelAgencyId", $agency->getId())
            ->getQuery()->getOneOrNullResult();

        if($client == null)
        {
            $client = new paClient();
            $client->setFullName($clientName)
                ->setTravelAgency($agency)
            ;

            $em->persist($client);
        }

        //Buscar a ver si el cliente tiene una reserva abierta
        $openReservation = $this->createQueryBuilder("query")
            ->from("PartnerBundle:paReservation", "reservation")
            ->select("reservation")
            ->join("reservation.client", "client")
            ->join("client.travelAgency", "agency")
            ->where("agency.id = :travelAgencyId")
            ->andWhere("client.id = :idClient")
            ->andWhere("reservation.closed = 0")
            ->setParameter("travelAgencyId", $agency->getId())
            ->setParameter("idClient", $client->getId())
            ->getQuery()->getOneOrNullResult();

        if($openReservation == null)
        {
            $openReservation = new paReservation();
            $openReservation->setAdults($adults)
                ->setChildren($children)
                ->setClient($client);
        }
        //Actualizar total de ubicados
        $openReservation->setAdultsWithAccommodation($openReservation->getAdultsWithAccommodation() + $adults)
            ->setChildrenWithAccommodation($openReservation->getChildrenWithAccommodation() + $children);

        $em->persist($openReservation);

        //Agregar un generalReservation por casa
        $returnedObject = $em->getRepository("PartnerBundle:paGeneralReservation")->createReservationForPartner($user, $accommodation, $dateFrom, $dateTo, $adults, $children, $container);

        if($returnedObject["successful"]) {
            $detail = new paReservationDetail();
            $detail->setReservation($openReservation)
                ->setOpenReservationDetail($returnedObject["reservation"]);

            $em->persist($detail);
            $em->flush();
        }

        return $returnedObject;
    }
}
